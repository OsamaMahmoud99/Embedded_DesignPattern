
09-hardware_proxy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08002150  08002150  00003150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022bc  080022bc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080022bc  080022bc  000032bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022c4  080022c4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c4  080022c4  000032c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022c8  080022c8  000032c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080022cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08002328  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08002328  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000186d  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000764  00000000  00000000  000058f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00006060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015a  00000000  00000000  00006250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab97  00000000  00000000  000063aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025b1  00000000  00000000  00020f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091049  00000000  00000000  000234f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b453b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f8c  00000000  00000000  000b4580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000b550c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002138 	.word	0x08002138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002138 	.word	0x08002138

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <MotorProxy_Initialize>:
static MotorData unmarshal(uint32_t encodedMData);
static uint32_t marshal(const MotorData mData);
static void _MotorProxy_Init(MotorProxy *const me, const char *name);

void MotorProxy_Initialize(MotorProxy *const me)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	MotorData mData;
	if(!me->motorData){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d029      	beq.n	8000b00 <MotorProxy_Initialize+0x64>
		return;
	}

	mData.on_off = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	723b      	strb	r3, [r7, #8]
	mData.direction = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	727b      	strb	r3, [r7, #9]
	mData.speed = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
	mData.errorStatus = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	743b      	strb	r3, [r7, #16]
	mData.noPowerError = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	747b      	strb	r3, [r7, #17]
	mData.noTorqueError = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	74bb      	strb	r3, [r7, #18]
	mData.BITError = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	mData.overTemperatureError = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	753b      	strb	r3, [r7, #20]
	mData.reservedError1 = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	757b      	strb	r3, [r7, #21]
	mData.reservedError2 = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	75bb      	strb	r3, [r7, #22]
	mData.unknownError = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]

	(*(volatile uint32_t *)(*me->motorAddr)) = marshal(mData);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461c      	mov	r4, r3
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae6:	f000 f949 	bl	8000d7c <marshal>
 8000aea:	4603      	mov	r3, r0
 8000aec:	6023      	str	r3, [r4, #0]
	printf("%s,0x%X\n\r",__func__,*me->motorAddr);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4904      	ldr	r1, [pc, #16]	@ (8000b08 <MotorProxy_Initialize+0x6c>)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MotorProxy_Initialize+0x70>)
 8000afa:	f000 fd5d 	bl	80015b8 <iprintf>
 8000afe:	e000      	b.n	8000b02 <MotorProxy_Initialize+0x66>
		return;
 8000b00:	bf00      	nop
}
 8000b02:	371c      	adds	r7, #28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	08002228 	.word	0x08002228
 8000b0c:	08002150 	.word	0x08002150

08000b10 <_MotorProxy_Init>:

static void _MotorProxy_Init(MotorProxy *const me, const char *name)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	me->motorAddr = NULL;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
	me->name = name;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	60da      	str	r2, [r3, #12]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <MotorProxy_Create>:
{

}

MotorProxy * MotorProxy_Create(const char *name)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	MotorProxy * me = (MotorProxy *)malloc(sizeof(MotorProxy));
 8000b3a:	2010      	movs	r0, #16
 8000b3c:	f000 fbc4 	bl	80012c8 <malloc>
 8000b40:	4603      	mov	r3, r0
 8000b42:	60fb      	str	r3, [r7, #12]

	if(me){
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <MotorProxy_Create+0x20>
		_MotorProxy_Init(me, name);
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff ffdf 	bl	8000b10 <_MotorProxy_Init>
	}
	return me;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Motorproxy_enable>:
	}
	free(me);
}

void Motorproxy_enable(MotorProxy *const me)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if(!me->motorData){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d010      	beq.n	8000b8e <Motorproxy_enable+0x32>
		return;
	}

	(*(volatile uint32_t *)(*me->motorAddr)) |= 1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4613      	mov	r3, r2
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]

	printf("%s, 0x%X\n\r",__func__,*me->motorAddr);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4904      	ldr	r1, [pc, #16]	@ (8000b98 <Motorproxy_enable+0x3c>)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <Motorproxy_enable+0x40>)
 8000b88:	f000 fd16 	bl	80015b8 <iprintf>
 8000b8c:	e000      	b.n	8000b90 <Motorproxy_enable+0x34>
		return;
 8000b8e:	bf00      	nop
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08002240 	.word	0x08002240
 8000b9c:	0800215c 	.word	0x0800215c

08000ba0 <MotorProxy_configure>:
	(*(volatile uint32_t *)(*me->motorAddr)) &= ~1;

}

void MotorProxy_configure(MotorProxy *const me, uint32_t length, volatile uint32_t *location, int32_t *MotorData)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
	me->rotaryArmLength = length;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	609a      	str	r2, [r3, #8]
	me->motorAddr = location;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	605a      	str	r2, [r3, #4]
	me->motorData = MotorData;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	601a      	str	r2, [r3, #0]

	printf("%s, 0x%X\n\r",__func__,*me->motorAddr);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4903      	ldr	r1, [pc, #12]	@ (8000bd8 <MotorProxy_configure+0x38>)
 8000bca:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <MotorProxy_configure+0x3c>)
 8000bcc:	f000 fcf4 	bl	80015b8 <iprintf>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	08002254 	.word	0x08002254
 8000bdc:	0800215c 	.word	0x0800215c

08000be0 <MotorProxy_accessMotorDirection>:

DirectionType MotorProxy_accessMotorDirection(MotorProxy *const me)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	MotorData mData;
	if(!me->motorData){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <MotorProxy_accessMotorDirection+0x14>
		return 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e00a      	b.n	8000c0a <MotorProxy_accessMotorDirection+0x2a>
	}
	mData = unmarshal((*(volatile uint32_t *)(*me->motorAddr)));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f91e 	bl	8000e44 <unmarshal>

	return mData.direction;
 8000c08:	7a7b      	ldrb	r3, [r7, #9]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <MotorProxy_accessMotorSpeed>:

uint32_t MotorProxy_accessMotorSpeed(MotorProxy *const me)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
	MotorData mData;
	if(!me->motorData){
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <MotorProxy_accessMotorSpeed+0x14>
		return 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e00a      	b.n	8000c3c <MotorProxy_accessMotorSpeed+0x2a>
	}
	mData = unmarshal((*(volatile uint32_t *)(*me->motorAddr)));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f905 	bl	8000e44 <unmarshal>

	return mData.speed;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <MotorProxy_accessMotorState>:

uint32_t MotorProxy_accessMotorState(MotorProxy *const me)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	MotorData mData;
	if(!me->motorData){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <MotorProxy_accessMotorState+0x14>
		return 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e00a      	b.n	8000c6e <MotorProxy_accessMotorState+0x2a>
	}
	mData = unmarshal((*(volatile uint32_t *)(*me->motorAddr)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f8ec 	bl	8000e44 <unmarshal>

	return mData.errorStatus;
 8000c6c:	7c3b      	ldrb	r3, [r7, #16]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MotorProxy_writeMotorSpeed>:

void MotorProxy_writeMotorSpeed(MotorProxy *const me, const DirectionType direction, uint32_t speed)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	@ 0x40
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	72fb      	strb	r3, [r7, #11]
	MotorData mData;
	double dpi,dArmLength,dSpeed,dAdjSpeed;

	dpi = 3.14159;
 8000c86:	a33b      	add	r3, pc, #236	@ (adr r3, 8000d74 <MotorProxy_writeMotorSpeed+0xfc>)
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	if(!me->motorData){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d063      	beq.n	8000d60 <MotorProxy_writeMotorSpeed+0xe8>
		return;
	}

	mData = unmarshal((*(volatile uint32_t *)(*me->motorAddr)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f8cc 	bl	8000e44 <unmarshal>
	mData.direction = direction;
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	747b      	strb	r3, [r7, #17]

	if(me->rotaryArmLength > 0){
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d03b      	beq.n	8000d30 <MotorProxy_writeMotorSpeed+0xb8>
		dSpeed = speed;
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fc3b 	bl	8000534 <__aeabi_ui2d>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		dArmLength = me->rotaryArmLength;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc32 	bl	8000534 <__aeabi_ui2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		dAdjSpeed = dSpeed/2.0/dpi/dArmLength*10.0;
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000ce4:	f7ff fdca 	bl	800087c <__aeabi_ddiv>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000cf4:	f7ff fdc2 	bl	800087c <__aeabi_ddiv>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000d04:	f7ff fdba 	bl	800087c <__aeabi_ddiv>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MotorProxy_writeMotorSpeed+0xf0>)
 8000d16:	f7ff fc87 	bl	8000628 <__aeabi_dmul>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		mData.speed = (int)dAdjSpeed;
 8000d22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d26:	f7ff fe91 	bl	8000a4c <__aeabi_d2iz>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e001      	b.n	8000d34 <MotorProxy_writeMotorSpeed+0xbc>
	}
	else{
		mData.speed = speed;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	617b      	str	r3, [r7, #20]
	}

	(*(volatile uint32_t *)(*me->motorAddr)) |= marshal(mData);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3a:	f000 f81f 	bl	8000d7c <marshal>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	460b      	mov	r3, r1
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
	printf("%s, 0x%X\n\r",__func__,*me->motorAddr);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4905      	ldr	r1, [pc, #20]	@ (8000d6c <MotorProxy_writeMotorSpeed+0xf4>)
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MotorProxy_writeMotorSpeed+0xf8>)
 8000d5a:	f000 fc2d 	bl	80015b8 <iprintf>

	return;
 8000d5e:	e000      	b.n	8000d62 <MotorProxy_writeMotorSpeed+0xea>
		return;
 8000d60:	bf00      	nop
}
 8000d62:	3740      	adds	r7, #64	@ 0x40
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40240000 	.word	0x40240000
 8000d6c:	0800226c 	.word	0x0800226c
 8000d70:	0800215c 	.word	0x0800215c
 8000d74:	f01b866e 	.word	0xf01b866e
 8000d78:	400921f9 	.word	0x400921f9

08000d7c <marshal>:

	(*(volatile uint32_t *)(*me->motorAddr)) &=~(1<<8);
}

static uint32_t marshal(const MotorData mData)
{
 8000d7c:	b490      	push	{r4, r7}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	463c      	mov	r4, r7
 8000d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t deviceCmd;
	deviceCmd=0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	if(mData.on_off){
 8000d8c:	783b      	ldrb	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <marshal+0x1e>
		deviceCmd |= 1;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
	}

	if(mData.direction == FORWARD){
 8000d9a:	787b      	ldrb	r3, [r7, #1]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d104      	bne.n	8000daa <marshal+0x2e>
		deviceCmd |= (2<<1);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e006      	b.n	8000db8 <marshal+0x3c>
	}
	else if(mData.direction == REVERSE){
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d103      	bne.n	8000db8 <marshal+0x3c>
		deviceCmd |= (1<<1);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
	}

	if(mData.speed < 32){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b1f      	cmp	r3, #31
 8000dbc:	d804      	bhi.n	8000dc8 <marshal+0x4c>
		deviceCmd |= (mData.speed<<3);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
	}

	if(mData.errorStatus){
 8000dc8:	7a3b      	ldrb	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <marshal+0x5a>
		deviceCmd |= (1<<8);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	617b      	str	r3, [r7, #20]
	}

	if(mData.noPowerError){
 8000dd6:	7a7b      	ldrb	r3, [r7, #9]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <marshal+0x68>
		deviceCmd |= (1<<9);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	617b      	str	r3, [r7, #20]
	}

	if(mData.noTorqueError){
 8000de4:	7abb      	ldrb	r3, [r7, #10]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <marshal+0x76>
		deviceCmd |= (1<<10);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df0:	617b      	str	r3, [r7, #20]
	}

	if(mData.BITError){
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <marshal+0x84>
		deviceCmd |= (1<<11);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dfe:	617b      	str	r3, [r7, #20]
	}

	if(mData.overTemperatureError){
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <marshal+0x92>
		deviceCmd |= (1<<12);
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e0c:	617b      	str	r3, [r7, #20]
	}

	if(mData.reservedError1){
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <marshal+0xa0>
		deviceCmd |= (1<<13);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e1a:	617b      	str	r3, [r7, #20]
	}

	if(mData.reservedError2){
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <marshal+0xae>
		deviceCmd |= (1<<14);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	617b      	str	r3, [r7, #20]
	}

	if(mData.unknownError){
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <marshal+0xbc>
		deviceCmd |= (1<<15);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e36:	617b      	str	r3, [r7, #20]
	}

	return deviceCmd;
 8000e38:	697b      	ldr	r3, [r7, #20]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc90      	pop	{r4, r7}
 8000e42:	4770      	bx	lr

08000e44 <unmarshal>:

static MotorData unmarshal(uint32_t encodedMData)
{
 8000e44:	b490      	push	{r4, r7}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	MotorData mData;
	int temp;

	mData.on_off = encodedMData & 1;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	733b      	strb	r3, [r7, #12]
	temp = (encodedMData & (3<<1))>>1;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	61fb      	str	r3, [r7, #28]
	if(temp == 1){
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d102      	bne.n	8000e70 <unmarshal+0x2c>
		mData.direction = REVERSE;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	737b      	strb	r3, [r7, #13]
 8000e6e:	e007      	b.n	8000e80 <unmarshal+0x3c>
	}
	else if(temp == 2){
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d102      	bne.n	8000e7c <unmarshal+0x38>
		mData.direction = FORWARD;
 8000e76:	2301      	movs	r3, #1
 8000e78:	737b      	strb	r3, [r7, #13]
 8000e7a:	e001      	b.n	8000e80 <unmarshal+0x3c>
	}
	else
		mData.direction = NO_DIRECTION;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	737b      	strb	r3, [r7, #13]

	mData.speed = encodedMData &(31<<3);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000e86:	613b      	str	r3, [r7, #16]
	mData.errorStatus = encodedMData & (1<<8);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	753b      	strb	r3, [r7, #20]
	mData.noPowerError = encodedMData & (1<<9);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	757b      	strb	r3, [r7, #21]
	mData.noTorqueError = encodedMData & (1<<10);
 8000e90:	2300      	movs	r3, #0
 8000e92:	75bb      	strb	r3, [r7, #22]
	mData.BITError = encodedMData & (1<<11);
 8000e94:	2300      	movs	r3, #0
 8000e96:	75fb      	strb	r3, [r7, #23]
	mData.overTemperatureError = encodedMData &(1<<12);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	763b      	strb	r3, [r7, #24]
	mData.reservedError1 = encodedMData & (1<<13);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	767b      	strb	r3, [r7, #25]
	mData.reservedError2 = encodedMData & (1<<14);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	76bb      	strb	r3, [r7, #26]
	mData.unknownError = encodedMData & (1<<15);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	76fb      	strb	r3, [r7, #27]

	return mData;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	461c      	mov	r4, r3
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc90      	pop	{r4, r7}
 8000ebe:	4770      	bx	lr

08000ec0 <Motor_Dashboard>:
#include "stm32f4xx.h"
#include "uart.h"
#include "MotorProxy.h"

//Client 1: Motor_Dashboard
void Motor_Dashboard(MotorProxy* motor){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

	uint32_t getSpeed = MotorProxy_accessMotorSpeed(motor);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fea2 	bl	8000c12 <MotorProxy_accessMotorSpeed>
 8000ece:	6178      	str	r0, [r7, #20]
	uint32_t getState = MotorProxy_accessMotorState(motor);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff feb7 	bl	8000c44 <MotorProxy_accessMotorState>
 8000ed6:	6138      	str	r0, [r7, #16]
	DirectionType getDirection = MotorProxy_accessMotorDirection(motor);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fe81 	bl	8000be0 <MotorProxy_accessMotorDirection>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]

	printf("******************DashBoard******************\n\r");
 8000ee2:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <Motor_Dashboard+0x50>)
 8000ee4:	f000 fb68 	bl	80015b8 <iprintf>
	printf("Motor name : %s\n\r",motor->name);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4809      	ldr	r0, [pc, #36]	@ (8000f14 <Motor_Dashboard+0x54>)
 8000ef0:	f000 fb62 	bl	80015b8 <iprintf>
	printf("Motor current direction : %d, speed : %d, state : %d\n\r", getDirection,getSpeed,getState);
 8000ef4:	7bf9      	ldrb	r1, [r7, #15]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <Motor_Dashboard+0x58>)
 8000efc:	f000 fb5c 	bl	80015b8 <iprintf>
	printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\r");
 8000f00:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <Motor_Dashboard+0x5c>)
 8000f02:	f000 fb59 	bl	80015b8 <iprintf>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08002168 	.word	0x08002168
 8000f14:	08002198 	.word	0x08002198
 8000f18:	080021ac 	.word	0x080021ac
 8000f1c:	080021e4 	.word	0x080021e4

08000f20 <Motor_Controller>:

//Client 2: Motor_Controller
void Motor_Controller(MotorData *motor, DirectionType direction, uint32_t speed){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	72fb      	strb	r3, [r7, #11]
	MotorProxy_writeMotorSpeed(motor, direction, speed);
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4619      	mov	r1, r3
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff fe9f 	bl	8000c78 <MotorProxy_writeMotorSpeed>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <main>:

int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0


	debug_uart_init();
 8000f4a:	f000 f909 	bl	8001160 <debug_uart_init>

	RCC->AHB1ENR |= (1U<<1);
 8000f4e:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <main+0xa8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <main+0xa8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (1U<<2);
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <main+0xa8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <main+0xa8>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30

	MotorProxy *motor1;
	MotorProxy *motor2;

	const char* motor1_name = "Base";
 8000f66:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <main+0xac>)
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
	motor1 = MotorProxy_Create(motor1_name);
 8000f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f6c:	f7ff fde1 	bl	8000b32 <MotorProxy_Create>
 8000f70:	6238      	str	r0, [r7, #32]
	volatile uint32_t motor1_location = 0x40020414U; // GPIOB->ODR
 8000f72:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <main+0xb0>)
 8000f74:	60bb      	str	r3, [r7, #8]
	uint32_t motor1_data = 100;
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	607b      	str	r3, [r7, #4]
	uint32_t motor1_armlength = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61fb      	str	r3, [r7, #28]

	const char* motor2_name = "Shoulder";
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <main+0xb4>)
 8000f80:	61bb      	str	r3, [r7, #24]
	motor2 = MotorProxy_Create(motor2_name);
 8000f82:	69b8      	ldr	r0, [r7, #24]
 8000f84:	f7ff fdd5 	bl	8000b32 <MotorProxy_Create>
 8000f88:	6178      	str	r0, [r7, #20]
	volatile uint32_t motor2_location = 0x40020814U; // GPIOC->ODR
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <main+0xb8>)
 8000f8c:	603b      	str	r3, [r7, #0]
	uint32_t motor2_data = 100;
 8000f8e:	2364      	movs	r3, #100	@ 0x64
 8000f90:	613b      	str	r3, [r7, #16]
	uint32_t motor2_armlength = 15;
 8000f92:	230f      	movs	r3, #15
 8000f94:	60fb      	str	r3, [r7, #12]

	MotorProxy_configure(motor1, motor1_armlength, &motor1_location, &motor1_data);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	69f9      	ldr	r1, [r7, #28]
 8000f9e:	6a38      	ldr	r0, [r7, #32]
 8000fa0:	f7ff fdfe 	bl	8000ba0 <MotorProxy_configure>
	MotorProxy_Initialize(motor1);
 8000fa4:	6a38      	ldr	r0, [r7, #32]
 8000fa6:	f7ff fd79 	bl	8000a9c <MotorProxy_Initialize>
	Motorproxy_enable(motor1);
 8000faa:	6a38      	ldr	r0, [r7, #32]
 8000fac:	f7ff fdd6 	bl	8000b5c <Motorproxy_enable>

	MotorProxy_configure(motor2, motor2_armlength, &motor2_location, &motor1_data);
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	463a      	mov	r2, r7
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff fdf2 	bl	8000ba0 <MotorProxy_configure>
	MotorProxy_Initialize(motor2);
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff fd6d 	bl	8000a9c <MotorProxy_Initialize>
	Motorproxy_enable(motor2);
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff fdca 	bl	8000b5c <Motorproxy_enable>

	Motor_Controller(motor1, FORWARD, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2101      	movs	r1, #1
 8000fcc:	6a38      	ldr	r0, [r7, #32]
 8000fce:	f7ff ffa7 	bl	8000f20 <Motor_Controller>
	Motor_Controller(motor2, FORWARD, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ffa2 	bl	8000f20 <Motor_Controller>

	Motor_Dashboard(motor1);
 8000fdc:	6a38      	ldr	r0, [r7, #32]
 8000fde:	f7ff ff6f 	bl	8000ec0 <Motor_Dashboard>
	Motor_Dashboard(motor2);
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff6c 	bl	8000ec0 <Motor_Dashboard>

    while(1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <main+0xa4>
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	08002214 	.word	0x08002214
 8000ff4:	40020414 	.word	0x40020414
 8000ff8:	0800221c 	.word	0x0800221c
 8000ffc:	40020814 	.word	0x40020814

08001000 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e00a      	b.n	8001028 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001012:	f3af 8000 	nop.w
 8001016:	4601      	mov	r1, r0
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60ba      	str	r2, [r7, #8]
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf0      	blt.n	8001012 <_read+0x12>
  }

  return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e009      	b.n	8001060 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f877 	bl	8001148 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf1      	blt.n	800104c <_write+0x12>
  }
  return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_close>:

int _close(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800109a:	605a      	str	r2, [r3, #4]
  return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_isatty>:

int _isatty(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f000 fb08 	bl	8001720 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	20000078 	.word	0x20000078
 8001144:	200001c8 	.word	0x200001c8

08001148 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f84f 	bl	80011f4 <uart_write>
	return ch;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <debug_uart_init>:

void debug_uart_init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001164:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <debug_uart_init+0x84>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <debug_uart_init+0x84>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <debug_uart_init+0x88>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <debug_uart_init+0x88>)
 8001176:	f023 0310 	bic.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <debug_uart_init+0x88>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	@ (80011e8 <debug_uart_init+0x88>)
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <debug_uart_init+0x88>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <debug_uart_init+0x88>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001192:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <debug_uart_init+0x88>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <debug_uart_init+0x88>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <debug_uart_init+0x88>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <debug_uart_init+0x88>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <debug_uart_init+0x88>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <debug_uart_init+0x88>)
 80011b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80011b6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <debug_uart_init+0x84>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <debug_uart_init+0x84>)
 80011be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 80011c4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80011c8:	4808      	ldr	r0, [pc, #32]	@ (80011ec <debug_uart_init+0x8c>)
 80011ca:	f000 f83f 	bl	800124c <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <debug_uart_init+0x90>)
 80011d0:	2208      	movs	r2, #8
 80011d2:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <debug_uart_init+0x90>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <debug_uart_init+0x90>)
 80011da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	00f42400 	.word	0x00f42400
 80011f0:	40004400 	.word	0x40004400

080011f4 <uart_write>:

static void uart_write(int ch)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 80011fc:	bf00      	nop
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <uart_write+0x2c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f9      	beq.n	80011fe <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <uart_write+0x2c>)
 800120e:	b2db      	uxtb	r3, r3
 8001210:	6053      	str	r3, [r2, #4]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400

08001224 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	085a      	lsrs	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	441a      	add	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffe3 	bl	8001224 <compute_uart_bd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <uart_set_baudrate+0x24>)
 8001264:	609a      	str	r2, [r3, #8]
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40004400 	.word	0x40004400

08001274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	@ (80012b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	@ (80012c0 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012a2:	f000 fa43 	bl	800172c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a6:	f7ff fe4d 	bl	8000f44 <main>

080012aa <LoopForever>:

LoopForever:
  b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   r0, =_estack
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012b8:	080022cc 	.word	0x080022cc
  ldr r2, =_sbss
 80012bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012c0:	200001c8 	.word	0x200001c8

080012c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <malloc>:
 80012c8:	4b02      	ldr	r3, [pc, #8]	@ (80012d4 <malloc+0xc>)
 80012ca:	4601      	mov	r1, r0
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f000 b825 	b.w	800131c <_malloc_r>
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c

080012d8 <sbrk_aligned>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	4e0f      	ldr	r6, [pc, #60]	@ (8001318 <sbrk_aligned+0x40>)
 80012dc:	460c      	mov	r4, r1
 80012de:	6831      	ldr	r1, [r6, #0]
 80012e0:	4605      	mov	r5, r0
 80012e2:	b911      	cbnz	r1, 80012ea <sbrk_aligned+0x12>
 80012e4:	f000 f9fa 	bl	80016dc <_sbrk_r>
 80012e8:	6030      	str	r0, [r6, #0]
 80012ea:	4621      	mov	r1, r4
 80012ec:	4628      	mov	r0, r5
 80012ee:	f000 f9f5 	bl	80016dc <_sbrk_r>
 80012f2:	1c43      	adds	r3, r0, #1
 80012f4:	d103      	bne.n	80012fe <sbrk_aligned+0x26>
 80012f6:	f04f 34ff 	mov.w	r4, #4294967295
 80012fa:	4620      	mov	r0, r4
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
 80012fe:	1cc4      	adds	r4, r0, #3
 8001300:	f024 0403 	bic.w	r4, r4, #3
 8001304:	42a0      	cmp	r0, r4
 8001306:	d0f8      	beq.n	80012fa <sbrk_aligned+0x22>
 8001308:	1a21      	subs	r1, r4, r0
 800130a:	4628      	mov	r0, r5
 800130c:	f000 f9e6 	bl	80016dc <_sbrk_r>
 8001310:	3001      	adds	r0, #1
 8001312:	d1f2      	bne.n	80012fa <sbrk_aligned+0x22>
 8001314:	e7ef      	b.n	80012f6 <sbrk_aligned+0x1e>
 8001316:	bf00      	nop
 8001318:	2000007c 	.word	0x2000007c

0800131c <_malloc_r>:
 800131c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001320:	1ccd      	adds	r5, r1, #3
 8001322:	f025 0503 	bic.w	r5, r5, #3
 8001326:	3508      	adds	r5, #8
 8001328:	2d0c      	cmp	r5, #12
 800132a:	bf38      	it	cc
 800132c:	250c      	movcc	r5, #12
 800132e:	2d00      	cmp	r5, #0
 8001330:	4606      	mov	r6, r0
 8001332:	db01      	blt.n	8001338 <_malloc_r+0x1c>
 8001334:	42a9      	cmp	r1, r5
 8001336:	d904      	bls.n	8001342 <_malloc_r+0x26>
 8001338:	230c      	movs	r3, #12
 800133a:	6033      	str	r3, [r6, #0]
 800133c:	2000      	movs	r0, #0
 800133e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001418 <_malloc_r+0xfc>
 8001346:	f000 f869 	bl	800141c <__malloc_lock>
 800134a:	f8d8 3000 	ldr.w	r3, [r8]
 800134e:	461c      	mov	r4, r3
 8001350:	bb44      	cbnz	r4, 80013a4 <_malloc_r+0x88>
 8001352:	4629      	mov	r1, r5
 8001354:	4630      	mov	r0, r6
 8001356:	f7ff ffbf 	bl	80012d8 <sbrk_aligned>
 800135a:	1c43      	adds	r3, r0, #1
 800135c:	4604      	mov	r4, r0
 800135e:	d158      	bne.n	8001412 <_malloc_r+0xf6>
 8001360:	f8d8 4000 	ldr.w	r4, [r8]
 8001364:	4627      	mov	r7, r4
 8001366:	2f00      	cmp	r7, #0
 8001368:	d143      	bne.n	80013f2 <_malloc_r+0xd6>
 800136a:	2c00      	cmp	r4, #0
 800136c:	d04b      	beq.n	8001406 <_malloc_r+0xea>
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	4639      	mov	r1, r7
 8001372:	4630      	mov	r0, r6
 8001374:	eb04 0903 	add.w	r9, r4, r3
 8001378:	f000 f9b0 	bl	80016dc <_sbrk_r>
 800137c:	4581      	cmp	r9, r0
 800137e:	d142      	bne.n	8001406 <_malloc_r+0xea>
 8001380:	6821      	ldr	r1, [r4, #0]
 8001382:	1a6d      	subs	r5, r5, r1
 8001384:	4629      	mov	r1, r5
 8001386:	4630      	mov	r0, r6
 8001388:	f7ff ffa6 	bl	80012d8 <sbrk_aligned>
 800138c:	3001      	adds	r0, #1
 800138e:	d03a      	beq.n	8001406 <_malloc_r+0xea>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	442b      	add	r3, r5
 8001394:	6023      	str	r3, [r4, #0]
 8001396:	f8d8 3000 	ldr.w	r3, [r8]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	bb62      	cbnz	r2, 80013f8 <_malloc_r+0xdc>
 800139e:	f8c8 7000 	str.w	r7, [r8]
 80013a2:	e00f      	b.n	80013c4 <_malloc_r+0xa8>
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	1b52      	subs	r2, r2, r5
 80013a8:	d420      	bmi.n	80013ec <_malloc_r+0xd0>
 80013aa:	2a0b      	cmp	r2, #11
 80013ac:	d917      	bls.n	80013de <_malloc_r+0xc2>
 80013ae:	1961      	adds	r1, r4, r5
 80013b0:	42a3      	cmp	r3, r4
 80013b2:	6025      	str	r5, [r4, #0]
 80013b4:	bf18      	it	ne
 80013b6:	6059      	strne	r1, [r3, #4]
 80013b8:	6863      	ldr	r3, [r4, #4]
 80013ba:	bf08      	it	eq
 80013bc:	f8c8 1000 	streq.w	r1, [r8]
 80013c0:	5162      	str	r2, [r4, r5]
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	4630      	mov	r0, r6
 80013c6:	f000 f82f 	bl	8001428 <__malloc_unlock>
 80013ca:	f104 000b 	add.w	r0, r4, #11
 80013ce:	1d23      	adds	r3, r4, #4
 80013d0:	f020 0007 	bic.w	r0, r0, #7
 80013d4:	1ac2      	subs	r2, r0, r3
 80013d6:	bf1c      	itt	ne
 80013d8:	1a1b      	subne	r3, r3, r0
 80013da:	50a3      	strne	r3, [r4, r2]
 80013dc:	e7af      	b.n	800133e <_malloc_r+0x22>
 80013de:	6862      	ldr	r2, [r4, #4]
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	bf0c      	ite	eq
 80013e4:	f8c8 2000 	streq.w	r2, [r8]
 80013e8:	605a      	strne	r2, [r3, #4]
 80013ea:	e7eb      	b.n	80013c4 <_malloc_r+0xa8>
 80013ec:	4623      	mov	r3, r4
 80013ee:	6864      	ldr	r4, [r4, #4]
 80013f0:	e7ae      	b.n	8001350 <_malloc_r+0x34>
 80013f2:	463c      	mov	r4, r7
 80013f4:	687f      	ldr	r7, [r7, #4]
 80013f6:	e7b6      	b.n	8001366 <_malloc_r+0x4a>
 80013f8:	461a      	mov	r2, r3
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	42a3      	cmp	r3, r4
 80013fe:	d1fb      	bne.n	80013f8 <_malloc_r+0xdc>
 8001400:	2300      	movs	r3, #0
 8001402:	6053      	str	r3, [r2, #4]
 8001404:	e7de      	b.n	80013c4 <_malloc_r+0xa8>
 8001406:	230c      	movs	r3, #12
 8001408:	6033      	str	r3, [r6, #0]
 800140a:	4630      	mov	r0, r6
 800140c:	f000 f80c 	bl	8001428 <__malloc_unlock>
 8001410:	e794      	b.n	800133c <_malloc_r+0x20>
 8001412:	6005      	str	r5, [r0, #0]
 8001414:	e7d6      	b.n	80013c4 <_malloc_r+0xa8>
 8001416:	bf00      	nop
 8001418:	20000080 	.word	0x20000080

0800141c <__malloc_lock>:
 800141c:	4801      	ldr	r0, [pc, #4]	@ (8001424 <__malloc_lock+0x8>)
 800141e:	f000 b9aa 	b.w	8001776 <__retarget_lock_acquire_recursive>
 8001422:	bf00      	nop
 8001424:	200001c4 	.word	0x200001c4

08001428 <__malloc_unlock>:
 8001428:	4801      	ldr	r0, [pc, #4]	@ (8001430 <__malloc_unlock+0x8>)
 800142a:	f000 b9a5 	b.w	8001778 <__retarget_lock_release_recursive>
 800142e:	bf00      	nop
 8001430:	200001c4 	.word	0x200001c4

08001434 <std>:
 8001434:	2300      	movs	r3, #0
 8001436:	b510      	push	{r4, lr}
 8001438:	4604      	mov	r4, r0
 800143a:	e9c0 3300 	strd	r3, r3, [r0]
 800143e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001442:	6083      	str	r3, [r0, #8]
 8001444:	8181      	strh	r1, [r0, #12]
 8001446:	6643      	str	r3, [r0, #100]	@ 0x64
 8001448:	81c2      	strh	r2, [r0, #14]
 800144a:	6183      	str	r3, [r0, #24]
 800144c:	4619      	mov	r1, r3
 800144e:	2208      	movs	r2, #8
 8001450:	305c      	adds	r0, #92	@ 0x5c
 8001452:	f000 f906 	bl	8001662 <memset>
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <std+0x58>)
 8001458:	6263      	str	r3, [r4, #36]	@ 0x24
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <std+0x5c>)
 800145c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <std+0x60>)
 8001460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <std+0x64>)
 8001464:	6323      	str	r3, [r4, #48]	@ 0x30
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <std+0x68>)
 8001468:	6224      	str	r4, [r4, #32]
 800146a:	429c      	cmp	r4, r3
 800146c:	d006      	beq.n	800147c <std+0x48>
 800146e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001472:	4294      	cmp	r4, r2
 8001474:	d002      	beq.n	800147c <std+0x48>
 8001476:	33d0      	adds	r3, #208	@ 0xd0
 8001478:	429c      	cmp	r4, r3
 800147a:	d105      	bne.n	8001488 <std+0x54>
 800147c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001484:	f000 b976 	b.w	8001774 <__retarget_lock_init_recursive>
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	080015dd 	.word	0x080015dd
 8001490:	080015ff 	.word	0x080015ff
 8001494:	08001637 	.word	0x08001637
 8001498:	0800165b 	.word	0x0800165b
 800149c:	20000084 	.word	0x20000084

080014a0 <stdio_exit_handler>:
 80014a0:	4a02      	ldr	r2, [pc, #8]	@ (80014ac <stdio_exit_handler+0xc>)
 80014a2:	4903      	ldr	r1, [pc, #12]	@ (80014b0 <stdio_exit_handler+0x10>)
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <stdio_exit_handler+0x14>)
 80014a6:	f000 b869 	b.w	800157c <_fwalk_sglue>
 80014aa:	bf00      	nop
 80014ac:	20000000 	.word	0x20000000
 80014b0:	08001eb9 	.word	0x08001eb9
 80014b4:	20000010 	.word	0x20000010

080014b8 <cleanup_stdio>:
 80014b8:	6841      	ldr	r1, [r0, #4]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <cleanup_stdio+0x34>)
 80014bc:	4299      	cmp	r1, r3
 80014be:	b510      	push	{r4, lr}
 80014c0:	4604      	mov	r4, r0
 80014c2:	d001      	beq.n	80014c8 <cleanup_stdio+0x10>
 80014c4:	f000 fcf8 	bl	8001eb8 <_fflush_r>
 80014c8:	68a1      	ldr	r1, [r4, #8]
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <cleanup_stdio+0x38>)
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d002      	beq.n	80014d6 <cleanup_stdio+0x1e>
 80014d0:	4620      	mov	r0, r4
 80014d2:	f000 fcf1 	bl	8001eb8 <_fflush_r>
 80014d6:	68e1      	ldr	r1, [r4, #12]
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <cleanup_stdio+0x3c>)
 80014da:	4299      	cmp	r1, r3
 80014dc:	d004      	beq.n	80014e8 <cleanup_stdio+0x30>
 80014de:	4620      	mov	r0, r4
 80014e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014e4:	f000 bce8 	b.w	8001eb8 <_fflush_r>
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop
 80014ec:	20000084 	.word	0x20000084
 80014f0:	200000ec 	.word	0x200000ec
 80014f4:	20000154 	.word	0x20000154

080014f8 <global_stdio_init.part.0>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <global_stdio_init.part.0+0x30>)
 80014fc:	4c0b      	ldr	r4, [pc, #44]	@ (800152c <global_stdio_init.part.0+0x34>)
 80014fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <global_stdio_init.part.0+0x38>)
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	4620      	mov	r0, r4
 8001504:	2200      	movs	r2, #0
 8001506:	2104      	movs	r1, #4
 8001508:	f7ff ff94 	bl	8001434 <std>
 800150c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001510:	2201      	movs	r2, #1
 8001512:	2109      	movs	r1, #9
 8001514:	f7ff ff8e 	bl	8001434 <std>
 8001518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800151c:	2202      	movs	r2, #2
 800151e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001522:	2112      	movs	r1, #18
 8001524:	f7ff bf86 	b.w	8001434 <std>
 8001528:	200001bc 	.word	0x200001bc
 800152c:	20000084 	.word	0x20000084
 8001530:	080014a1 	.word	0x080014a1

08001534 <__sfp_lock_acquire>:
 8001534:	4801      	ldr	r0, [pc, #4]	@ (800153c <__sfp_lock_acquire+0x8>)
 8001536:	f000 b91e 	b.w	8001776 <__retarget_lock_acquire_recursive>
 800153a:	bf00      	nop
 800153c:	200001c5 	.word	0x200001c5

08001540 <__sfp_lock_release>:
 8001540:	4801      	ldr	r0, [pc, #4]	@ (8001548 <__sfp_lock_release+0x8>)
 8001542:	f000 b919 	b.w	8001778 <__retarget_lock_release_recursive>
 8001546:	bf00      	nop
 8001548:	200001c5 	.word	0x200001c5

0800154c <__sinit>:
 800154c:	b510      	push	{r4, lr}
 800154e:	4604      	mov	r4, r0
 8001550:	f7ff fff0 	bl	8001534 <__sfp_lock_acquire>
 8001554:	6a23      	ldr	r3, [r4, #32]
 8001556:	b11b      	cbz	r3, 8001560 <__sinit+0x14>
 8001558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800155c:	f7ff bff0 	b.w	8001540 <__sfp_lock_release>
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <__sinit+0x28>)
 8001562:	6223      	str	r3, [r4, #32]
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <__sinit+0x2c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f5      	bne.n	8001558 <__sinit+0xc>
 800156c:	f7ff ffc4 	bl	80014f8 <global_stdio_init.part.0>
 8001570:	e7f2      	b.n	8001558 <__sinit+0xc>
 8001572:	bf00      	nop
 8001574:	080014b9 	.word	0x080014b9
 8001578:	200001bc 	.word	0x200001bc

0800157c <_fwalk_sglue>:
 800157c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001580:	4607      	mov	r7, r0
 8001582:	4688      	mov	r8, r1
 8001584:	4614      	mov	r4, r2
 8001586:	2600      	movs	r6, #0
 8001588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800158c:	f1b9 0901 	subs.w	r9, r9, #1
 8001590:	d505      	bpl.n	800159e <_fwalk_sglue+0x22>
 8001592:	6824      	ldr	r4, [r4, #0]
 8001594:	2c00      	cmp	r4, #0
 8001596:	d1f7      	bne.n	8001588 <_fwalk_sglue+0xc>
 8001598:	4630      	mov	r0, r6
 800159a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800159e:	89ab      	ldrh	r3, [r5, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d907      	bls.n	80015b4 <_fwalk_sglue+0x38>
 80015a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	d003      	beq.n	80015b4 <_fwalk_sglue+0x38>
 80015ac:	4629      	mov	r1, r5
 80015ae:	4638      	mov	r0, r7
 80015b0:	47c0      	blx	r8
 80015b2:	4306      	orrs	r6, r0
 80015b4:	3568      	adds	r5, #104	@ 0x68
 80015b6:	e7e9      	b.n	800158c <_fwalk_sglue+0x10>

080015b8 <iprintf>:
 80015b8:	b40f      	push	{r0, r1, r2, r3}
 80015ba:	b507      	push	{r0, r1, r2, lr}
 80015bc:	4906      	ldr	r1, [pc, #24]	@ (80015d8 <iprintf+0x20>)
 80015be:	ab04      	add	r3, sp, #16
 80015c0:	6808      	ldr	r0, [r1, #0]
 80015c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80015c6:	6881      	ldr	r1, [r0, #8]
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f000 f94b 	bl	8001864 <_vfiprintf_r>
 80015ce:	b003      	add	sp, #12
 80015d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80015d4:	b004      	add	sp, #16
 80015d6:	4770      	bx	lr
 80015d8:	2000000c 	.word	0x2000000c

080015dc <__sread>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	460c      	mov	r4, r1
 80015e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e4:	f000 f868 	bl	80016b8 <_read_r>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	bfab      	itete	ge
 80015ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80015ee:	89a3      	ldrhlt	r3, [r4, #12]
 80015f0:	181b      	addge	r3, r3, r0
 80015f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80015f6:	bfac      	ite	ge
 80015f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80015fa:	81a3      	strhlt	r3, [r4, #12]
 80015fc:	bd10      	pop	{r4, pc}

080015fe <__swrite>:
 80015fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	461f      	mov	r7, r3
 8001604:	898b      	ldrh	r3, [r1, #12]
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	4605      	mov	r5, r0
 800160a:	460c      	mov	r4, r1
 800160c:	4616      	mov	r6, r2
 800160e:	d505      	bpl.n	800161c <__swrite+0x1e>
 8001610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001614:	2302      	movs	r3, #2
 8001616:	2200      	movs	r2, #0
 8001618:	f000 f83c 	bl	8001694 <_lseek_r>
 800161c:	89a3      	ldrh	r3, [r4, #12]
 800161e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001626:	81a3      	strh	r3, [r4, #12]
 8001628:	4632      	mov	r2, r6
 800162a:	463b      	mov	r3, r7
 800162c:	4628      	mov	r0, r5
 800162e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001632:	f000 b863 	b.w	80016fc <_write_r>

08001636 <__sseek>:
 8001636:	b510      	push	{r4, lr}
 8001638:	460c      	mov	r4, r1
 800163a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800163e:	f000 f829 	bl	8001694 <_lseek_r>
 8001642:	1c43      	adds	r3, r0, #1
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	bf15      	itete	ne
 8001648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800164a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800164e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001652:	81a3      	strheq	r3, [r4, #12]
 8001654:	bf18      	it	ne
 8001656:	81a3      	strhne	r3, [r4, #12]
 8001658:	bd10      	pop	{r4, pc}

0800165a <__sclose>:
 800165a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800165e:	f000 b809 	b.w	8001674 <_close_r>

08001662 <memset>:
 8001662:	4402      	add	r2, r0
 8001664:	4603      	mov	r3, r0
 8001666:	4293      	cmp	r3, r2
 8001668:	d100      	bne.n	800166c <memset+0xa>
 800166a:	4770      	bx	lr
 800166c:	f803 1b01 	strb.w	r1, [r3], #1
 8001670:	e7f9      	b.n	8001666 <memset+0x4>
	...

08001674 <_close_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	4d06      	ldr	r5, [pc, #24]	@ (8001690 <_close_r+0x1c>)
 8001678:	2300      	movs	r3, #0
 800167a:	4604      	mov	r4, r0
 800167c:	4608      	mov	r0, r1
 800167e:	602b      	str	r3, [r5, #0]
 8001680:	f7ff fcf7 	bl	8001072 <_close>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	d102      	bne.n	800168e <_close_r+0x1a>
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	b103      	cbz	r3, 800168e <_close_r+0x1a>
 800168c:	6023      	str	r3, [r4, #0]
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	200001c0 	.word	0x200001c0

08001694 <_lseek_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d07      	ldr	r5, [pc, #28]	@ (80016b4 <_lseek_r+0x20>)
 8001698:	4604      	mov	r4, r0
 800169a:	4608      	mov	r0, r1
 800169c:	4611      	mov	r1, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	602a      	str	r2, [r5, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f7ff fd0c 	bl	80010c0 <_lseek>
 80016a8:	1c43      	adds	r3, r0, #1
 80016aa:	d102      	bne.n	80016b2 <_lseek_r+0x1e>
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	b103      	cbz	r3, 80016b2 <_lseek_r+0x1e>
 80016b0:	6023      	str	r3, [r4, #0]
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
 80016b4:	200001c0 	.word	0x200001c0

080016b8 <_read_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d07      	ldr	r5, [pc, #28]	@ (80016d8 <_read_r+0x20>)
 80016bc:	4604      	mov	r4, r0
 80016be:	4608      	mov	r0, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	602a      	str	r2, [r5, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f7ff fc9a 	bl	8001000 <_read>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_read_r+0x1e>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_read_r+0x1e>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	200001c0 	.word	0x200001c0

080016dc <_sbrk_r>:
 80016dc:	b538      	push	{r3, r4, r5, lr}
 80016de:	4d06      	ldr	r5, [pc, #24]	@ (80016f8 <_sbrk_r+0x1c>)
 80016e0:	2300      	movs	r3, #0
 80016e2:	4604      	mov	r4, r0
 80016e4:	4608      	mov	r0, r1
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	f7ff fcf8 	bl	80010dc <_sbrk>
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	d102      	bne.n	80016f6 <_sbrk_r+0x1a>
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	b103      	cbz	r3, 80016f6 <_sbrk_r+0x1a>
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	200001c0 	.word	0x200001c0

080016fc <_write_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4d07      	ldr	r5, [pc, #28]	@ (800171c <_write_r+0x20>)
 8001700:	4604      	mov	r4, r0
 8001702:	4608      	mov	r0, r1
 8001704:	4611      	mov	r1, r2
 8001706:	2200      	movs	r2, #0
 8001708:	602a      	str	r2, [r5, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	f7ff fc95 	bl	800103a <_write>
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	d102      	bne.n	800171a <_write_r+0x1e>
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	b103      	cbz	r3, 800171a <_write_r+0x1e>
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	bd38      	pop	{r3, r4, r5, pc}
 800171c:	200001c0 	.word	0x200001c0

08001720 <__errno>:
 8001720:	4b01      	ldr	r3, [pc, #4]	@ (8001728 <__errno+0x8>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000000c 	.word	0x2000000c

0800172c <__libc_init_array>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	4d0d      	ldr	r5, [pc, #52]	@ (8001764 <__libc_init_array+0x38>)
 8001730:	4c0d      	ldr	r4, [pc, #52]	@ (8001768 <__libc_init_array+0x3c>)
 8001732:	1b64      	subs	r4, r4, r5
 8001734:	10a4      	asrs	r4, r4, #2
 8001736:	2600      	movs	r6, #0
 8001738:	42a6      	cmp	r6, r4
 800173a:	d109      	bne.n	8001750 <__libc_init_array+0x24>
 800173c:	4d0b      	ldr	r5, [pc, #44]	@ (800176c <__libc_init_array+0x40>)
 800173e:	4c0c      	ldr	r4, [pc, #48]	@ (8001770 <__libc_init_array+0x44>)
 8001740:	f000 fcfa 	bl	8002138 <_init>
 8001744:	1b64      	subs	r4, r4, r5
 8001746:	10a4      	asrs	r4, r4, #2
 8001748:	2600      	movs	r6, #0
 800174a:	42a6      	cmp	r6, r4
 800174c:	d105      	bne.n	800175a <__libc_init_array+0x2e>
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	f855 3b04 	ldr.w	r3, [r5], #4
 8001754:	4798      	blx	r3
 8001756:	3601      	adds	r6, #1
 8001758:	e7ee      	b.n	8001738 <__libc_init_array+0xc>
 800175a:	f855 3b04 	ldr.w	r3, [r5], #4
 800175e:	4798      	blx	r3
 8001760:	3601      	adds	r6, #1
 8001762:	e7f2      	b.n	800174a <__libc_init_array+0x1e>
 8001764:	080022c4 	.word	0x080022c4
 8001768:	080022c4 	.word	0x080022c4
 800176c:	080022c4 	.word	0x080022c4
 8001770:	080022c8 	.word	0x080022c8

08001774 <__retarget_lock_init_recursive>:
 8001774:	4770      	bx	lr

08001776 <__retarget_lock_acquire_recursive>:
 8001776:	4770      	bx	lr

08001778 <__retarget_lock_release_recursive>:
 8001778:	4770      	bx	lr
	...

0800177c <_free_r>:
 800177c:	b538      	push	{r3, r4, r5, lr}
 800177e:	4605      	mov	r5, r0
 8001780:	2900      	cmp	r1, #0
 8001782:	d041      	beq.n	8001808 <_free_r+0x8c>
 8001784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001788:	1f0c      	subs	r4, r1, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	bfb8      	it	lt
 800178e:	18e4      	addlt	r4, r4, r3
 8001790:	f7ff fe44 	bl	800141c <__malloc_lock>
 8001794:	4a1d      	ldr	r2, [pc, #116]	@ (800180c <_free_r+0x90>)
 8001796:	6813      	ldr	r3, [r2, #0]
 8001798:	b933      	cbnz	r3, 80017a8 <_free_r+0x2c>
 800179a:	6063      	str	r3, [r4, #4]
 800179c:	6014      	str	r4, [r2, #0]
 800179e:	4628      	mov	r0, r5
 80017a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017a4:	f7ff be40 	b.w	8001428 <__malloc_unlock>
 80017a8:	42a3      	cmp	r3, r4
 80017aa:	d908      	bls.n	80017be <_free_r+0x42>
 80017ac:	6820      	ldr	r0, [r4, #0]
 80017ae:	1821      	adds	r1, r4, r0
 80017b0:	428b      	cmp	r3, r1
 80017b2:	bf01      	itttt	eq
 80017b4:	6819      	ldreq	r1, [r3, #0]
 80017b6:	685b      	ldreq	r3, [r3, #4]
 80017b8:	1809      	addeq	r1, r1, r0
 80017ba:	6021      	streq	r1, [r4, #0]
 80017bc:	e7ed      	b.n	800179a <_free_r+0x1e>
 80017be:	461a      	mov	r2, r3
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	b10b      	cbz	r3, 80017c8 <_free_r+0x4c>
 80017c4:	42a3      	cmp	r3, r4
 80017c6:	d9fa      	bls.n	80017be <_free_r+0x42>
 80017c8:	6811      	ldr	r1, [r2, #0]
 80017ca:	1850      	adds	r0, r2, r1
 80017cc:	42a0      	cmp	r0, r4
 80017ce:	d10b      	bne.n	80017e8 <_free_r+0x6c>
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	4401      	add	r1, r0
 80017d4:	1850      	adds	r0, r2, r1
 80017d6:	4283      	cmp	r3, r0
 80017d8:	6011      	str	r1, [r2, #0]
 80017da:	d1e0      	bne.n	800179e <_free_r+0x22>
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	6053      	str	r3, [r2, #4]
 80017e2:	4408      	add	r0, r1
 80017e4:	6010      	str	r0, [r2, #0]
 80017e6:	e7da      	b.n	800179e <_free_r+0x22>
 80017e8:	d902      	bls.n	80017f0 <_free_r+0x74>
 80017ea:	230c      	movs	r3, #12
 80017ec:	602b      	str	r3, [r5, #0]
 80017ee:	e7d6      	b.n	800179e <_free_r+0x22>
 80017f0:	6820      	ldr	r0, [r4, #0]
 80017f2:	1821      	adds	r1, r4, r0
 80017f4:	428b      	cmp	r3, r1
 80017f6:	bf04      	itt	eq
 80017f8:	6819      	ldreq	r1, [r3, #0]
 80017fa:	685b      	ldreq	r3, [r3, #4]
 80017fc:	6063      	str	r3, [r4, #4]
 80017fe:	bf04      	itt	eq
 8001800:	1809      	addeq	r1, r1, r0
 8001802:	6021      	streq	r1, [r4, #0]
 8001804:	6054      	str	r4, [r2, #4]
 8001806:	e7ca      	b.n	800179e <_free_r+0x22>
 8001808:	bd38      	pop	{r3, r4, r5, pc}
 800180a:	bf00      	nop
 800180c:	20000080 	.word	0x20000080

08001810 <__sfputc_r>:
 8001810:	6893      	ldr	r3, [r2, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	b410      	push	{r4}
 8001818:	6093      	str	r3, [r2, #8]
 800181a:	da08      	bge.n	800182e <__sfputc_r+0x1e>
 800181c:	6994      	ldr	r4, [r2, #24]
 800181e:	42a3      	cmp	r3, r4
 8001820:	db01      	blt.n	8001826 <__sfputc_r+0x16>
 8001822:	290a      	cmp	r1, #10
 8001824:	d103      	bne.n	800182e <__sfputc_r+0x1e>
 8001826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800182a:	f000 bb6d 	b.w	8001f08 <__swbuf_r>
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	1c58      	adds	r0, r3, #1
 8001832:	6010      	str	r0, [r2, #0]
 8001834:	7019      	strb	r1, [r3, #0]
 8001836:	4608      	mov	r0, r1
 8001838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800183c:	4770      	bx	lr

0800183e <__sfputs_r>:
 800183e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001840:	4606      	mov	r6, r0
 8001842:	460f      	mov	r7, r1
 8001844:	4614      	mov	r4, r2
 8001846:	18d5      	adds	r5, r2, r3
 8001848:	42ac      	cmp	r4, r5
 800184a:	d101      	bne.n	8001850 <__sfputs_r+0x12>
 800184c:	2000      	movs	r0, #0
 800184e:	e007      	b.n	8001860 <__sfputs_r+0x22>
 8001850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001854:	463a      	mov	r2, r7
 8001856:	4630      	mov	r0, r6
 8001858:	f7ff ffda 	bl	8001810 <__sfputc_r>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d1f3      	bne.n	8001848 <__sfputs_r+0xa>
 8001860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001864 <_vfiprintf_r>:
 8001864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001868:	460d      	mov	r5, r1
 800186a:	b09d      	sub	sp, #116	@ 0x74
 800186c:	4614      	mov	r4, r2
 800186e:	4698      	mov	r8, r3
 8001870:	4606      	mov	r6, r0
 8001872:	b118      	cbz	r0, 800187c <_vfiprintf_r+0x18>
 8001874:	6a03      	ldr	r3, [r0, #32]
 8001876:	b90b      	cbnz	r3, 800187c <_vfiprintf_r+0x18>
 8001878:	f7ff fe68 	bl	800154c <__sinit>
 800187c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800187e:	07d9      	lsls	r1, r3, #31
 8001880:	d405      	bmi.n	800188e <_vfiprintf_r+0x2a>
 8001882:	89ab      	ldrh	r3, [r5, #12]
 8001884:	059a      	lsls	r2, r3, #22
 8001886:	d402      	bmi.n	800188e <_vfiprintf_r+0x2a>
 8001888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800188a:	f7ff ff74 	bl	8001776 <__retarget_lock_acquire_recursive>
 800188e:	89ab      	ldrh	r3, [r5, #12]
 8001890:	071b      	lsls	r3, r3, #28
 8001892:	d501      	bpl.n	8001898 <_vfiprintf_r+0x34>
 8001894:	692b      	ldr	r3, [r5, #16]
 8001896:	b99b      	cbnz	r3, 80018c0 <_vfiprintf_r+0x5c>
 8001898:	4629      	mov	r1, r5
 800189a:	4630      	mov	r0, r6
 800189c:	f000 fb72 	bl	8001f84 <__swsetup_r>
 80018a0:	b170      	cbz	r0, 80018c0 <_vfiprintf_r+0x5c>
 80018a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018a4:	07dc      	lsls	r4, r3, #31
 80018a6:	d504      	bpl.n	80018b2 <_vfiprintf_r+0x4e>
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	b01d      	add	sp, #116	@ 0x74
 80018ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b2:	89ab      	ldrh	r3, [r5, #12]
 80018b4:	0598      	lsls	r0, r3, #22
 80018b6:	d4f7      	bmi.n	80018a8 <_vfiprintf_r+0x44>
 80018b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80018ba:	f7ff ff5d 	bl	8001778 <__retarget_lock_release_recursive>
 80018be:	e7f3      	b.n	80018a8 <_vfiprintf_r+0x44>
 80018c0:	2300      	movs	r3, #0
 80018c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80018c4:	2320      	movs	r3, #32
 80018c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80018ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80018ce:	2330      	movs	r3, #48	@ 0x30
 80018d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001a80 <_vfiprintf_r+0x21c>
 80018d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018d8:	f04f 0901 	mov.w	r9, #1
 80018dc:	4623      	mov	r3, r4
 80018de:	469a      	mov	sl, r3
 80018e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018e4:	b10a      	cbz	r2, 80018ea <_vfiprintf_r+0x86>
 80018e6:	2a25      	cmp	r2, #37	@ 0x25
 80018e8:	d1f9      	bne.n	80018de <_vfiprintf_r+0x7a>
 80018ea:	ebba 0b04 	subs.w	fp, sl, r4
 80018ee:	d00b      	beq.n	8001908 <_vfiprintf_r+0xa4>
 80018f0:	465b      	mov	r3, fp
 80018f2:	4622      	mov	r2, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	4630      	mov	r0, r6
 80018f8:	f7ff ffa1 	bl	800183e <__sfputs_r>
 80018fc:	3001      	adds	r0, #1
 80018fe:	f000 80a7 	beq.w	8001a50 <_vfiprintf_r+0x1ec>
 8001902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001904:	445a      	add	r2, fp
 8001906:	9209      	str	r2, [sp, #36]	@ 0x24
 8001908:	f89a 3000 	ldrb.w	r3, [sl]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 809f 	beq.w	8001a50 <_vfiprintf_r+0x1ec>
 8001912:	2300      	movs	r3, #0
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800191c:	f10a 0a01 	add.w	sl, sl, #1
 8001920:	9304      	str	r3, [sp, #16]
 8001922:	9307      	str	r3, [sp, #28]
 8001924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001928:	931a      	str	r3, [sp, #104]	@ 0x68
 800192a:	4654      	mov	r4, sl
 800192c:	2205      	movs	r2, #5
 800192e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001932:	4853      	ldr	r0, [pc, #332]	@ (8001a80 <_vfiprintf_r+0x21c>)
 8001934:	f7fe fc6c 	bl	8000210 <memchr>
 8001938:	9a04      	ldr	r2, [sp, #16]
 800193a:	b9d8      	cbnz	r0, 8001974 <_vfiprintf_r+0x110>
 800193c:	06d1      	lsls	r1, r2, #27
 800193e:	bf44      	itt	mi
 8001940:	2320      	movmi	r3, #32
 8001942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001946:	0713      	lsls	r3, r2, #28
 8001948:	bf44      	itt	mi
 800194a:	232b      	movmi	r3, #43	@ 0x2b
 800194c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001950:	f89a 3000 	ldrb.w	r3, [sl]
 8001954:	2b2a      	cmp	r3, #42	@ 0x2a
 8001956:	d015      	beq.n	8001984 <_vfiprintf_r+0x120>
 8001958:	9a07      	ldr	r2, [sp, #28]
 800195a:	4654      	mov	r4, sl
 800195c:	2000      	movs	r0, #0
 800195e:	f04f 0c0a 	mov.w	ip, #10
 8001962:	4621      	mov	r1, r4
 8001964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001968:	3b30      	subs	r3, #48	@ 0x30
 800196a:	2b09      	cmp	r3, #9
 800196c:	d94b      	bls.n	8001a06 <_vfiprintf_r+0x1a2>
 800196e:	b1b0      	cbz	r0, 800199e <_vfiprintf_r+0x13a>
 8001970:	9207      	str	r2, [sp, #28]
 8001972:	e014      	b.n	800199e <_vfiprintf_r+0x13a>
 8001974:	eba0 0308 	sub.w	r3, r0, r8
 8001978:	fa09 f303 	lsl.w	r3, r9, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	9304      	str	r3, [sp, #16]
 8001980:	46a2      	mov	sl, r4
 8001982:	e7d2      	b.n	800192a <_vfiprintf_r+0xc6>
 8001984:	9b03      	ldr	r3, [sp, #12]
 8001986:	1d19      	adds	r1, r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	9103      	str	r1, [sp, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfbb      	ittet	lt
 8001990:	425b      	neglt	r3, r3
 8001992:	f042 0202 	orrlt.w	r2, r2, #2
 8001996:	9307      	strge	r3, [sp, #28]
 8001998:	9307      	strlt	r3, [sp, #28]
 800199a:	bfb8      	it	lt
 800199c:	9204      	strlt	r2, [sp, #16]
 800199e:	7823      	ldrb	r3, [r4, #0]
 80019a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80019a2:	d10a      	bne.n	80019ba <_vfiprintf_r+0x156>
 80019a4:	7863      	ldrb	r3, [r4, #1]
 80019a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80019a8:	d132      	bne.n	8001a10 <_vfiprintf_r+0x1ac>
 80019aa:	9b03      	ldr	r3, [sp, #12]
 80019ac:	1d1a      	adds	r2, r3, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	9203      	str	r2, [sp, #12]
 80019b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80019b6:	3402      	adds	r4, #2
 80019b8:	9305      	str	r3, [sp, #20]
 80019ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001a90 <_vfiprintf_r+0x22c>
 80019be:	7821      	ldrb	r1, [r4, #0]
 80019c0:	2203      	movs	r2, #3
 80019c2:	4650      	mov	r0, sl
 80019c4:	f7fe fc24 	bl	8000210 <memchr>
 80019c8:	b138      	cbz	r0, 80019da <_vfiprintf_r+0x176>
 80019ca:	9b04      	ldr	r3, [sp, #16]
 80019cc:	eba0 000a 	sub.w	r0, r0, sl
 80019d0:	2240      	movs	r2, #64	@ 0x40
 80019d2:	4082      	lsls	r2, r0
 80019d4:	4313      	orrs	r3, r2
 80019d6:	3401      	adds	r4, #1
 80019d8:	9304      	str	r3, [sp, #16]
 80019da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019de:	4829      	ldr	r0, [pc, #164]	@ (8001a84 <_vfiprintf_r+0x220>)
 80019e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80019e4:	2206      	movs	r2, #6
 80019e6:	f7fe fc13 	bl	8000210 <memchr>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d03f      	beq.n	8001a6e <_vfiprintf_r+0x20a>
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <_vfiprintf_r+0x224>)
 80019f0:	bb1b      	cbnz	r3, 8001a3a <_vfiprintf_r+0x1d6>
 80019f2:	9b03      	ldr	r3, [sp, #12]
 80019f4:	3307      	adds	r3, #7
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	3308      	adds	r3, #8
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a00:	443b      	add	r3, r7
 8001a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a04:	e76a      	b.n	80018dc <_vfiprintf_r+0x78>
 8001a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	e7a8      	b.n	8001962 <_vfiprintf_r+0xfe>
 8001a10:	2300      	movs	r3, #0
 8001a12:	3401      	adds	r4, #1
 8001a14:	9305      	str	r3, [sp, #20]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0c0a 	mov.w	ip, #10
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a22:	3a30      	subs	r2, #48	@ 0x30
 8001a24:	2a09      	cmp	r2, #9
 8001a26:	d903      	bls.n	8001a30 <_vfiprintf_r+0x1cc>
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0c6      	beq.n	80019ba <_vfiprintf_r+0x156>
 8001a2c:	9105      	str	r1, [sp, #20]
 8001a2e:	e7c4      	b.n	80019ba <_vfiprintf_r+0x156>
 8001a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a34:	4604      	mov	r4, r0
 8001a36:	2301      	movs	r3, #1
 8001a38:	e7f0      	b.n	8001a1c <_vfiprintf_r+0x1b8>
 8001a3a:	ab03      	add	r3, sp, #12
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	462a      	mov	r2, r5
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <_vfiprintf_r+0x228>)
 8001a42:	a904      	add	r1, sp, #16
 8001a44:	4630      	mov	r0, r6
 8001a46:	f3af 8000 	nop.w
 8001a4a:	4607      	mov	r7, r0
 8001a4c:	1c78      	adds	r0, r7, #1
 8001a4e:	d1d6      	bne.n	80019fe <_vfiprintf_r+0x19a>
 8001a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a52:	07d9      	lsls	r1, r3, #31
 8001a54:	d405      	bmi.n	8001a62 <_vfiprintf_r+0x1fe>
 8001a56:	89ab      	ldrh	r3, [r5, #12]
 8001a58:	059a      	lsls	r2, r3, #22
 8001a5a:	d402      	bmi.n	8001a62 <_vfiprintf_r+0x1fe>
 8001a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a5e:	f7ff fe8b 	bl	8001778 <__retarget_lock_release_recursive>
 8001a62:	89ab      	ldrh	r3, [r5, #12]
 8001a64:	065b      	lsls	r3, r3, #25
 8001a66:	f53f af1f 	bmi.w	80018a8 <_vfiprintf_r+0x44>
 8001a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a6c:	e71e      	b.n	80018ac <_vfiprintf_r+0x48>
 8001a6e:	ab03      	add	r3, sp, #12
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	462a      	mov	r2, r5
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <_vfiprintf_r+0x228>)
 8001a76:	a904      	add	r1, sp, #16
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f000 f879 	bl	8001b70 <_printf_i>
 8001a7e:	e7e4      	b.n	8001a4a <_vfiprintf_r+0x1e6>
 8001a80:	08002287 	.word	0x08002287
 8001a84:	08002291 	.word	0x08002291
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	0800183f 	.word	0x0800183f
 8001a90:	0800228d 	.word	0x0800228d

08001a94 <_printf_common>:
 8001a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a98:	4616      	mov	r6, r2
 8001a9a:	4698      	mov	r8, r3
 8001a9c:	688a      	ldr	r2, [r1, #8]
 8001a9e:	690b      	ldr	r3, [r1, #16]
 8001aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bfb8      	it	lt
 8001aa8:	4613      	movlt	r3, r2
 8001aaa:	6033      	str	r3, [r6, #0]
 8001aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ab0:	4607      	mov	r7, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	b10a      	cbz	r2, 8001aba <_printf_common+0x26>
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	6033      	str	r3, [r6, #0]
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	0699      	lsls	r1, r3, #26
 8001abe:	bf42      	ittt	mi
 8001ac0:	6833      	ldrmi	r3, [r6, #0]
 8001ac2:	3302      	addmi	r3, #2
 8001ac4:	6033      	strmi	r3, [r6, #0]
 8001ac6:	6825      	ldr	r5, [r4, #0]
 8001ac8:	f015 0506 	ands.w	r5, r5, #6
 8001acc:	d106      	bne.n	8001adc <_printf_common+0x48>
 8001ace:	f104 0a19 	add.w	sl, r4, #25
 8001ad2:	68e3      	ldr	r3, [r4, #12]
 8001ad4:	6832      	ldr	r2, [r6, #0]
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	42ab      	cmp	r3, r5
 8001ada:	dc26      	bgt.n	8001b2a <_printf_common+0x96>
 8001adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	3b00      	subs	r3, #0
 8001ae4:	bf18      	it	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	0692      	lsls	r2, r2, #26
 8001aea:	d42b      	bmi.n	8001b44 <_printf_common+0xb0>
 8001aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001af0:	4641      	mov	r1, r8
 8001af2:	4638      	mov	r0, r7
 8001af4:	47c8      	blx	r9
 8001af6:	3001      	adds	r0, #1
 8001af8:	d01e      	beq.n	8001b38 <_printf_common+0xa4>
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	6922      	ldr	r2, [r4, #16]
 8001afe:	f003 0306 	and.w	r3, r3, #6
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf02      	ittt	eq
 8001b06:	68e5      	ldreq	r5, [r4, #12]
 8001b08:	6833      	ldreq	r3, [r6, #0]
 8001b0a:	1aed      	subeq	r5, r5, r3
 8001b0c:	68a3      	ldr	r3, [r4, #8]
 8001b0e:	bf0c      	ite	eq
 8001b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b14:	2500      	movne	r5, #0
 8001b16:	4293      	cmp	r3, r2
 8001b18:	bfc4      	itt	gt
 8001b1a:	1a9b      	subgt	r3, r3, r2
 8001b1c:	18ed      	addgt	r5, r5, r3
 8001b1e:	2600      	movs	r6, #0
 8001b20:	341a      	adds	r4, #26
 8001b22:	42b5      	cmp	r5, r6
 8001b24:	d11a      	bne.n	8001b5c <_printf_common+0xc8>
 8001b26:	2000      	movs	r0, #0
 8001b28:	e008      	b.n	8001b3c <_printf_common+0xa8>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4652      	mov	r2, sl
 8001b2e:	4641      	mov	r1, r8
 8001b30:	4638      	mov	r0, r7
 8001b32:	47c8      	blx	r9
 8001b34:	3001      	adds	r0, #1
 8001b36:	d103      	bne.n	8001b40 <_printf_common+0xac>
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b40:	3501      	adds	r5, #1
 8001b42:	e7c6      	b.n	8001ad2 <_printf_common+0x3e>
 8001b44:	18e1      	adds	r1, r4, r3
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	2030      	movs	r0, #48	@ 0x30
 8001b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b4e:	4422      	add	r2, r4
 8001b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b58:	3302      	adds	r3, #2
 8001b5a:	e7c7      	b.n	8001aec <_printf_common+0x58>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	4622      	mov	r2, r4
 8001b60:	4641      	mov	r1, r8
 8001b62:	4638      	mov	r0, r7
 8001b64:	47c8      	blx	r9
 8001b66:	3001      	adds	r0, #1
 8001b68:	d0e6      	beq.n	8001b38 <_printf_common+0xa4>
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	e7d9      	b.n	8001b22 <_printf_common+0x8e>
	...

08001b70 <_printf_i>:
 8001b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b74:	7e0f      	ldrb	r7, [r1, #24]
 8001b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b78:	2f78      	cmp	r7, #120	@ 0x78
 8001b7a:	4691      	mov	r9, r2
 8001b7c:	4680      	mov	r8, r0
 8001b7e:	460c      	mov	r4, r1
 8001b80:	469a      	mov	sl, r3
 8001b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b86:	d807      	bhi.n	8001b98 <_printf_i+0x28>
 8001b88:	2f62      	cmp	r7, #98	@ 0x62
 8001b8a:	d80a      	bhi.n	8001ba2 <_printf_i+0x32>
 8001b8c:	2f00      	cmp	r7, #0
 8001b8e:	f000 80d2 	beq.w	8001d36 <_printf_i+0x1c6>
 8001b92:	2f58      	cmp	r7, #88	@ 0x58
 8001b94:	f000 80b9 	beq.w	8001d0a <_printf_i+0x19a>
 8001b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ba0:	e03a      	b.n	8001c18 <_printf_i+0xa8>
 8001ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ba6:	2b15      	cmp	r3, #21
 8001ba8:	d8f6      	bhi.n	8001b98 <_printf_i+0x28>
 8001baa:	a101      	add	r1, pc, #4	@ (adr r1, 8001bb0 <_printf_i+0x40>)
 8001bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001bb0:	08001c09 	.word	0x08001c09
 8001bb4:	08001c1d 	.word	0x08001c1d
 8001bb8:	08001b99 	.word	0x08001b99
 8001bbc:	08001b99 	.word	0x08001b99
 8001bc0:	08001b99 	.word	0x08001b99
 8001bc4:	08001b99 	.word	0x08001b99
 8001bc8:	08001c1d 	.word	0x08001c1d
 8001bcc:	08001b99 	.word	0x08001b99
 8001bd0:	08001b99 	.word	0x08001b99
 8001bd4:	08001b99 	.word	0x08001b99
 8001bd8:	08001b99 	.word	0x08001b99
 8001bdc:	08001d1d 	.word	0x08001d1d
 8001be0:	08001c47 	.word	0x08001c47
 8001be4:	08001cd7 	.word	0x08001cd7
 8001be8:	08001b99 	.word	0x08001b99
 8001bec:	08001b99 	.word	0x08001b99
 8001bf0:	08001d3f 	.word	0x08001d3f
 8001bf4:	08001b99 	.word	0x08001b99
 8001bf8:	08001c47 	.word	0x08001c47
 8001bfc:	08001b99 	.word	0x08001b99
 8001c00:	08001b99 	.word	0x08001b99
 8001c04:	08001cdf 	.word	0x08001cdf
 8001c08:	6833      	ldr	r3, [r6, #0]
 8001c0a:	1d1a      	adds	r2, r3, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6032      	str	r2, [r6, #0]
 8001c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e09d      	b.n	8001d58 <_printf_i+0x1e8>
 8001c1c:	6833      	ldr	r3, [r6, #0]
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	1d19      	adds	r1, r3, #4
 8001c22:	6031      	str	r1, [r6, #0]
 8001c24:	0606      	lsls	r6, r0, #24
 8001c26:	d501      	bpl.n	8001c2c <_printf_i+0xbc>
 8001c28:	681d      	ldr	r5, [r3, #0]
 8001c2a:	e003      	b.n	8001c34 <_printf_i+0xc4>
 8001c2c:	0645      	lsls	r5, r0, #25
 8001c2e:	d5fb      	bpl.n	8001c28 <_printf_i+0xb8>
 8001c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c34:	2d00      	cmp	r5, #0
 8001c36:	da03      	bge.n	8001c40 <_printf_i+0xd0>
 8001c38:	232d      	movs	r3, #45	@ 0x2d
 8001c3a:	426d      	negs	r5, r5
 8001c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c40:	4859      	ldr	r0, [pc, #356]	@ (8001da8 <_printf_i+0x238>)
 8001c42:	230a      	movs	r3, #10
 8001c44:	e011      	b.n	8001c6a <_printf_i+0xfa>
 8001c46:	6821      	ldr	r1, [r4, #0]
 8001c48:	6833      	ldr	r3, [r6, #0]
 8001c4a:	0608      	lsls	r0, r1, #24
 8001c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c50:	d402      	bmi.n	8001c58 <_printf_i+0xe8>
 8001c52:	0649      	lsls	r1, r1, #25
 8001c54:	bf48      	it	mi
 8001c56:	b2ad      	uxthmi	r5, r5
 8001c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c5a:	4853      	ldr	r0, [pc, #332]	@ (8001da8 <_printf_i+0x238>)
 8001c5c:	6033      	str	r3, [r6, #0]
 8001c5e:	bf14      	ite	ne
 8001c60:	230a      	movne	r3, #10
 8001c62:	2308      	moveq	r3, #8
 8001c64:	2100      	movs	r1, #0
 8001c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c6a:	6866      	ldr	r6, [r4, #4]
 8001c6c:	60a6      	str	r6, [r4, #8]
 8001c6e:	2e00      	cmp	r6, #0
 8001c70:	bfa2      	ittt	ge
 8001c72:	6821      	ldrge	r1, [r4, #0]
 8001c74:	f021 0104 	bicge.w	r1, r1, #4
 8001c78:	6021      	strge	r1, [r4, #0]
 8001c7a:	b90d      	cbnz	r5, 8001c80 <_printf_i+0x110>
 8001c7c:	2e00      	cmp	r6, #0
 8001c7e:	d04b      	beq.n	8001d18 <_printf_i+0x1a8>
 8001c80:	4616      	mov	r6, r2
 8001c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c86:	fb03 5711 	mls	r7, r3, r1, r5
 8001c8a:	5dc7      	ldrb	r7, [r0, r7]
 8001c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c90:	462f      	mov	r7, r5
 8001c92:	42bb      	cmp	r3, r7
 8001c94:	460d      	mov	r5, r1
 8001c96:	d9f4      	bls.n	8001c82 <_printf_i+0x112>
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d10b      	bne.n	8001cb4 <_printf_i+0x144>
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	07df      	lsls	r7, r3, #31
 8001ca0:	d508      	bpl.n	8001cb4 <_printf_i+0x144>
 8001ca2:	6923      	ldr	r3, [r4, #16]
 8001ca4:	6861      	ldr	r1, [r4, #4]
 8001ca6:	4299      	cmp	r1, r3
 8001ca8:	bfde      	ittt	le
 8001caa:	2330      	movle	r3, #48	@ 0x30
 8001cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001cb4:	1b92      	subs	r2, r2, r6
 8001cb6:	6122      	str	r2, [r4, #16]
 8001cb8:	f8cd a000 	str.w	sl, [sp]
 8001cbc:	464b      	mov	r3, r9
 8001cbe:	aa03      	add	r2, sp, #12
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	f7ff fee6 	bl	8001a94 <_printf_common>
 8001cc8:	3001      	adds	r0, #1
 8001cca:	d14a      	bne.n	8001d62 <_printf_i+0x1f2>
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	b004      	add	sp, #16
 8001cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	4833      	ldr	r0, [pc, #204]	@ (8001dac <_printf_i+0x23c>)
 8001ce0:	2778      	movs	r7, #120	@ 0x78
 8001ce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	6831      	ldr	r1, [r6, #0]
 8001cea:	061f      	lsls	r7, r3, #24
 8001cec:	f851 5b04 	ldr.w	r5, [r1], #4
 8001cf0:	d402      	bmi.n	8001cf8 <_printf_i+0x188>
 8001cf2:	065f      	lsls	r7, r3, #25
 8001cf4:	bf48      	it	mi
 8001cf6:	b2ad      	uxthmi	r5, r5
 8001cf8:	6031      	str	r1, [r6, #0]
 8001cfa:	07d9      	lsls	r1, r3, #31
 8001cfc:	bf44      	itt	mi
 8001cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8001d02:	6023      	strmi	r3, [r4, #0]
 8001d04:	b11d      	cbz	r5, 8001d0e <_printf_i+0x19e>
 8001d06:	2310      	movs	r3, #16
 8001d08:	e7ac      	b.n	8001c64 <_printf_i+0xf4>
 8001d0a:	4827      	ldr	r0, [pc, #156]	@ (8001da8 <_printf_i+0x238>)
 8001d0c:	e7e9      	b.n	8001ce2 <_printf_i+0x172>
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	f023 0320 	bic.w	r3, r3, #32
 8001d14:	6023      	str	r3, [r4, #0]
 8001d16:	e7f6      	b.n	8001d06 <_printf_i+0x196>
 8001d18:	4616      	mov	r6, r2
 8001d1a:	e7bd      	b.n	8001c98 <_printf_i+0x128>
 8001d1c:	6833      	ldr	r3, [r6, #0]
 8001d1e:	6825      	ldr	r5, [r4, #0]
 8001d20:	6961      	ldr	r1, [r4, #20]
 8001d22:	1d18      	adds	r0, r3, #4
 8001d24:	6030      	str	r0, [r6, #0]
 8001d26:	062e      	lsls	r6, r5, #24
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	d501      	bpl.n	8001d30 <_printf_i+0x1c0>
 8001d2c:	6019      	str	r1, [r3, #0]
 8001d2e:	e002      	b.n	8001d36 <_printf_i+0x1c6>
 8001d30:	0668      	lsls	r0, r5, #25
 8001d32:	d5fb      	bpl.n	8001d2c <_printf_i+0x1bc>
 8001d34:	8019      	strh	r1, [r3, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	6123      	str	r3, [r4, #16]
 8001d3a:	4616      	mov	r6, r2
 8001d3c:	e7bc      	b.n	8001cb8 <_printf_i+0x148>
 8001d3e:	6833      	ldr	r3, [r6, #0]
 8001d40:	1d1a      	adds	r2, r3, #4
 8001d42:	6032      	str	r2, [r6, #0]
 8001d44:	681e      	ldr	r6, [r3, #0]
 8001d46:	6862      	ldr	r2, [r4, #4]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f7fe fa60 	bl	8000210 <memchr>
 8001d50:	b108      	cbz	r0, 8001d56 <_printf_i+0x1e6>
 8001d52:	1b80      	subs	r0, r0, r6
 8001d54:	6060      	str	r0, [r4, #4]
 8001d56:	6863      	ldr	r3, [r4, #4]
 8001d58:	6123      	str	r3, [r4, #16]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d60:	e7aa      	b.n	8001cb8 <_printf_i+0x148>
 8001d62:	6923      	ldr	r3, [r4, #16]
 8001d64:	4632      	mov	r2, r6
 8001d66:	4649      	mov	r1, r9
 8001d68:	4640      	mov	r0, r8
 8001d6a:	47d0      	blx	sl
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d0ad      	beq.n	8001ccc <_printf_i+0x15c>
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	079b      	lsls	r3, r3, #30
 8001d74:	d413      	bmi.n	8001d9e <_printf_i+0x22e>
 8001d76:	68e0      	ldr	r0, [r4, #12]
 8001d78:	9b03      	ldr	r3, [sp, #12]
 8001d7a:	4298      	cmp	r0, r3
 8001d7c:	bfb8      	it	lt
 8001d7e:	4618      	movlt	r0, r3
 8001d80:	e7a6      	b.n	8001cd0 <_printf_i+0x160>
 8001d82:	2301      	movs	r3, #1
 8001d84:	4632      	mov	r2, r6
 8001d86:	4649      	mov	r1, r9
 8001d88:	4640      	mov	r0, r8
 8001d8a:	47d0      	blx	sl
 8001d8c:	3001      	adds	r0, #1
 8001d8e:	d09d      	beq.n	8001ccc <_printf_i+0x15c>
 8001d90:	3501      	adds	r5, #1
 8001d92:	68e3      	ldr	r3, [r4, #12]
 8001d94:	9903      	ldr	r1, [sp, #12]
 8001d96:	1a5b      	subs	r3, r3, r1
 8001d98:	42ab      	cmp	r3, r5
 8001d9a:	dcf2      	bgt.n	8001d82 <_printf_i+0x212>
 8001d9c:	e7eb      	b.n	8001d76 <_printf_i+0x206>
 8001d9e:	2500      	movs	r5, #0
 8001da0:	f104 0619 	add.w	r6, r4, #25
 8001da4:	e7f5      	b.n	8001d92 <_printf_i+0x222>
 8001da6:	bf00      	nop
 8001da8:	08002298 	.word	0x08002298
 8001dac:	080022a9 	.word	0x080022a9

08001db0 <__sflush_r>:
 8001db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db8:	0716      	lsls	r6, r2, #28
 8001dba:	4605      	mov	r5, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	d454      	bmi.n	8001e6a <__sflush_r+0xba>
 8001dc0:	684b      	ldr	r3, [r1, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dc02      	bgt.n	8001dcc <__sflush_r+0x1c>
 8001dc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd48      	ble.n	8001e5e <__sflush_r+0xae>
 8001dcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001dce:	2e00      	cmp	r6, #0
 8001dd0:	d045      	beq.n	8001e5e <__sflush_r+0xae>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001dd8:	682f      	ldr	r7, [r5, #0]
 8001dda:	6a21      	ldr	r1, [r4, #32]
 8001ddc:	602b      	str	r3, [r5, #0]
 8001dde:	d030      	beq.n	8001e42 <__sflush_r+0x92>
 8001de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001de2:	89a3      	ldrh	r3, [r4, #12]
 8001de4:	0759      	lsls	r1, r3, #29
 8001de6:	d505      	bpl.n	8001df4 <__sflush_r+0x44>
 8001de8:	6863      	ldr	r3, [r4, #4]
 8001dea:	1ad2      	subs	r2, r2, r3
 8001dec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001dee:	b10b      	cbz	r3, 8001df4 <__sflush_r+0x44>
 8001df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001df8:	6a21      	ldr	r1, [r4, #32]
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	47b0      	blx	r6
 8001dfe:	1c43      	adds	r3, r0, #1
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	d106      	bne.n	8001e12 <__sflush_r+0x62>
 8001e04:	6829      	ldr	r1, [r5, #0]
 8001e06:	291d      	cmp	r1, #29
 8001e08:	d82b      	bhi.n	8001e62 <__sflush_r+0xb2>
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb4 <__sflush_r+0x104>)
 8001e0c:	410a      	asrs	r2, r1
 8001e0e:	07d6      	lsls	r6, r2, #31
 8001e10:	d427      	bmi.n	8001e62 <__sflush_r+0xb2>
 8001e12:	2200      	movs	r2, #0
 8001e14:	6062      	str	r2, [r4, #4]
 8001e16:	04d9      	lsls	r1, r3, #19
 8001e18:	6922      	ldr	r2, [r4, #16]
 8001e1a:	6022      	str	r2, [r4, #0]
 8001e1c:	d504      	bpl.n	8001e28 <__sflush_r+0x78>
 8001e1e:	1c42      	adds	r2, r0, #1
 8001e20:	d101      	bne.n	8001e26 <__sflush_r+0x76>
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	b903      	cbnz	r3, 8001e28 <__sflush_r+0x78>
 8001e26:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e2a:	602f      	str	r7, [r5, #0]
 8001e2c:	b1b9      	cbz	r1, 8001e5e <__sflush_r+0xae>
 8001e2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e32:	4299      	cmp	r1, r3
 8001e34:	d002      	beq.n	8001e3c <__sflush_r+0x8c>
 8001e36:	4628      	mov	r0, r5
 8001e38:	f7ff fca0 	bl	800177c <_free_r>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e40:	e00d      	b.n	8001e5e <__sflush_r+0xae>
 8001e42:	2301      	movs	r3, #1
 8001e44:	4628      	mov	r0, r5
 8001e46:	47b0      	blx	r6
 8001e48:	4602      	mov	r2, r0
 8001e4a:	1c50      	adds	r0, r2, #1
 8001e4c:	d1c9      	bne.n	8001de2 <__sflush_r+0x32>
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0c6      	beq.n	8001de2 <__sflush_r+0x32>
 8001e54:	2b1d      	cmp	r3, #29
 8001e56:	d001      	beq.n	8001e5c <__sflush_r+0xac>
 8001e58:	2b16      	cmp	r3, #22
 8001e5a:	d11e      	bne.n	8001e9a <__sflush_r+0xea>
 8001e5c:	602f      	str	r7, [r5, #0]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	e022      	b.n	8001ea8 <__sflush_r+0xf8>
 8001e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	e01b      	b.n	8001ea2 <__sflush_r+0xf2>
 8001e6a:	690f      	ldr	r7, [r1, #16]
 8001e6c:	2f00      	cmp	r7, #0
 8001e6e:	d0f6      	beq.n	8001e5e <__sflush_r+0xae>
 8001e70:	0793      	lsls	r3, r2, #30
 8001e72:	680e      	ldr	r6, [r1, #0]
 8001e74:	bf08      	it	eq
 8001e76:	694b      	ldreq	r3, [r1, #20]
 8001e78:	600f      	str	r7, [r1, #0]
 8001e7a:	bf18      	it	ne
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	eba6 0807 	sub.w	r8, r6, r7
 8001e82:	608b      	str	r3, [r1, #8]
 8001e84:	f1b8 0f00 	cmp.w	r8, #0
 8001e88:	dde9      	ble.n	8001e5e <__sflush_r+0xae>
 8001e8a:	6a21      	ldr	r1, [r4, #32]
 8001e8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e8e:	4643      	mov	r3, r8
 8001e90:	463a      	mov	r2, r7
 8001e92:	4628      	mov	r0, r5
 8001e94:	47b0      	blx	r6
 8001e96:	2800      	cmp	r0, #0
 8001e98:	dc08      	bgt.n	8001eac <__sflush_r+0xfc>
 8001e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea2:	81a3      	strh	r3, [r4, #12]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eac:	4407      	add	r7, r0
 8001eae:	eba8 0800 	sub.w	r8, r8, r0
 8001eb2:	e7e7      	b.n	8001e84 <__sflush_r+0xd4>
 8001eb4:	dfbffffe 	.word	0xdfbffffe

08001eb8 <_fflush_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	690b      	ldr	r3, [r1, #16]
 8001ebc:	4605      	mov	r5, r0
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	b913      	cbnz	r3, 8001ec8 <_fflush_r+0x10>
 8001ec2:	2500      	movs	r5, #0
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	bd38      	pop	{r3, r4, r5, pc}
 8001ec8:	b118      	cbz	r0, 8001ed2 <_fflush_r+0x1a>
 8001eca:	6a03      	ldr	r3, [r0, #32]
 8001ecc:	b90b      	cbnz	r3, 8001ed2 <_fflush_r+0x1a>
 8001ece:	f7ff fb3d 	bl	800154c <__sinit>
 8001ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f3      	beq.n	8001ec2 <_fflush_r+0xa>
 8001eda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001edc:	07d0      	lsls	r0, r2, #31
 8001ede:	d404      	bmi.n	8001eea <_fflush_r+0x32>
 8001ee0:	0599      	lsls	r1, r3, #22
 8001ee2:	d402      	bmi.n	8001eea <_fflush_r+0x32>
 8001ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ee6:	f7ff fc46 	bl	8001776 <__retarget_lock_acquire_recursive>
 8001eea:	4628      	mov	r0, r5
 8001eec:	4621      	mov	r1, r4
 8001eee:	f7ff ff5f 	bl	8001db0 <__sflush_r>
 8001ef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ef4:	07da      	lsls	r2, r3, #31
 8001ef6:	4605      	mov	r5, r0
 8001ef8:	d4e4      	bmi.n	8001ec4 <_fflush_r+0xc>
 8001efa:	89a3      	ldrh	r3, [r4, #12]
 8001efc:	059b      	lsls	r3, r3, #22
 8001efe:	d4e1      	bmi.n	8001ec4 <_fflush_r+0xc>
 8001f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f02:	f7ff fc39 	bl	8001778 <__retarget_lock_release_recursive>
 8001f06:	e7dd      	b.n	8001ec4 <_fflush_r+0xc>

08001f08 <__swbuf_r>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	460e      	mov	r6, r1
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	4605      	mov	r5, r0
 8001f10:	b118      	cbz	r0, 8001f1a <__swbuf_r+0x12>
 8001f12:	6a03      	ldr	r3, [r0, #32]
 8001f14:	b90b      	cbnz	r3, 8001f1a <__swbuf_r+0x12>
 8001f16:	f7ff fb19 	bl	800154c <__sinit>
 8001f1a:	69a3      	ldr	r3, [r4, #24]
 8001f1c:	60a3      	str	r3, [r4, #8]
 8001f1e:	89a3      	ldrh	r3, [r4, #12]
 8001f20:	071a      	lsls	r2, r3, #28
 8001f22:	d501      	bpl.n	8001f28 <__swbuf_r+0x20>
 8001f24:	6923      	ldr	r3, [r4, #16]
 8001f26:	b943      	cbnz	r3, 8001f3a <__swbuf_r+0x32>
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f000 f82a 	bl	8001f84 <__swsetup_r>
 8001f30:	b118      	cbz	r0, 8001f3a <__swbuf_r+0x32>
 8001f32:	f04f 37ff 	mov.w	r7, #4294967295
 8001f36:	4638      	mov	r0, r7
 8001f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	6922      	ldr	r2, [r4, #16]
 8001f3e:	1a98      	subs	r0, r3, r2
 8001f40:	6963      	ldr	r3, [r4, #20]
 8001f42:	b2f6      	uxtb	r6, r6
 8001f44:	4283      	cmp	r3, r0
 8001f46:	4637      	mov	r7, r6
 8001f48:	dc05      	bgt.n	8001f56 <__swbuf_r+0x4e>
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f7ff ffb3 	bl	8001eb8 <_fflush_r>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	d1ed      	bne.n	8001f32 <__swbuf_r+0x2a>
 8001f56:	68a3      	ldr	r3, [r4, #8]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60a3      	str	r3, [r4, #8]
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	6022      	str	r2, [r4, #0]
 8001f62:	701e      	strb	r6, [r3, #0]
 8001f64:	6962      	ldr	r2, [r4, #20]
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d004      	beq.n	8001f76 <__swbuf_r+0x6e>
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	07db      	lsls	r3, r3, #31
 8001f70:	d5e1      	bpl.n	8001f36 <__swbuf_r+0x2e>
 8001f72:	2e0a      	cmp	r6, #10
 8001f74:	d1df      	bne.n	8001f36 <__swbuf_r+0x2e>
 8001f76:	4621      	mov	r1, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7ff ff9d 	bl	8001eb8 <_fflush_r>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d0d9      	beq.n	8001f36 <__swbuf_r+0x2e>
 8001f82:	e7d6      	b.n	8001f32 <__swbuf_r+0x2a>

08001f84 <__swsetup_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4b29      	ldr	r3, [pc, #164]	@ (800202c <__swsetup_r+0xa8>)
 8001f88:	4605      	mov	r5, r0
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	b118      	cbz	r0, 8001f98 <__swsetup_r+0x14>
 8001f90:	6a03      	ldr	r3, [r0, #32]
 8001f92:	b90b      	cbnz	r3, 8001f98 <__swsetup_r+0x14>
 8001f94:	f7ff fada 	bl	800154c <__sinit>
 8001f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f9c:	0719      	lsls	r1, r3, #28
 8001f9e:	d422      	bmi.n	8001fe6 <__swsetup_r+0x62>
 8001fa0:	06da      	lsls	r2, r3, #27
 8001fa2:	d407      	bmi.n	8001fb4 <__swsetup_r+0x30>
 8001fa4:	2209      	movs	r2, #9
 8001fa6:	602a      	str	r2, [r5, #0]
 8001fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fac:	81a3      	strh	r3, [r4, #12]
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	e033      	b.n	800201c <__swsetup_r+0x98>
 8001fb4:	0758      	lsls	r0, r3, #29
 8001fb6:	d512      	bpl.n	8001fde <__swsetup_r+0x5a>
 8001fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fba:	b141      	cbz	r1, 8001fce <__swsetup_r+0x4a>
 8001fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	d002      	beq.n	8001fca <__swsetup_r+0x46>
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	f7ff fbd9 	bl	800177c <_free_r>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001fce:	89a3      	ldrh	r3, [r4, #12]
 8001fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001fd4:	81a3      	strh	r3, [r4, #12]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6063      	str	r3, [r4, #4]
 8001fda:	6923      	ldr	r3, [r4, #16]
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	81a3      	strh	r3, [r4, #12]
 8001fe6:	6923      	ldr	r3, [r4, #16]
 8001fe8:	b94b      	cbnz	r3, 8001ffe <__swsetup_r+0x7a>
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff4:	d003      	beq.n	8001ffe <__swsetup_r+0x7a>
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f000 f83f 	bl	800207c <__smakebuf_r>
 8001ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002002:	f013 0201 	ands.w	r2, r3, #1
 8002006:	d00a      	beq.n	800201e <__swsetup_r+0x9a>
 8002008:	2200      	movs	r2, #0
 800200a:	60a2      	str	r2, [r4, #8]
 800200c:	6962      	ldr	r2, [r4, #20]
 800200e:	4252      	negs	r2, r2
 8002010:	61a2      	str	r2, [r4, #24]
 8002012:	6922      	ldr	r2, [r4, #16]
 8002014:	b942      	cbnz	r2, 8002028 <__swsetup_r+0xa4>
 8002016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800201a:	d1c5      	bne.n	8001fa8 <__swsetup_r+0x24>
 800201c:	bd38      	pop	{r3, r4, r5, pc}
 800201e:	0799      	lsls	r1, r3, #30
 8002020:	bf58      	it	pl
 8002022:	6962      	ldrpl	r2, [r4, #20]
 8002024:	60a2      	str	r2, [r4, #8]
 8002026:	e7f4      	b.n	8002012 <__swsetup_r+0x8e>
 8002028:	2000      	movs	r0, #0
 800202a:	e7f7      	b.n	800201c <__swsetup_r+0x98>
 800202c:	2000000c 	.word	0x2000000c

08002030 <__swhatbuf_r>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	460c      	mov	r4, r1
 8002034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002038:	2900      	cmp	r1, #0
 800203a:	b096      	sub	sp, #88	@ 0x58
 800203c:	4615      	mov	r5, r2
 800203e:	461e      	mov	r6, r3
 8002040:	da0d      	bge.n	800205e <__swhatbuf_r+0x2e>
 8002042:	89a3      	ldrh	r3, [r4, #12]
 8002044:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002048:	f04f 0100 	mov.w	r1, #0
 800204c:	bf14      	ite	ne
 800204e:	2340      	movne	r3, #64	@ 0x40
 8002050:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002054:	2000      	movs	r0, #0
 8002056:	6031      	str	r1, [r6, #0]
 8002058:	602b      	str	r3, [r5, #0]
 800205a:	b016      	add	sp, #88	@ 0x58
 800205c:	bd70      	pop	{r4, r5, r6, pc}
 800205e:	466a      	mov	r2, sp
 8002060:	f000 f848 	bl	80020f4 <_fstat_r>
 8002064:	2800      	cmp	r0, #0
 8002066:	dbec      	blt.n	8002042 <__swhatbuf_r+0x12>
 8002068:	9901      	ldr	r1, [sp, #4]
 800206a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800206e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002072:	4259      	negs	r1, r3
 8002074:	4159      	adcs	r1, r3
 8002076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800207a:	e7eb      	b.n	8002054 <__swhatbuf_r+0x24>

0800207c <__smakebuf_r>:
 800207c:	898b      	ldrh	r3, [r1, #12]
 800207e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002080:	079d      	lsls	r5, r3, #30
 8002082:	4606      	mov	r6, r0
 8002084:	460c      	mov	r4, r1
 8002086:	d507      	bpl.n	8002098 <__smakebuf_r+0x1c>
 8002088:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	2301      	movs	r3, #1
 8002092:	6163      	str	r3, [r4, #20]
 8002094:	b003      	add	sp, #12
 8002096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002098:	ab01      	add	r3, sp, #4
 800209a:	466a      	mov	r2, sp
 800209c:	f7ff ffc8 	bl	8002030 <__swhatbuf_r>
 80020a0:	9f00      	ldr	r7, [sp, #0]
 80020a2:	4605      	mov	r5, r0
 80020a4:	4639      	mov	r1, r7
 80020a6:	4630      	mov	r0, r6
 80020a8:	f7ff f938 	bl	800131c <_malloc_r>
 80020ac:	b948      	cbnz	r0, 80020c2 <__smakebuf_r+0x46>
 80020ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b2:	059a      	lsls	r2, r3, #22
 80020b4:	d4ee      	bmi.n	8002094 <__smakebuf_r+0x18>
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	81a3      	strh	r3, [r4, #12]
 80020c0:	e7e2      	b.n	8002088 <__smakebuf_r+0xc>
 80020c2:	89a3      	ldrh	r3, [r4, #12]
 80020c4:	6020      	str	r0, [r4, #0]
 80020c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ca:	81a3      	strh	r3, [r4, #12]
 80020cc:	9b01      	ldr	r3, [sp, #4]
 80020ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80020d2:	b15b      	cbz	r3, 80020ec <__smakebuf_r+0x70>
 80020d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020d8:	4630      	mov	r0, r6
 80020da:	f000 f81d 	bl	8002118 <_isatty_r>
 80020de:	b128      	cbz	r0, 80020ec <__smakebuf_r+0x70>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	81a3      	strh	r3, [r4, #12]
 80020ec:	89a3      	ldrh	r3, [r4, #12]
 80020ee:	431d      	orrs	r5, r3
 80020f0:	81a5      	strh	r5, [r4, #12]
 80020f2:	e7cf      	b.n	8002094 <__smakebuf_r+0x18>

080020f4 <_fstat_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4d07      	ldr	r5, [pc, #28]	@ (8002114 <_fstat_r+0x20>)
 80020f8:	2300      	movs	r3, #0
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	602b      	str	r3, [r5, #0]
 8002102:	f7fe ffc2 	bl	800108a <_fstat>
 8002106:	1c43      	adds	r3, r0, #1
 8002108:	d102      	bne.n	8002110 <_fstat_r+0x1c>
 800210a:	682b      	ldr	r3, [r5, #0]
 800210c:	b103      	cbz	r3, 8002110 <_fstat_r+0x1c>
 800210e:	6023      	str	r3, [r4, #0]
 8002110:	bd38      	pop	{r3, r4, r5, pc}
 8002112:	bf00      	nop
 8002114:	200001c0 	.word	0x200001c0

08002118 <_isatty_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4d06      	ldr	r5, [pc, #24]	@ (8002134 <_isatty_r+0x1c>)
 800211c:	2300      	movs	r3, #0
 800211e:	4604      	mov	r4, r0
 8002120:	4608      	mov	r0, r1
 8002122:	602b      	str	r3, [r5, #0]
 8002124:	f7fe ffc1 	bl	80010aa <_isatty>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_isatty_r+0x1a>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	b103      	cbz	r3, 8002132 <_isatty_r+0x1a>
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	200001c0 	.word	0x200001c0

08002138 <_init>:
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	bf00      	nop
 800213c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213e:	bc08      	pop	{r3}
 8002140:	469e      	mov	lr, r3
 8002142:	4770      	bx	lr

08002144 <_fini>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr
