
07-adc_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004c4  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  000014c4  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  000014c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004c4  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080004c4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004c4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c50  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d0  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00002518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008a  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199d8  00000000  00000000  0000267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a80  00000000  00000000  0001c052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecec  00000000  00000000  0001dad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac7be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001bc  00000000  00000000  000ac804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000ac9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a4 	.word	0x080004a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004a4 	.word	0x080004a4

08000204 <pa1_analog_init>:
#include "adc_driver.h"
#include "stm32f4xx.h"                  // Device header


void pa1_analog_init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
 
	  RCC->AHB1ENR |=(1U<<0); //Enable clock to GPIOA
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <pa1_analog_init+0x58>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <pa1_analog_init+0x58>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	 
	  //Set PA1 as analog
	 GPIOA->MODER  |=(1U<<2);
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <pa1_analog_init+0x5c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a11      	ldr	r2, [pc, #68]	@ (8000260 <pa1_analog_init+0x5c>)
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER  |=(1U<<3);
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <pa1_analog_init+0x5c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <pa1_analog_init+0x5c>)
 8000226:	f043 0308 	orr.w	r3, r3, #8
 800022a:	6013      	str	r3, [r2, #0]
	
	  //Setup ADC1
	 RCC->APB2ENR |=(1U<<8); //Enable clock access to ADC1
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <pa1_analog_init+0x58>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000230:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <pa1_analog_init+0x58>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000236:	6453      	str	r3, [r2, #68]	@ 0x44
	 ADC1->CR2 = 0; //SW trigger, Disable ADC
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <pa1_analog_init+0x60>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
	 ADC1->SQR3  =1;  // Conversion sequence starts at CH1
 800023e:	4b09      	ldr	r3, [pc, #36]	@ (8000264 <pa1_analog_init+0x60>)
 8000240:	2201      	movs	r2, #1
 8000242:	635a      	str	r2, [r3, #52]	@ 0x34
	 ADC1->SQR1 = 0;  // Conversion sequence length is 1
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <pa1_analog_init+0x60>)
 8000246:	2200      	movs	r2, #0
 8000248:	62da      	str	r2, [r3, #44]	@ 0x2c
	 ADC1 ->CR2 = (1U<<0); //Enable ADC	 
 800024a:	4b06      	ldr	r3, [pc, #24]	@ (8000264 <pa1_analog_init+0x60>)
 800024c:	2201      	movs	r2, #1
 800024e:	609a      	str	r2, [r3, #8]

}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	40012000 	.word	0x40012000

08000268 <pa1_analog_read>:

uint32_t pa1_analog_read(void){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

  ADC1->CR2 |=(1U<<30); // Start a conversion
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <pa1_analog_read+0x2c>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a08      	ldr	r2, [pc, #32]	@ (8000294 <pa1_analog_read+0x2c>)
 8000272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000276:	6093      	str	r3, [r2, #8]
	
	 while(!(ADC1->SR &(1U<<1))){} // Wait for conversion completion
 8000278:	bf00      	nop
 800027a:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <pa1_analog_read+0x2c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0302 	and.w	r3, r3, #2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <pa1_analog_read+0x12>
		 
	return ADC1->DR; 
 8000286:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <pa1_analog_read+0x2c>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	 
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	40012000 	.word	0x40012000

08000298 <p1_button_init>:
#include "gpio_driver.h"
#include "stm32f4xx.h"                  // Device header

void p1_button_init(void){
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

   RCC->AHB1ENR |=(1U<<2); //Enable clock to PORTC
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <p1_button_init+0x2c>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a0:	4a08      	ldr	r2, [pc, #32]	@ (80002c4 <p1_button_init+0x2c>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6313      	str	r3, [r2, #48]	@ 0x30
	
	//Set P13 as input
	GPIOC->MODER  &= ~(0U<<26);
 80002a8:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <p1_button_init+0x30>)
 80002aa:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <p1_button_init+0x30>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  &= ~(0U<<27);
 80002b0:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <p1_button_init+0x30>)
 80002b2:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <p1_button_init+0x30>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	6013      	str	r3, [r2, #0]

}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020800 	.word	0x40020800

080002cc <get_p13_button_state>:

bool get_p13_button_state(void){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	
	return (GPIOC->IDR & (1U<<13));
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <get_p13_button_state+0x20>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	bf14      	ite	ne
 80002dc:	2301      	movne	r3, #1
 80002de:	2300      	moveq	r3, #0
 80002e0:	b2db      	uxtb	r3, r3


}
 80002e2:	4618      	mov	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	40020800 	.word	0x40020800

080002f0 <main>:

bool btn_state;
uint32_t sensorValue;

int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0


	debug_uart_init();
 80002f4:	f000 f816 	bl	8000324 <debug_uart_init>
	p1_button_init();
 80002f8:	f7ff ffce 	bl	8000298 <p1_button_init>
	pa1_analog_init();
 80002fc:	f7ff ff82 	bl	8000204 <pa1_analog_init>



    while(1)
    {
    	btn_state = get_p13_button_state();
 8000300:	f7ff ffe4 	bl	80002cc <get_p13_button_state>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	4b04      	ldr	r3, [pc, #16]	@ (800031c <main+0x2c>)
 800030a:	701a      	strb	r2, [r3, #0]
    	sensorValue = pa1_analog_read();
 800030c:	f7ff ffac 	bl	8000268 <pa1_analog_read>
 8000310:	4603      	mov	r3, r0
 8000312:	4a03      	ldr	r2, [pc, #12]	@ (8000320 <main+0x30>)
 8000314:	6013      	str	r3, [r2, #0]
    	btn_state = get_p13_button_state();
 8000316:	bf00      	nop
 8000318:	e7f2      	b.n	8000300 <main+0x10>
 800031a:	bf00      	nop
 800031c:	2000001c 	.word	0x2000001c
 8000320:	20000020 	.word	0x20000020

08000324 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000328:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <debug_uart_init+0x84>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032c:	4a1e      	ldr	r2, [pc, #120]	@ (80003a8 <debug_uart_init+0x84>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000334:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <debug_uart_init+0x88>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1c      	ldr	r2, [pc, #112]	@ (80003ac <debug_uart_init+0x88>)
 800033a:	f023 0310 	bic.w	r3, r3, #16
 800033e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000340:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <debug_uart_init+0x88>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a19      	ldr	r2, [pc, #100]	@ (80003ac <debug_uart_init+0x88>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 800034c:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <debug_uart_init+0x88>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a16      	ldr	r2, [pc, #88]	@ (80003ac <debug_uart_init+0x88>)
 8000352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000356:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000358:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <debug_uart_init+0x88>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a13      	ldr	r2, [pc, #76]	@ (80003ac <debug_uart_init+0x88>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000362:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <debug_uart_init+0x88>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a10      	ldr	r2, [pc, #64]	@ (80003ac <debug_uart_init+0x88>)
 800036a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800036e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000370:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <debug_uart_init+0x88>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <debug_uart_init+0x88>)
 8000376:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800037a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 800037c:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <debug_uart_init+0x84>)
 800037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000380:	4a09      	ldr	r2, [pc, #36]	@ (80003a8 <debug_uart_init+0x84>)
 8000382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000386:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 8000388:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800038c:	4808      	ldr	r0, [pc, #32]	@ (80003b0 <debug_uart_init+0x8c>)
 800038e:	f000 f827 	bl	80003e0 <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <debug_uart_init+0x90>)
 8000394:	2208      	movs	r2, #8
 8000396:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <debug_uart_init+0x90>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <debug_uart_init+0x90>)
 800039e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a2:	60d3      	str	r3, [r2, #12]
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020000 	.word	0x40020000
 80003b0:	00f42400 	.word	0x00f42400
 80003b4:	40004400 	.word	0x40004400

080003b8 <compute_uart_bd>:

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
}
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	085a      	lsrs	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	441a      	add	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d0:	b29b      	uxth	r3, r3
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
	...

080003e0 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 80003ea:	6839      	ldr	r1, [r7, #0]
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ffe3 	bl	80003b8 <compute_uart_bd>
 80003f2:	4603      	mov	r3, r0
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b03      	ldr	r3, [pc, #12]	@ (8000404 <uart_set_baudrate+0x24>)
 80003f8:	609a      	str	r2, [r3, #8]
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40004400 	.word	0x40004400

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff ff59 	bl	80002f0 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800044c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000450:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000454:	20000024 	.word	0x20000024

08000458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
