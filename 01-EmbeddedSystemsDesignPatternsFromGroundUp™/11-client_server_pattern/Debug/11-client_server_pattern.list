
11-client_server_pattern.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08001990  08001990  00002990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b0c  08001b0c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001b0c  08001b0c  00002b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b14  08001b14  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b14  08001b14  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b18  08001b18  00002b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001b1c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001b78  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001b78  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028ff  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f14  00000000  00000000  0000598b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  000068a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000251  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b303  00000000  00000000  00006e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b08  00000000  00000000  00022154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091407  00000000  00000000  00026c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012dc  00000000  00000000  000b80a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  000b9384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001978 	.word	0x08001978

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001978 	.word	0x08001978

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ArrythmiaDetector_Init>:
#include "ArrythmiaDetector.h"
#include "TMDQueue.h"
#include <stdlib.h>
#include "uart.h"

void ArrythmiaDetector_Init(ArrythmiaDetector * const me){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

	me->index =0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
	me->itsTMDQueue= NULL;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]

}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <ArrythmiaDetector_getDataSample>:

	 //Implement complex arrythmia identification...
}


void ArrythmiaDetector_getDataSample(ArrythmiaDetector * const me){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
   TimeMarkedData tmd;
	 tmd =  TMDQueue_remove(me->itsTMDQueue,me->index);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	6859      	ldr	r1, [r3, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	f107 0308 	add.w	r3, r7, #8
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9b7 	bl	8000658 <TMDQueue_remove>
	 printf("ArrythmiaDetector index :  %d  TimeInterval : %d DataValue :  %d\n\r",me->index,tmd.timeInterval,tmd.dataValue);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6819      	ldr	r1, [r3, #0]
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	4809      	ldr	r0, [pc, #36]	@ (8000318 <ArrythmiaDetector_getDataSample+0x48>)
 80002f4:	f000 fd80 	bl	8000df8 <iprintf>
	 me->index  =  TMDQueue_getNextIndex(me->itsTMDQueue,me->index);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	685a      	ldr	r2, [r3, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4619      	mov	r1, r3
 8000302:	4610      	mov	r0, r2
 8000304:	f000 f934 	bl	8000570 <TMDQueue_getNextIndex>
 8000308:	4602      	mov	r2, r0
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	08001990 	.word	0x08001990

0800031c <ArrythmiaDetector_setItsTMDQueue>:

void ArrythmiaDetector_setItsTMDQueue(ArrythmiaDetector * const me, struct TMDQueue * p_TMDQueue){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]

	me->itsTMDQueue =  p_TMDQueue;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	605a      	str	r2, [r3, #4]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <ECG_Module_Init>:
#include "ECG_Module.h"
#include <stdlib.h>
#include "TMDQueue.h"
#include "adc_driver.h"

void ECG_Module_Init(ECG_Module * const me){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
   me->dataNum =0;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
   me->itsTMDQueue =NULL;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
   pa1_analog_init();
 800034c:	f000 f9b6 	bl	80006bc <pa1_analog_init>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <ECG_Module_acquireValue>:

	return me;
}


void ECG_Module_acquireValue(ECG_Module * const me){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

    TimeMarkedData tmd;
	//tmd.dataValue =  rand();// TODO:  Change to adc_read
    tmd.dataValue = pa1_analog_read();
 8000360:	f000 f9de 	bl	8000720 <pa1_analog_read>
 8000364:	4603      	mov	r3, r0
 8000366:	60fb      	str	r3, [r7, #12]
    tmd.timeInterval =  ++me->dataNum;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	60bb      	str	r3, [r7, #8]
	TMDQueue_Insert(me->itsTMDQueue,tmd);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68d8      	ldr	r0, [r3, #12]
 800037c:	f107 0308 	add.w	r3, r7, #8
 8000380:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000384:	f000 f91e 	bl	80005c4 <TMDQueue_Insert>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <ECG_Module_setItsTMDQueue>:

struct TMDQueue * ECG_Module_getsItsTMDQueue(ECG_Module * const me){

	   return (struct TMDQueue *)me->itsTMDQueue;
}
void ECG_Module_setItsTMDQueue(ECG_Module * const me,struct TMDQueue * p_TMDQueue){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]

   me->itsTMDQueue = p_TMDQueue;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	60da      	str	r2, [r3, #12]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <HistogramDisplay_Init>:
#include "HistogramDisplay.h"
#include "TMDQueue.h"
#include <stdlib.h>
#include "uart.h"

void HistogramDisplay_Init(HistogramDisplay * const me){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  me->index = 0;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
	me->itsTMDQueue = NULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]

}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <HistogramDisplay_getValue>:
		}

		return me;
}

void HistogramDisplay_getValue(HistogramDisplay * const me){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

	TimeMarkedData tmd;
	tmd  = TMDQueue_remove(me->itsTMDQueue,me->index);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6859      	ldr	r1, [r3, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f939 	bl	8000658 <TMDQueue_remove>
	printf("Histogram index is : %d TimeInterval:  %d  DataValue :  %d \r\n",me->index,tmd.timeInterval,tmd.dataValue);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	68ba      	ldr	r2, [r7, #8]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4809      	ldr	r0, [pc, #36]	@ (8000414 <HistogramDisplay_getValue+0x48>)
 80003f0:	f000 fd02 	bl	8000df8 <iprintf>
	me->index =  TMDQueue_getNextIndex(me->itsTMDQueue,me->index);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	685a      	ldr	r2, [r3, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4610      	mov	r0, r2
 8000400:	f000 f8b6 	bl	8000570 <TMDQueue_getNextIndex>
 8000404:	4602      	mov	r2, r0
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]

}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	080019d4 	.word	0x080019d4

08000418 <HistogramDisplay_setItsTMDQueue>:

	printf("Hitogram updated...\n\r");

}

void HistogramDisplay_setItsTMDQueue(HistogramDisplay * const me,struct TMDQueue * p_TMDQueue){
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]

   me->itsTMDQueue =  p_TMDQueue;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	605a      	str	r2, [r3, #4]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <QRSDetector_Init>:
#include "QRSDetector.h"
#include "TMDQueue.h"
#include <stdlib.h>
#include "uart.h"

void QRSDetector_Init(QRSDetector * const me){
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]

	 me->heartRate =0;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
	 me->index =0;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
	 me->itsTMDQueue = NULL;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <QRSDetector_getDataSample>:
	  me->heartRate =  85; //The 85 is being used as an eg.

}


void QRSDetector_getDataSample(QRSDetector * const me){
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	TimeMarkedData tmd;
	tmd  = TMDQueue_remove(me->itsTMDQueue,me->index);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6859      	ldr	r1, [r3, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	4618      	mov	r0, r3
 8000472:	f000 f8f1 	bl	8000658 <TMDQueue_remove>
	printf("QRSDetector index is : %d TimeInterval:  %d  DataValue :  %d \r\n",me->index,tmd.timeInterval,tmd.dataValue);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6819      	ldr	r1, [r3, #0]
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4809      	ldr	r0, [pc, #36]	@ (80004a4 <QRSDetector_getDataSample+0x48>)
 8000480:	f000 fcba 	bl	8000df8 <iprintf>
	me->index =  TMDQueue_getNextIndex(me->itsTMDQueue,me->index);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685a      	ldr	r2, [r3, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	4610      	mov	r0, r2
 8000490:	f000 f86e 	bl	8000570 <TMDQueue_getNextIndex>
 8000494:	4602      	mov	r2, r0
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	08001a2c 	.word	0x08001a2c

080004a8 <QRSDetector_setItsTMDQueue>:

void QRSDetector_setItsTMDQueue(QRSDetector * const me, struct TMDQueue * p_TMDQueue){
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
   me->itsTMDQueue =  p_TMDQueue;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	605a      	str	r2, [r3, #4]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SystemManager_Init>:

#include "SystemManager.h"
#include <stdlib.h>


void SystemManager_Init( SystemManager * const me){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]

   ECG_Module_Init(&(me->itsECG_Module));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff32 	bl	8000338 <ECG_Module_Init>
	 HistogramDisplay_Init(&(me->itsHistogramDisplay));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3310      	adds	r3, #16
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff67 	bl	80003ac <HistogramDisplay_Init>
	 ArrythmiaDetector_Init(&(me->itsArrythmiaDetector));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3324      	adds	r3, #36	@ 0x24
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fee4 	bl	80002b0 <ArrythmiaDetector_Init>
	 QRSDetector_Init(&(me->itsQRSDetector));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3318      	adds	r3, #24
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffa1 	bl	8000434 <QRSDetector_Init>

	 TMDQueue_Init(&(me->itsTMDQueue));
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3338      	adds	r3, #56	@ 0x38
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f854 	bl	80005a4 <TMDQueue_Init>
	 ECG_Module_setItsTMDQueue(&(me->itsECG_Module),&(me->itsTMDQueue));
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3338      	adds	r3, #56	@ 0x38
 8000502:	4619      	mov	r1, r3
 8000504:	4610      	mov	r0, r2
 8000506:	f7ff ff43 	bl	8000390 <ECG_Module_setItsTMDQueue>
	 HistogramDisplay_setItsTMDQueue(&(me->itsHistogramDisplay),&(me->itsTMDQueue));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f103 0210 	add.w	r2, r3, #16
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3338      	adds	r3, #56	@ 0x38
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f7ff ff7e 	bl	8000418 <HistogramDisplay_setItsTMDQueue>
     ArrythmiaDetector_setItsTMDQueue(&(me->itsArrythmiaDetector),&(me->itsTMDQueue));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3338      	adds	r3, #56	@ 0x38
 8000526:	4619      	mov	r1, r3
 8000528:	4610      	mov	r0, r2
 800052a:	f7ff fef7 	bl	800031c <ArrythmiaDetector_setItsTMDQueue>
     QRSDetector_setItsTMDQueue(&(me->itsQRSDetector),&(me->itsTMDQueue));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f103 0218 	add.w	r2, r3, #24
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3338      	adds	r3, #56	@ 0x38
 8000538:	4619      	mov	r1, r3
 800053a:	4610      	mov	r0, r2
 800053c:	f7ff ffb4 	bl	80004a8 <QRSDetector_setItsTMDQueue>

}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <SystemManager_Create>:
SystemManager * SystemManager_Create(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

	 SystemManager * me = (SystemManager *)malloc(sizeof(SystemManager));
 800054e:	2090      	movs	r0, #144	@ 0x90
 8000550:	f000 fada 	bl	8000b08 <malloc>
 8000554:	4603      	mov	r3, r0
 8000556:	607b      	str	r3, [r7, #4]
	 if(me!=NULL){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <SystemManager_Create+0x1c>

	   SystemManager_Init(me);
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff ffb0 	bl	80004c4 <SystemManager_Init>
	 }

	 return me;
 8000564:	687b      	ldr	r3, [r7, #4]

}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <TMDQueue_getNextIndex>:

#include "TMDQueue.h"
#include <stdlib.h>
#include "uart.h"

uint32_t TMDQueue_getNextIndex(TMDQueue * const me, uint32_t index){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]

	return (index + 1)%QUEUE_SIZE;
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <TMDQueue_getNextIndex+0x30>)
 8000580:	fba3 2301 	umull	r2, r3, r3, r1
 8000584:	08da      	lsrs	r2, r3, #3
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	1aca      	subs	r2, r1, r3
 8000590:	4613      	mov	r3, r2
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	cccccccd 	.word	0xcccccccd

080005a4 <TMDQueue_Init>:

	return me;
}

void TMDQueue_Init(TMDQueue * const me)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	me->head = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
	me->size = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <TMDQueue_Insert>:

void TMDQueue_Insert(TMDQueue * const me, const TimeMarkedData tmd)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	e883 0006 	stmia.w	r3, {r1, r2}
	printf("Inserting at : %d TimeInterval #: %d\n\r", me->head, tmd.timeInterval);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4619      	mov	r1, r3
 80005da:	4814      	ldr	r0, [pc, #80]	@ (800062c <TMDQueue_Insert+0x68>)
 80005dc:	f000 fc0c 	bl	8000df8 <iprintf>
	me->buffer[me->head] = tmd;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	4413      	add	r3, r2
 80005ec:	1d3a      	adds	r2, r7, #4
 80005ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f2:	e883 0003 	stmia.w	r3, {r0, r1}
	me->head = TMDQueue_getNextIndex(me , me->head);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4619      	mov	r1, r3
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f7ff ffb7 	bl	8000570 <TMDQueue_getNextIndex>
 8000602:	4602      	mov	r2, r0
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	601a      	str	r2, [r3, #0]

	if(me->size < QUEUE_SIZE){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d804      	bhi.n	800061a <TMDQueue_Insert+0x56>
		++me->size;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	605a      	str	r2, [r3, #4]
	}
	printf("Storing data value : %d \n\r",tmd.dataValue);
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4619      	mov	r1, r3
 800061e:	4804      	ldr	r0, [pc, #16]	@ (8000630 <TMDQueue_Insert+0x6c>)
 8000620:	f000 fbea 	bl	8000df8 <iprintf>


}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08001a6c 	.word	0x08001a6c
 8000630:	08001a94 	.word	0x08001a94

08000634 <TMDQueue_isEmpty>:

uint8_t TMDQueue_isEmpty(TMDQueue * const me)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	return (uint8_t)(me->size == 0);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <TMDQueue_remove>:

TimeMarkedData TMDQueue_remove(TMDQueue * const me, uint32_t index)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	TimeMarkedData tmd;

	tmd.timeInterval = 99999;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <TMDQueue_remove+0x60>)
 8000666:	613b      	str	r3, [r7, #16]
	tmd.dataValue = 99999;
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <TMDQueue_remove+0x60>)
 800066a:	617b      	str	r3, [r7, #20]

	if(!TMDQueue_isEmpty(me)&&(index<QUEUE_SIZE)&&(index<me->size)){
 800066c:	68b8      	ldr	r0, [r7, #8]
 800066e:	f7ff ffe1 	bl	8000634 <TMDQueue_isEmpty>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d112      	bne.n	800069e <TMDQueue_remove+0x46>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b09      	cmp	r3, #9
 800067c:	d80f      	bhi.n	800069e <TMDQueue_remove+0x46>
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	d20a      	bcs.n	800069e <TMDQueue_remove+0x46>
		tmd = me->buffer[index];
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	f107 0210 	add.w	r2, r7, #16
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	440b      	add	r3, r1
 8000696:	e893 0003 	ldmia.w	r3, {r0, r1}
 800069a:	e882 0003 	stmia.w	r2, {r0, r1}
	}

	return tmd;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	461a      	mov	r2, r3
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006aa:	e882 0003 	stmia.w	r2, {r0, r1}

}
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	0001869f 	.word	0x0001869f

080006bc <pa1_analog_init>:
#include "adc_driver.h"
#include "stm32f4xx.h"                  // Device header


void pa1_analog_init(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
 
	  RCC->AHB1ENR |=(1U<<0); //Enable clock to GPIOA
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <pa1_analog_init+0x58>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <pa1_analog_init+0x58>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6313      	str	r3, [r2, #48]	@ 0x30
	 
	  //Set PA1 as analog
	 GPIOA->MODER  |=(1U<<2);
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <pa1_analog_init+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a11      	ldr	r2, [pc, #68]	@ (8000718 <pa1_analog_init+0x5c>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER  |=(1U<<3);
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <pa1_analog_init+0x5c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <pa1_analog_init+0x5c>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6013      	str	r3, [r2, #0]
	
	  //Setup ADC1
	 RCC->APB2ENR |=(1U<<8); //Enable clock access to ADC1
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <pa1_analog_init+0x58>)
 80006e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <pa1_analog_init+0x58>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ee:	6453      	str	r3, [r2, #68]	@ 0x44
	 ADC1->CR2 = 0; //SW trigger, Disable ADC
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <pa1_analog_init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
	 ADC1->SQR3  =1;  // Conversion sequence starts at CH1
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <pa1_analog_init+0x60>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	635a      	str	r2, [r3, #52]	@ 0x34
	 ADC1->SQR1 = 0;  // Conversion sequence length is 1
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <pa1_analog_init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	@ 0x2c
	 ADC1 ->CR2 = (1U<<0); //Enable ADC	 
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <pa1_analog_init+0x60>)
 8000704:	2201      	movs	r2, #1
 8000706:	609a      	str	r2, [r3, #8]

}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	40012000 	.word	0x40012000

08000720 <pa1_analog_read>:

uint32_t pa1_analog_read(void){
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  ADC1->CR2 |=(1U<<30); // Start a conversion
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <pa1_analog_read+0x2c>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	4a08      	ldr	r2, [pc, #32]	@ (800074c <pa1_analog_read+0x2c>)
 800072a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800072e:	6093      	str	r3, [r2, #8]
	
	 while(!(ADC1->SR &(1U<<1))){} // Wait for conversion completion
 8000730:	bf00      	nop
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <pa1_analog_read+0x2c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f9      	beq.n	8000732 <pa1_analog_read+0x12>
		 
	return ADC1->DR; 
 800073e:	4b03      	ldr	r3, [pc, #12]	@ (800074c <pa1_analog_read+0x2c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	 
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40012000 	.word	0x40012000

08000750 <main>:
#include "uart.h"
#include "SystemManager.h"

int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0


	debug_uart_init();
 8000756:	f000 f923 	bl	80009a0 <debug_uart_init>

	SystemManager *p_SystemManager;
		p_SystemManager = SystemManager_Create();
 800075a:	f7ff fef5 	bl	8000548 <SystemManager_Create>
 800075e:	6078      	str	r0, [r7, #4]

		ECG_Module_acquireValue(&(p_SystemManager->itsECG_Module));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fdf8 	bl	8000358 <ECG_Module_acquireValue>
		ECG_Module_acquireValue(&(p_SystemManager->itsECG_Module));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fdf4 	bl	8000358 <ECG_Module_acquireValue>
		ECG_Module_acquireValue(&(p_SystemManager->itsECG_Module));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fdf0 	bl	8000358 <ECG_Module_acquireValue>
		ECG_Module_acquireValue(&(p_SystemManager->itsECG_Module));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fdec 	bl	8000358 <ECG_Module_acquireValue>
		ECG_Module_acquireValue(&(p_SystemManager->itsECG_Module));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fde8 	bl	8000358 <ECG_Module_acquireValue>

		printf("\n\r");
 8000788:	482b      	ldr	r0, [pc, #172]	@ (8000838 <main+0xe8>)
 800078a:	f000 fb35 	bl	8000df8 <iprintf>
		//Client 1
		HistogramDisplay_getValue(&(p_SystemManager->itsHistogramDisplay));
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3310      	adds	r3, #16
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fe1a 	bl	80003cc <HistogramDisplay_getValue>
		HistogramDisplay_getValue(&(p_SystemManager->itsHistogramDisplay));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3310      	adds	r3, #16
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe15 	bl	80003cc <HistogramDisplay_getValue>
		HistogramDisplay_getValue(&(p_SystemManager->itsHistogramDisplay));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3310      	adds	r3, #16
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe10 	bl	80003cc <HistogramDisplay_getValue>
		HistogramDisplay_getValue(&(p_SystemManager->itsHistogramDisplay));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3310      	adds	r3, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe0b 	bl	80003cc <HistogramDisplay_getValue>
		 printf("\n\r");
 80007b6:	4820      	ldr	r0, [pc, #128]	@ (8000838 <main+0xe8>)
 80007b8:	f000 fb1e 	bl	8000df8 <iprintf>


		//Client 2
		QRSDetector_getDataSample(&(p_SystemManager->itsQRSDetector));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3318      	adds	r3, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe4b 	bl	800045c <QRSDetector_getDataSample>
		QRSDetector_getDataSample(&(p_SystemManager->itsQRSDetector));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3318      	adds	r3, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe46 	bl	800045c <QRSDetector_getDataSample>
			 printf("\n\r");
 80007d0:	4819      	ldr	r0, [pc, #100]	@ (8000838 <main+0xe8>)
 80007d2:	f000 fb11 	bl	8000df8 <iprintf>

	  //Client 1

		HistogramDisplay_getValue(&(p_SystemManager->itsHistogramDisplay));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3310      	adds	r3, #16
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fdf6 	bl	80003cc <HistogramDisplay_getValue>
		 printf("\n\r");
 80007e0:	4815      	ldr	r0, [pc, #84]	@ (8000838 <main+0xe8>)
 80007e2:	f000 fb09 	bl	8000df8 <iprintf>

		//Client 3
		ArrythmiaDetector_getDataSample(&(p_SystemManager->itsArrythmiaDetector));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3324      	adds	r3, #36	@ 0x24
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fd70 	bl	80002d0 <ArrythmiaDetector_getDataSample>
		ArrythmiaDetector_getDataSample(&(p_SystemManager->itsArrythmiaDetector));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3324      	adds	r3, #36	@ 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd6b 	bl	80002d0 <ArrythmiaDetector_getDataSample>
		ArrythmiaDetector_getDataSample(&(p_SystemManager->itsArrythmiaDetector));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3324      	adds	r3, #36	@ 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fd66 	bl	80002d0 <ArrythmiaDetector_getDataSample>
		 printf("\n\r");
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <main+0xe8>)
 8000806:	f000 faf7 	bl	8000df8 <iprintf>

		//Client 2

		QRSDetector_getDataSample(&(p_SystemManager->itsQRSDetector));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3318      	adds	r3, #24
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe24 	bl	800045c <QRSDetector_getDataSample>
		QRSDetector_getDataSample(&(p_SystemManager->itsQRSDetector));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3318      	adds	r3, #24
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fe1f 	bl	800045c <QRSDetector_getDataSample>
		 printf("\n\r");
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <main+0xe8>)
 8000820:	f000 faea 	bl	8000df8 <iprintf>

		//Client 3
		ArrythmiaDetector_getDataSample(&(p_SystemManager->itsArrythmiaDetector));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3324      	adds	r3, #36	@ 0x24
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fd51 	bl	80002d0 <ArrythmiaDetector_getDataSample>

		printf("Done...\n\r");
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <main+0xec>)
 8000830:	f000 fae2 	bl	8000df8 <iprintf>

		while(1){
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <main+0xe4>
 8000838:	08001ac8 	.word	0x08001ac8
 800083c:	08001acc 	.word	0x08001acc

08000840 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e00a      	b.n	8000868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000852:	f3af 8000 	nop.w
 8000856:	4601      	mov	r1, r0
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	b2ca      	uxtb	r2, r1
 8000860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbf0      	blt.n	8000852 <_read+0x12>
  }

  return len;
 8000870:	687b      	ldr	r3, [r7, #4]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	e009      	b.n	80008a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60ba      	str	r2, [r7, #8]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f877 	bl	8000988 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbf1      	blt.n	800088c <_write+0x12>
  }
  return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_close>:

int _close(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008da:	605a      	str	r2, [r3, #4]
  return 0;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <_isatty>:

int _isatty(int file)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f000 fb08 	bl	8000f60 <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20020000 	.word	0x20020000
 800097c:	00000400 	.word	0x00000400
 8000980:	20000078 	.word	0x20000078
 8000984:	200001c8 	.word	0x200001c8

08000988 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f84f 	bl	8000a34 <uart_write>
	return ch;
 8000996:	687b      	ldr	r3, [r7, #4]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <debug_uart_init>:

void debug_uart_init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <debug_uart_init+0x84>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <debug_uart_init+0x84>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <debug_uart_init+0x88>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <debug_uart_init+0x88>)
 80009b6:	f023 0310 	bic.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <debug_uart_init+0x88>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <debug_uart_init+0x88>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <debug_uart_init+0x88>)
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <debug_uart_init+0x88>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <debug_uart_init+0x88>)
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <debug_uart_init+0x88>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <debug_uart_init+0x88>)
 80009e2:	6a1b      	ldr	r3, [r3, #32]
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <debug_uart_init+0x88>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <debug_uart_init+0x88>)
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <debug_uart_init+0x88>)
 80009f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80009f6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <debug_uart_init+0x84>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <debug_uart_init+0x84>)
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 8000a04:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <debug_uart_init+0x8c>)
 8000a0a:	f000 f83f 	bl	8000a8c <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <debug_uart_init+0x90>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <debug_uart_init+0x90>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <debug_uart_init+0x90>)
 8000a1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	00f42400 	.word	0x00f42400
 8000a30:	40004400 	.word	0x40004400

08000a34 <uart_write>:

static void uart_write(int ch)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 8000a3c:	bf00      	nop
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <uart_write+0x2c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f9      	beq.n	8000a3e <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <uart_write+0x2c>)
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	6053      	str	r3, [r2, #4]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40004400 	.word	0x40004400

08000a64 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	085a      	lsrs	r2, r3, #1
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	441a      	add	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	b29b      	uxth	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe3 	bl	8000a64 <compute_uart_bd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <uart_set_baudrate+0x24>)
 8000aa4:	609a      	str	r2, [r3, #8]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab4:	480d      	ldr	r0, [pc, #52]	@ (8000aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae2:	f000 fa43 	bl	8000f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae6:	f7ff fe33 	bl	8000750 <main>

08000aea <LoopForever>:

LoopForever:
  b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   r0, =_estack
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af8:	08001b1c 	.word	0x08001b1c
  ldr r2, =_sbss
 8000afc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b00:	200001c8 	.word	0x200001c8

08000b04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <malloc>:
 8000b08:	4b02      	ldr	r3, [pc, #8]	@ (8000b14 <malloc+0xc>)
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	f000 b825 	b.w	8000b5c <_malloc_r>
 8000b12:	bf00      	nop
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <sbrk_aligned>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b58 <sbrk_aligned+0x40>)
 8000b1c:	460c      	mov	r4, r1
 8000b1e:	6831      	ldr	r1, [r6, #0]
 8000b20:	4605      	mov	r5, r0
 8000b22:	b911      	cbnz	r1, 8000b2a <sbrk_aligned+0x12>
 8000b24:	f000 f9fa 	bl	8000f1c <_sbrk_r>
 8000b28:	6030      	str	r0, [r6, #0]
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f000 f9f5 	bl	8000f1c <_sbrk_r>
 8000b32:	1c43      	adds	r3, r0, #1
 8000b34:	d103      	bne.n	8000b3e <sbrk_aligned+0x26>
 8000b36:	f04f 34ff 	mov.w	r4, #4294967295
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bd70      	pop	{r4, r5, r6, pc}
 8000b3e:	1cc4      	adds	r4, r0, #3
 8000b40:	f024 0403 	bic.w	r4, r4, #3
 8000b44:	42a0      	cmp	r0, r4
 8000b46:	d0f8      	beq.n	8000b3a <sbrk_aligned+0x22>
 8000b48:	1a21      	subs	r1, r4, r0
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f000 f9e6 	bl	8000f1c <_sbrk_r>
 8000b50:	3001      	adds	r0, #1
 8000b52:	d1f2      	bne.n	8000b3a <sbrk_aligned+0x22>
 8000b54:	e7ef      	b.n	8000b36 <sbrk_aligned+0x1e>
 8000b56:	bf00      	nop
 8000b58:	2000007c 	.word	0x2000007c

08000b5c <_malloc_r>:
 8000b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b60:	1ccd      	adds	r5, r1, #3
 8000b62:	f025 0503 	bic.w	r5, r5, #3
 8000b66:	3508      	adds	r5, #8
 8000b68:	2d0c      	cmp	r5, #12
 8000b6a:	bf38      	it	cc
 8000b6c:	250c      	movcc	r5, #12
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	4606      	mov	r6, r0
 8000b72:	db01      	blt.n	8000b78 <_malloc_r+0x1c>
 8000b74:	42a9      	cmp	r1, r5
 8000b76:	d904      	bls.n	8000b82 <_malloc_r+0x26>
 8000b78:	230c      	movs	r3, #12
 8000b7a:	6033      	str	r3, [r6, #0]
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c58 <_malloc_r+0xfc>
 8000b86:	f000 f869 	bl	8000c5c <__malloc_lock>
 8000b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b8e:	461c      	mov	r4, r3
 8000b90:	bb44      	cbnz	r4, 8000be4 <_malloc_r+0x88>
 8000b92:	4629      	mov	r1, r5
 8000b94:	4630      	mov	r0, r6
 8000b96:	f7ff ffbf 	bl	8000b18 <sbrk_aligned>
 8000b9a:	1c43      	adds	r3, r0, #1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	d158      	bne.n	8000c52 <_malloc_r+0xf6>
 8000ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ba4:	4627      	mov	r7, r4
 8000ba6:	2f00      	cmp	r7, #0
 8000ba8:	d143      	bne.n	8000c32 <_malloc_r+0xd6>
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d04b      	beq.n	8000c46 <_malloc_r+0xea>
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	eb04 0903 	add.w	r9, r4, r3
 8000bb8:	f000 f9b0 	bl	8000f1c <_sbrk_r>
 8000bbc:	4581      	cmp	r9, r0
 8000bbe:	d142      	bne.n	8000c46 <_malloc_r+0xea>
 8000bc0:	6821      	ldr	r1, [r4, #0]
 8000bc2:	1a6d      	subs	r5, r5, r1
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	f7ff ffa6 	bl	8000b18 <sbrk_aligned>
 8000bcc:	3001      	adds	r0, #1
 8000bce:	d03a      	beq.n	8000c46 <_malloc_r+0xea>
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	442b      	add	r3, r5
 8000bd4:	6023      	str	r3, [r4, #0]
 8000bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	bb62      	cbnz	r2, 8000c38 <_malloc_r+0xdc>
 8000bde:	f8c8 7000 	str.w	r7, [r8]
 8000be2:	e00f      	b.n	8000c04 <_malloc_r+0xa8>
 8000be4:	6822      	ldr	r2, [r4, #0]
 8000be6:	1b52      	subs	r2, r2, r5
 8000be8:	d420      	bmi.n	8000c2c <_malloc_r+0xd0>
 8000bea:	2a0b      	cmp	r2, #11
 8000bec:	d917      	bls.n	8000c1e <_malloc_r+0xc2>
 8000bee:	1961      	adds	r1, r4, r5
 8000bf0:	42a3      	cmp	r3, r4
 8000bf2:	6025      	str	r5, [r4, #0]
 8000bf4:	bf18      	it	ne
 8000bf6:	6059      	strne	r1, [r3, #4]
 8000bf8:	6863      	ldr	r3, [r4, #4]
 8000bfa:	bf08      	it	eq
 8000bfc:	f8c8 1000 	streq.w	r1, [r8]
 8000c00:	5162      	str	r2, [r4, r5]
 8000c02:	604b      	str	r3, [r1, #4]
 8000c04:	4630      	mov	r0, r6
 8000c06:	f000 f82f 	bl	8000c68 <__malloc_unlock>
 8000c0a:	f104 000b 	add.w	r0, r4, #11
 8000c0e:	1d23      	adds	r3, r4, #4
 8000c10:	f020 0007 	bic.w	r0, r0, #7
 8000c14:	1ac2      	subs	r2, r0, r3
 8000c16:	bf1c      	itt	ne
 8000c18:	1a1b      	subne	r3, r3, r0
 8000c1a:	50a3      	strne	r3, [r4, r2]
 8000c1c:	e7af      	b.n	8000b7e <_malloc_r+0x22>
 8000c1e:	6862      	ldr	r2, [r4, #4]
 8000c20:	42a3      	cmp	r3, r4
 8000c22:	bf0c      	ite	eq
 8000c24:	f8c8 2000 	streq.w	r2, [r8]
 8000c28:	605a      	strne	r2, [r3, #4]
 8000c2a:	e7eb      	b.n	8000c04 <_malloc_r+0xa8>
 8000c2c:	4623      	mov	r3, r4
 8000c2e:	6864      	ldr	r4, [r4, #4]
 8000c30:	e7ae      	b.n	8000b90 <_malloc_r+0x34>
 8000c32:	463c      	mov	r4, r7
 8000c34:	687f      	ldr	r7, [r7, #4]
 8000c36:	e7b6      	b.n	8000ba6 <_malloc_r+0x4a>
 8000c38:	461a      	mov	r2, r3
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	d1fb      	bne.n	8000c38 <_malloc_r+0xdc>
 8000c40:	2300      	movs	r3, #0
 8000c42:	6053      	str	r3, [r2, #4]
 8000c44:	e7de      	b.n	8000c04 <_malloc_r+0xa8>
 8000c46:	230c      	movs	r3, #12
 8000c48:	6033      	str	r3, [r6, #0]
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f000 f80c 	bl	8000c68 <__malloc_unlock>
 8000c50:	e794      	b.n	8000b7c <_malloc_r+0x20>
 8000c52:	6005      	str	r5, [r0, #0]
 8000c54:	e7d6      	b.n	8000c04 <_malloc_r+0xa8>
 8000c56:	bf00      	nop
 8000c58:	20000080 	.word	0x20000080

08000c5c <__malloc_lock>:
 8000c5c:	4801      	ldr	r0, [pc, #4]	@ (8000c64 <__malloc_lock+0x8>)
 8000c5e:	f000 b9aa 	b.w	8000fb6 <__retarget_lock_acquire_recursive>
 8000c62:	bf00      	nop
 8000c64:	200001c4 	.word	0x200001c4

08000c68 <__malloc_unlock>:
 8000c68:	4801      	ldr	r0, [pc, #4]	@ (8000c70 <__malloc_unlock+0x8>)
 8000c6a:	f000 b9a5 	b.w	8000fb8 <__retarget_lock_release_recursive>
 8000c6e:	bf00      	nop
 8000c70:	200001c4 	.word	0x200001c4

08000c74 <std>:
 8000c74:	2300      	movs	r3, #0
 8000c76:	b510      	push	{r4, lr}
 8000c78:	4604      	mov	r4, r0
 8000c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8000c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c82:	6083      	str	r3, [r0, #8]
 8000c84:	8181      	strh	r1, [r0, #12]
 8000c86:	6643      	str	r3, [r0, #100]	@ 0x64
 8000c88:	81c2      	strh	r2, [r0, #14]
 8000c8a:	6183      	str	r3, [r0, #24]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2208      	movs	r2, #8
 8000c90:	305c      	adds	r0, #92	@ 0x5c
 8000c92:	f000 f906 	bl	8000ea2 <memset>
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <std+0x58>)
 8000c98:	6263      	str	r3, [r4, #36]	@ 0x24
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <std+0x5c>)
 8000c9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <std+0x60>)
 8000ca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <std+0x64>)
 8000ca4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <std+0x68>)
 8000ca8:	6224      	str	r4, [r4, #32]
 8000caa:	429c      	cmp	r4, r3
 8000cac:	d006      	beq.n	8000cbc <std+0x48>
 8000cae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000cb2:	4294      	cmp	r4, r2
 8000cb4:	d002      	beq.n	8000cbc <std+0x48>
 8000cb6:	33d0      	adds	r3, #208	@ 0xd0
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d105      	bne.n	8000cc8 <std+0x54>
 8000cbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cc4:	f000 b976 	b.w	8000fb4 <__retarget_lock_init_recursive>
 8000cc8:	bd10      	pop	{r4, pc}
 8000cca:	bf00      	nop
 8000ccc:	08000e1d 	.word	0x08000e1d
 8000cd0:	08000e3f 	.word	0x08000e3f
 8000cd4:	08000e77 	.word	0x08000e77
 8000cd8:	08000e9b 	.word	0x08000e9b
 8000cdc:	20000084 	.word	0x20000084

08000ce0 <stdio_exit_handler>:
 8000ce0:	4a02      	ldr	r2, [pc, #8]	@ (8000cec <stdio_exit_handler+0xc>)
 8000ce2:	4903      	ldr	r1, [pc, #12]	@ (8000cf0 <stdio_exit_handler+0x10>)
 8000ce4:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <stdio_exit_handler+0x14>)
 8000ce6:	f000 b869 	b.w	8000dbc <_fwalk_sglue>
 8000cea:	bf00      	nop
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	080016f9 	.word	0x080016f9
 8000cf4:	20000010 	.word	0x20000010

08000cf8 <cleanup_stdio>:
 8000cf8:	6841      	ldr	r1, [r0, #4]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <cleanup_stdio+0x34>)
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	b510      	push	{r4, lr}
 8000d00:	4604      	mov	r4, r0
 8000d02:	d001      	beq.n	8000d08 <cleanup_stdio+0x10>
 8000d04:	f000 fcf8 	bl	80016f8 <_fflush_r>
 8000d08:	68a1      	ldr	r1, [r4, #8]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <cleanup_stdio+0x38>)
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d002      	beq.n	8000d16 <cleanup_stdio+0x1e>
 8000d10:	4620      	mov	r0, r4
 8000d12:	f000 fcf1 	bl	80016f8 <_fflush_r>
 8000d16:	68e1      	ldr	r1, [r4, #12]
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <cleanup_stdio+0x3c>)
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d004      	beq.n	8000d28 <cleanup_stdio+0x30>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d24:	f000 bce8 	b.w	80016f8 <_fflush_r>
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000084 	.word	0x20000084
 8000d30:	200000ec 	.word	0x200000ec
 8000d34:	20000154 	.word	0x20000154

08000d38 <global_stdio_init.part.0>:
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <global_stdio_init.part.0+0x30>)
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8000d6c <global_stdio_init.part.0+0x34>)
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d70 <global_stdio_init.part.0+0x38>)
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	4620      	mov	r0, r4
 8000d44:	2200      	movs	r2, #0
 8000d46:	2104      	movs	r1, #4
 8000d48:	f7ff ff94 	bl	8000c74 <std>
 8000d4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d50:	2201      	movs	r2, #1
 8000d52:	2109      	movs	r1, #9
 8000d54:	f7ff ff8e 	bl	8000c74 <std>
 8000d58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d62:	2112      	movs	r1, #18
 8000d64:	f7ff bf86 	b.w	8000c74 <std>
 8000d68:	200001bc 	.word	0x200001bc
 8000d6c:	20000084 	.word	0x20000084
 8000d70:	08000ce1 	.word	0x08000ce1

08000d74 <__sfp_lock_acquire>:
 8000d74:	4801      	ldr	r0, [pc, #4]	@ (8000d7c <__sfp_lock_acquire+0x8>)
 8000d76:	f000 b91e 	b.w	8000fb6 <__retarget_lock_acquire_recursive>
 8000d7a:	bf00      	nop
 8000d7c:	200001c5 	.word	0x200001c5

08000d80 <__sfp_lock_release>:
 8000d80:	4801      	ldr	r0, [pc, #4]	@ (8000d88 <__sfp_lock_release+0x8>)
 8000d82:	f000 b919 	b.w	8000fb8 <__retarget_lock_release_recursive>
 8000d86:	bf00      	nop
 8000d88:	200001c5 	.word	0x200001c5

08000d8c <__sinit>:
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	4604      	mov	r4, r0
 8000d90:	f7ff fff0 	bl	8000d74 <__sfp_lock_acquire>
 8000d94:	6a23      	ldr	r3, [r4, #32]
 8000d96:	b11b      	cbz	r3, 8000da0 <__sinit+0x14>
 8000d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d9c:	f7ff bff0 	b.w	8000d80 <__sfp_lock_release>
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__sinit+0x28>)
 8000da2:	6223      	str	r3, [r4, #32]
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__sinit+0x2c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f5      	bne.n	8000d98 <__sinit+0xc>
 8000dac:	f7ff ffc4 	bl	8000d38 <global_stdio_init.part.0>
 8000db0:	e7f2      	b.n	8000d98 <__sinit+0xc>
 8000db2:	bf00      	nop
 8000db4:	08000cf9 	.word	0x08000cf9
 8000db8:	200001bc 	.word	0x200001bc

08000dbc <_fwalk_sglue>:
 8000dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	4688      	mov	r8, r1
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8000dd0:	d505      	bpl.n	8000dde <_fwalk_sglue+0x22>
 8000dd2:	6824      	ldr	r4, [r4, #0]
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	d1f7      	bne.n	8000dc8 <_fwalk_sglue+0xc>
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dde:	89ab      	ldrh	r3, [r5, #12]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d907      	bls.n	8000df4 <_fwalk_sglue+0x38>
 8000de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000de8:	3301      	adds	r3, #1
 8000dea:	d003      	beq.n	8000df4 <_fwalk_sglue+0x38>
 8000dec:	4629      	mov	r1, r5
 8000dee:	4638      	mov	r0, r7
 8000df0:	47c0      	blx	r8
 8000df2:	4306      	orrs	r6, r0
 8000df4:	3568      	adds	r5, #104	@ 0x68
 8000df6:	e7e9      	b.n	8000dcc <_fwalk_sglue+0x10>

08000df8 <iprintf>:
 8000df8:	b40f      	push	{r0, r1, r2, r3}
 8000dfa:	b507      	push	{r0, r1, r2, lr}
 8000dfc:	4906      	ldr	r1, [pc, #24]	@ (8000e18 <iprintf+0x20>)
 8000dfe:	ab04      	add	r3, sp, #16
 8000e00:	6808      	ldr	r0, [r1, #0]
 8000e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e06:	6881      	ldr	r1, [r0, #8]
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	f000 f94b 	bl	80010a4 <_vfiprintf_r>
 8000e0e:	b003      	add	sp, #12
 8000e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e14:	b004      	add	sp, #16
 8000e16:	4770      	bx	lr
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <__sread>:
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	460c      	mov	r4, r1
 8000e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e24:	f000 f868 	bl	8000ef8 <_read_r>
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	bfab      	itete	ge
 8000e2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8000e30:	181b      	addge	r3, r3, r0
 8000e32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000e36:	bfac      	ite	ge
 8000e38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e3a:	81a3      	strhlt	r3, [r4, #12]
 8000e3c:	bd10      	pop	{r4, pc}

08000e3e <__swrite>:
 8000e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e42:	461f      	mov	r7, r3
 8000e44:	898b      	ldrh	r3, [r1, #12]
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	4605      	mov	r5, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4616      	mov	r6, r2
 8000e4e:	d505      	bpl.n	8000e5c <__swrite+0x1e>
 8000e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e54:	2302      	movs	r3, #2
 8000e56:	2200      	movs	r2, #0
 8000e58:	f000 f83c 	bl	8000ed4 <_lseek_r>
 8000e5c:	89a3      	ldrh	r3, [r4, #12]
 8000e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e66:	81a3      	strh	r3, [r4, #12]
 8000e68:	4632      	mov	r2, r6
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e72:	f000 b863 	b.w	8000f3c <_write_r>

08000e76 <__sseek>:
 8000e76:	b510      	push	{r4, lr}
 8000e78:	460c      	mov	r4, r1
 8000e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e7e:	f000 f829 	bl	8000ed4 <_lseek_r>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	89a3      	ldrh	r3, [r4, #12]
 8000e86:	bf15      	itete	ne
 8000e88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e92:	81a3      	strheq	r3, [r4, #12]
 8000e94:	bf18      	it	ne
 8000e96:	81a3      	strhne	r3, [r4, #12]
 8000e98:	bd10      	pop	{r4, pc}

08000e9a <__sclose>:
 8000e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e9e:	f000 b809 	b.w	8000eb4 <_close_r>

08000ea2 <memset>:
 8000ea2:	4402      	add	r2, r0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d100      	bne.n	8000eac <memset+0xa>
 8000eaa:	4770      	bx	lr
 8000eac:	f803 1b01 	strb.w	r1, [r3], #1
 8000eb0:	e7f9      	b.n	8000ea6 <memset+0x4>
	...

08000eb4 <_close_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d06      	ldr	r5, [pc, #24]	@ (8000ed0 <_close_r+0x1c>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	602b      	str	r3, [r5, #0]
 8000ec0:	f7ff fcf7 	bl	80008b2 <_close>
 8000ec4:	1c43      	adds	r3, r0, #1
 8000ec6:	d102      	bne.n	8000ece <_close_r+0x1a>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	b103      	cbz	r3, 8000ece <_close_r+0x1a>
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	200001c0 	.word	0x200001c0

08000ed4 <_lseek_r>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4d07      	ldr	r5, [pc, #28]	@ (8000ef4 <_lseek_r+0x20>)
 8000ed8:	4604      	mov	r4, r0
 8000eda:	4608      	mov	r0, r1
 8000edc:	4611      	mov	r1, r2
 8000ede:	2200      	movs	r2, #0
 8000ee0:	602a      	str	r2, [r5, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f7ff fd0c 	bl	8000900 <_lseek>
 8000ee8:	1c43      	adds	r3, r0, #1
 8000eea:	d102      	bne.n	8000ef2 <_lseek_r+0x1e>
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	b103      	cbz	r3, 8000ef2 <_lseek_r+0x1e>
 8000ef0:	6023      	str	r3, [r4, #0]
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	200001c0 	.word	0x200001c0

08000ef8 <_read_r>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4d07      	ldr	r5, [pc, #28]	@ (8000f18 <_read_r+0x20>)
 8000efc:	4604      	mov	r4, r0
 8000efe:	4608      	mov	r0, r1
 8000f00:	4611      	mov	r1, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	602a      	str	r2, [r5, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	f7ff fc9a 	bl	8000840 <_read>
 8000f0c:	1c43      	adds	r3, r0, #1
 8000f0e:	d102      	bne.n	8000f16 <_read_r+0x1e>
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	b103      	cbz	r3, 8000f16 <_read_r+0x1e>
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
 8000f18:	200001c0 	.word	0x200001c0

08000f1c <_sbrk_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4d06      	ldr	r5, [pc, #24]	@ (8000f38 <_sbrk_r+0x1c>)
 8000f20:	2300      	movs	r3, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	602b      	str	r3, [r5, #0]
 8000f28:	f7ff fcf8 	bl	800091c <_sbrk>
 8000f2c:	1c43      	adds	r3, r0, #1
 8000f2e:	d102      	bne.n	8000f36 <_sbrk_r+0x1a>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	b103      	cbz	r3, 8000f36 <_sbrk_r+0x1a>
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	bd38      	pop	{r3, r4, r5, pc}
 8000f38:	200001c0 	.word	0x200001c0

08000f3c <_write_r>:
 8000f3c:	b538      	push	{r3, r4, r5, lr}
 8000f3e:	4d07      	ldr	r5, [pc, #28]	@ (8000f5c <_write_r+0x20>)
 8000f40:	4604      	mov	r4, r0
 8000f42:	4608      	mov	r0, r1
 8000f44:	4611      	mov	r1, r2
 8000f46:	2200      	movs	r2, #0
 8000f48:	602a      	str	r2, [r5, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f7ff fc95 	bl	800087a <_write>
 8000f50:	1c43      	adds	r3, r0, #1
 8000f52:	d102      	bne.n	8000f5a <_write_r+0x1e>
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	b103      	cbz	r3, 8000f5a <_write_r+0x1e>
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
 8000f5c:	200001c0 	.word	0x200001c0

08000f60 <__errno>:
 8000f60:	4b01      	ldr	r3, [pc, #4]	@ (8000f68 <__errno+0x8>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000000c 	.word	0x2000000c

08000f6c <__libc_init_array>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8000fa4 <__libc_init_array+0x38>)
 8000f70:	4c0d      	ldr	r4, [pc, #52]	@ (8000fa8 <__libc_init_array+0x3c>)
 8000f72:	1b64      	subs	r4, r4, r5
 8000f74:	10a4      	asrs	r4, r4, #2
 8000f76:	2600      	movs	r6, #0
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d109      	bne.n	8000f90 <__libc_init_array+0x24>
 8000f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8000fac <__libc_init_array+0x40>)
 8000f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8000fb0 <__libc_init_array+0x44>)
 8000f80:	f000 fcfa 	bl	8001978 <_init>
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	10a4      	asrs	r4, r4, #2
 8000f88:	2600      	movs	r6, #0
 8000f8a:	42a6      	cmp	r6, r4
 8000f8c:	d105      	bne.n	8000f9a <__libc_init_array+0x2e>
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f94:	4798      	blx	r3
 8000f96:	3601      	adds	r6, #1
 8000f98:	e7ee      	b.n	8000f78 <__libc_init_array+0xc>
 8000f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f9e:	4798      	blx	r3
 8000fa0:	3601      	adds	r6, #1
 8000fa2:	e7f2      	b.n	8000f8a <__libc_init_array+0x1e>
 8000fa4:	08001b14 	.word	0x08001b14
 8000fa8:	08001b14 	.word	0x08001b14
 8000fac:	08001b14 	.word	0x08001b14
 8000fb0:	08001b18 	.word	0x08001b18

08000fb4 <__retarget_lock_init_recursive>:
 8000fb4:	4770      	bx	lr

08000fb6 <__retarget_lock_acquire_recursive>:
 8000fb6:	4770      	bx	lr

08000fb8 <__retarget_lock_release_recursive>:
 8000fb8:	4770      	bx	lr
	...

08000fbc <_free_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4605      	mov	r5, r0
 8000fc0:	2900      	cmp	r1, #0
 8000fc2:	d041      	beq.n	8001048 <_free_r+0x8c>
 8000fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fc8:	1f0c      	subs	r4, r1, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bfb8      	it	lt
 8000fce:	18e4      	addlt	r4, r4, r3
 8000fd0:	f7ff fe44 	bl	8000c5c <__malloc_lock>
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <_free_r+0x90>)
 8000fd6:	6813      	ldr	r3, [r2, #0]
 8000fd8:	b933      	cbnz	r3, 8000fe8 <_free_r+0x2c>
 8000fda:	6063      	str	r3, [r4, #4]
 8000fdc:	6014      	str	r4, [r2, #0]
 8000fde:	4628      	mov	r0, r5
 8000fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fe4:	f7ff be40 	b.w	8000c68 <__malloc_unlock>
 8000fe8:	42a3      	cmp	r3, r4
 8000fea:	d908      	bls.n	8000ffe <_free_r+0x42>
 8000fec:	6820      	ldr	r0, [r4, #0]
 8000fee:	1821      	adds	r1, r4, r0
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	bf01      	itttt	eq
 8000ff4:	6819      	ldreq	r1, [r3, #0]
 8000ff6:	685b      	ldreq	r3, [r3, #4]
 8000ff8:	1809      	addeq	r1, r1, r0
 8000ffa:	6021      	streq	r1, [r4, #0]
 8000ffc:	e7ed      	b.n	8000fda <_free_r+0x1e>
 8000ffe:	461a      	mov	r2, r3
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	b10b      	cbz	r3, 8001008 <_free_r+0x4c>
 8001004:	42a3      	cmp	r3, r4
 8001006:	d9fa      	bls.n	8000ffe <_free_r+0x42>
 8001008:	6811      	ldr	r1, [r2, #0]
 800100a:	1850      	adds	r0, r2, r1
 800100c:	42a0      	cmp	r0, r4
 800100e:	d10b      	bne.n	8001028 <_free_r+0x6c>
 8001010:	6820      	ldr	r0, [r4, #0]
 8001012:	4401      	add	r1, r0
 8001014:	1850      	adds	r0, r2, r1
 8001016:	4283      	cmp	r3, r0
 8001018:	6011      	str	r1, [r2, #0]
 800101a:	d1e0      	bne.n	8000fde <_free_r+0x22>
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	6053      	str	r3, [r2, #4]
 8001022:	4408      	add	r0, r1
 8001024:	6010      	str	r0, [r2, #0]
 8001026:	e7da      	b.n	8000fde <_free_r+0x22>
 8001028:	d902      	bls.n	8001030 <_free_r+0x74>
 800102a:	230c      	movs	r3, #12
 800102c:	602b      	str	r3, [r5, #0]
 800102e:	e7d6      	b.n	8000fde <_free_r+0x22>
 8001030:	6820      	ldr	r0, [r4, #0]
 8001032:	1821      	adds	r1, r4, r0
 8001034:	428b      	cmp	r3, r1
 8001036:	bf04      	itt	eq
 8001038:	6819      	ldreq	r1, [r3, #0]
 800103a:	685b      	ldreq	r3, [r3, #4]
 800103c:	6063      	str	r3, [r4, #4]
 800103e:	bf04      	itt	eq
 8001040:	1809      	addeq	r1, r1, r0
 8001042:	6021      	streq	r1, [r4, #0]
 8001044:	6054      	str	r4, [r2, #4]
 8001046:	e7ca      	b.n	8000fde <_free_r+0x22>
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	20000080 	.word	0x20000080

08001050 <__sfputc_r>:
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	3b01      	subs	r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	b410      	push	{r4}
 8001058:	6093      	str	r3, [r2, #8]
 800105a:	da08      	bge.n	800106e <__sfputc_r+0x1e>
 800105c:	6994      	ldr	r4, [r2, #24]
 800105e:	42a3      	cmp	r3, r4
 8001060:	db01      	blt.n	8001066 <__sfputc_r+0x16>
 8001062:	290a      	cmp	r1, #10
 8001064:	d103      	bne.n	800106e <__sfputc_r+0x1e>
 8001066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800106a:	f000 bb6d 	b.w	8001748 <__swbuf_r>
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	1c58      	adds	r0, r3, #1
 8001072:	6010      	str	r0, [r2, #0]
 8001074:	7019      	strb	r1, [r3, #0]
 8001076:	4608      	mov	r0, r1
 8001078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800107c:	4770      	bx	lr

0800107e <__sfputs_r>:
 800107e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001080:	4606      	mov	r6, r0
 8001082:	460f      	mov	r7, r1
 8001084:	4614      	mov	r4, r2
 8001086:	18d5      	adds	r5, r2, r3
 8001088:	42ac      	cmp	r4, r5
 800108a:	d101      	bne.n	8001090 <__sfputs_r+0x12>
 800108c:	2000      	movs	r0, #0
 800108e:	e007      	b.n	80010a0 <__sfputs_r+0x22>
 8001090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001094:	463a      	mov	r2, r7
 8001096:	4630      	mov	r0, r6
 8001098:	f7ff ffda 	bl	8001050 <__sfputc_r>
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	d1f3      	bne.n	8001088 <__sfputs_r+0xa>
 80010a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010a4 <_vfiprintf_r>:
 80010a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a8:	460d      	mov	r5, r1
 80010aa:	b09d      	sub	sp, #116	@ 0x74
 80010ac:	4614      	mov	r4, r2
 80010ae:	4698      	mov	r8, r3
 80010b0:	4606      	mov	r6, r0
 80010b2:	b118      	cbz	r0, 80010bc <_vfiprintf_r+0x18>
 80010b4:	6a03      	ldr	r3, [r0, #32]
 80010b6:	b90b      	cbnz	r3, 80010bc <_vfiprintf_r+0x18>
 80010b8:	f7ff fe68 	bl	8000d8c <__sinit>
 80010bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010be:	07d9      	lsls	r1, r3, #31
 80010c0:	d405      	bmi.n	80010ce <_vfiprintf_r+0x2a>
 80010c2:	89ab      	ldrh	r3, [r5, #12]
 80010c4:	059a      	lsls	r2, r3, #22
 80010c6:	d402      	bmi.n	80010ce <_vfiprintf_r+0x2a>
 80010c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010ca:	f7ff ff74 	bl	8000fb6 <__retarget_lock_acquire_recursive>
 80010ce:	89ab      	ldrh	r3, [r5, #12]
 80010d0:	071b      	lsls	r3, r3, #28
 80010d2:	d501      	bpl.n	80010d8 <_vfiprintf_r+0x34>
 80010d4:	692b      	ldr	r3, [r5, #16]
 80010d6:	b99b      	cbnz	r3, 8001100 <_vfiprintf_r+0x5c>
 80010d8:	4629      	mov	r1, r5
 80010da:	4630      	mov	r0, r6
 80010dc:	f000 fb72 	bl	80017c4 <__swsetup_r>
 80010e0:	b170      	cbz	r0, 8001100 <_vfiprintf_r+0x5c>
 80010e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010e4:	07dc      	lsls	r4, r3, #31
 80010e6:	d504      	bpl.n	80010f2 <_vfiprintf_r+0x4e>
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	b01d      	add	sp, #116	@ 0x74
 80010ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010f2:	89ab      	ldrh	r3, [r5, #12]
 80010f4:	0598      	lsls	r0, r3, #22
 80010f6:	d4f7      	bmi.n	80010e8 <_vfiprintf_r+0x44>
 80010f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010fa:	f7ff ff5d 	bl	8000fb8 <__retarget_lock_release_recursive>
 80010fe:	e7f3      	b.n	80010e8 <_vfiprintf_r+0x44>
 8001100:	2300      	movs	r3, #0
 8001102:	9309      	str	r3, [sp, #36]	@ 0x24
 8001104:	2320      	movs	r3, #32
 8001106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800110a:	f8cd 800c 	str.w	r8, [sp, #12]
 800110e:	2330      	movs	r3, #48	@ 0x30
 8001110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80012c0 <_vfiprintf_r+0x21c>
 8001114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001118:	f04f 0901 	mov.w	r9, #1
 800111c:	4623      	mov	r3, r4
 800111e:	469a      	mov	sl, r3
 8001120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001124:	b10a      	cbz	r2, 800112a <_vfiprintf_r+0x86>
 8001126:	2a25      	cmp	r2, #37	@ 0x25
 8001128:	d1f9      	bne.n	800111e <_vfiprintf_r+0x7a>
 800112a:	ebba 0b04 	subs.w	fp, sl, r4
 800112e:	d00b      	beq.n	8001148 <_vfiprintf_r+0xa4>
 8001130:	465b      	mov	r3, fp
 8001132:	4622      	mov	r2, r4
 8001134:	4629      	mov	r1, r5
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff ffa1 	bl	800107e <__sfputs_r>
 800113c:	3001      	adds	r0, #1
 800113e:	f000 80a7 	beq.w	8001290 <_vfiprintf_r+0x1ec>
 8001142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001144:	445a      	add	r2, fp
 8001146:	9209      	str	r2, [sp, #36]	@ 0x24
 8001148:	f89a 3000 	ldrb.w	r3, [sl]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 809f 	beq.w	8001290 <_vfiprintf_r+0x1ec>
 8001152:	2300      	movs	r3, #0
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800115c:	f10a 0a01 	add.w	sl, sl, #1
 8001160:	9304      	str	r3, [sp, #16]
 8001162:	9307      	str	r3, [sp, #28]
 8001164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001168:	931a      	str	r3, [sp, #104]	@ 0x68
 800116a:	4654      	mov	r4, sl
 800116c:	2205      	movs	r2, #5
 800116e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001172:	4853      	ldr	r0, [pc, #332]	@ (80012c0 <_vfiprintf_r+0x21c>)
 8001174:	f7ff f84c 	bl	8000210 <memchr>
 8001178:	9a04      	ldr	r2, [sp, #16]
 800117a:	b9d8      	cbnz	r0, 80011b4 <_vfiprintf_r+0x110>
 800117c:	06d1      	lsls	r1, r2, #27
 800117e:	bf44      	itt	mi
 8001180:	2320      	movmi	r3, #32
 8001182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001186:	0713      	lsls	r3, r2, #28
 8001188:	bf44      	itt	mi
 800118a:	232b      	movmi	r3, #43	@ 0x2b
 800118c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001190:	f89a 3000 	ldrb.w	r3, [sl]
 8001194:	2b2a      	cmp	r3, #42	@ 0x2a
 8001196:	d015      	beq.n	80011c4 <_vfiprintf_r+0x120>
 8001198:	9a07      	ldr	r2, [sp, #28]
 800119a:	4654      	mov	r4, sl
 800119c:	2000      	movs	r0, #0
 800119e:	f04f 0c0a 	mov.w	ip, #10
 80011a2:	4621      	mov	r1, r4
 80011a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011a8:	3b30      	subs	r3, #48	@ 0x30
 80011aa:	2b09      	cmp	r3, #9
 80011ac:	d94b      	bls.n	8001246 <_vfiprintf_r+0x1a2>
 80011ae:	b1b0      	cbz	r0, 80011de <_vfiprintf_r+0x13a>
 80011b0:	9207      	str	r2, [sp, #28]
 80011b2:	e014      	b.n	80011de <_vfiprintf_r+0x13a>
 80011b4:	eba0 0308 	sub.w	r3, r0, r8
 80011b8:	fa09 f303 	lsl.w	r3, r9, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	9304      	str	r3, [sp, #16]
 80011c0:	46a2      	mov	sl, r4
 80011c2:	e7d2      	b.n	800116a <_vfiprintf_r+0xc6>
 80011c4:	9b03      	ldr	r3, [sp, #12]
 80011c6:	1d19      	adds	r1, r3, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	9103      	str	r1, [sp, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bfbb      	ittet	lt
 80011d0:	425b      	neglt	r3, r3
 80011d2:	f042 0202 	orrlt.w	r2, r2, #2
 80011d6:	9307      	strge	r3, [sp, #28]
 80011d8:	9307      	strlt	r3, [sp, #28]
 80011da:	bfb8      	it	lt
 80011dc:	9204      	strlt	r2, [sp, #16]
 80011de:	7823      	ldrb	r3, [r4, #0]
 80011e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80011e2:	d10a      	bne.n	80011fa <_vfiprintf_r+0x156>
 80011e4:	7863      	ldrb	r3, [r4, #1]
 80011e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80011e8:	d132      	bne.n	8001250 <_vfiprintf_r+0x1ac>
 80011ea:	9b03      	ldr	r3, [sp, #12]
 80011ec:	1d1a      	adds	r2, r3, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	9203      	str	r2, [sp, #12]
 80011f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80011f6:	3402      	adds	r4, #2
 80011f8:	9305      	str	r3, [sp, #20]
 80011fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80012d0 <_vfiprintf_r+0x22c>
 80011fe:	7821      	ldrb	r1, [r4, #0]
 8001200:	2203      	movs	r2, #3
 8001202:	4650      	mov	r0, sl
 8001204:	f7ff f804 	bl	8000210 <memchr>
 8001208:	b138      	cbz	r0, 800121a <_vfiprintf_r+0x176>
 800120a:	9b04      	ldr	r3, [sp, #16]
 800120c:	eba0 000a 	sub.w	r0, r0, sl
 8001210:	2240      	movs	r2, #64	@ 0x40
 8001212:	4082      	lsls	r2, r0
 8001214:	4313      	orrs	r3, r2
 8001216:	3401      	adds	r4, #1
 8001218:	9304      	str	r3, [sp, #16]
 800121a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800121e:	4829      	ldr	r0, [pc, #164]	@ (80012c4 <_vfiprintf_r+0x220>)
 8001220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001224:	2206      	movs	r2, #6
 8001226:	f7fe fff3 	bl	8000210 <memchr>
 800122a:	2800      	cmp	r0, #0
 800122c:	d03f      	beq.n	80012ae <_vfiprintf_r+0x20a>
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <_vfiprintf_r+0x224>)
 8001230:	bb1b      	cbnz	r3, 800127a <_vfiprintf_r+0x1d6>
 8001232:	9b03      	ldr	r3, [sp, #12]
 8001234:	3307      	adds	r3, #7
 8001236:	f023 0307 	bic.w	r3, r3, #7
 800123a:	3308      	adds	r3, #8
 800123c:	9303      	str	r3, [sp, #12]
 800123e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001240:	443b      	add	r3, r7
 8001242:	9309      	str	r3, [sp, #36]	@ 0x24
 8001244:	e76a      	b.n	800111c <_vfiprintf_r+0x78>
 8001246:	fb0c 3202 	mla	r2, ip, r2, r3
 800124a:	460c      	mov	r4, r1
 800124c:	2001      	movs	r0, #1
 800124e:	e7a8      	b.n	80011a2 <_vfiprintf_r+0xfe>
 8001250:	2300      	movs	r3, #0
 8001252:	3401      	adds	r4, #1
 8001254:	9305      	str	r3, [sp, #20]
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 0c0a 	mov.w	ip, #10
 800125c:	4620      	mov	r0, r4
 800125e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001262:	3a30      	subs	r2, #48	@ 0x30
 8001264:	2a09      	cmp	r2, #9
 8001266:	d903      	bls.n	8001270 <_vfiprintf_r+0x1cc>
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0c6      	beq.n	80011fa <_vfiprintf_r+0x156>
 800126c:	9105      	str	r1, [sp, #20]
 800126e:	e7c4      	b.n	80011fa <_vfiprintf_r+0x156>
 8001270:	fb0c 2101 	mla	r1, ip, r1, r2
 8001274:	4604      	mov	r4, r0
 8001276:	2301      	movs	r3, #1
 8001278:	e7f0      	b.n	800125c <_vfiprintf_r+0x1b8>
 800127a:	ab03      	add	r3, sp, #12
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	462a      	mov	r2, r5
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <_vfiprintf_r+0x228>)
 8001282:	a904      	add	r1, sp, #16
 8001284:	4630      	mov	r0, r6
 8001286:	f3af 8000 	nop.w
 800128a:	4607      	mov	r7, r0
 800128c:	1c78      	adds	r0, r7, #1
 800128e:	d1d6      	bne.n	800123e <_vfiprintf_r+0x19a>
 8001290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001292:	07d9      	lsls	r1, r3, #31
 8001294:	d405      	bmi.n	80012a2 <_vfiprintf_r+0x1fe>
 8001296:	89ab      	ldrh	r3, [r5, #12]
 8001298:	059a      	lsls	r2, r3, #22
 800129a:	d402      	bmi.n	80012a2 <_vfiprintf_r+0x1fe>
 800129c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800129e:	f7ff fe8b 	bl	8000fb8 <__retarget_lock_release_recursive>
 80012a2:	89ab      	ldrh	r3, [r5, #12]
 80012a4:	065b      	lsls	r3, r3, #25
 80012a6:	f53f af1f 	bmi.w	80010e8 <_vfiprintf_r+0x44>
 80012aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80012ac:	e71e      	b.n	80010ec <_vfiprintf_r+0x48>
 80012ae:	ab03      	add	r3, sp, #12
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	462a      	mov	r2, r5
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <_vfiprintf_r+0x228>)
 80012b6:	a904      	add	r1, sp, #16
 80012b8:	4630      	mov	r0, r6
 80012ba:	f000 f879 	bl	80013b0 <_printf_i>
 80012be:	e7e4      	b.n	800128a <_vfiprintf_r+0x1e6>
 80012c0:	08001ad6 	.word	0x08001ad6
 80012c4:	08001ae0 	.word	0x08001ae0
 80012c8:	00000000 	.word	0x00000000
 80012cc:	0800107f 	.word	0x0800107f
 80012d0:	08001adc 	.word	0x08001adc

080012d4 <_printf_common>:
 80012d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012d8:	4616      	mov	r6, r2
 80012da:	4698      	mov	r8, r3
 80012dc:	688a      	ldr	r2, [r1, #8]
 80012de:	690b      	ldr	r3, [r1, #16]
 80012e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80012e4:	4293      	cmp	r3, r2
 80012e6:	bfb8      	it	lt
 80012e8:	4613      	movlt	r3, r2
 80012ea:	6033      	str	r3, [r6, #0]
 80012ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80012f0:	4607      	mov	r7, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	b10a      	cbz	r2, 80012fa <_printf_common+0x26>
 80012f6:	3301      	adds	r3, #1
 80012f8:	6033      	str	r3, [r6, #0]
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	0699      	lsls	r1, r3, #26
 80012fe:	bf42      	ittt	mi
 8001300:	6833      	ldrmi	r3, [r6, #0]
 8001302:	3302      	addmi	r3, #2
 8001304:	6033      	strmi	r3, [r6, #0]
 8001306:	6825      	ldr	r5, [r4, #0]
 8001308:	f015 0506 	ands.w	r5, r5, #6
 800130c:	d106      	bne.n	800131c <_printf_common+0x48>
 800130e:	f104 0a19 	add.w	sl, r4, #25
 8001312:	68e3      	ldr	r3, [r4, #12]
 8001314:	6832      	ldr	r2, [r6, #0]
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	42ab      	cmp	r3, r5
 800131a:	dc26      	bgt.n	800136a <_printf_common+0x96>
 800131c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	3b00      	subs	r3, #0
 8001324:	bf18      	it	ne
 8001326:	2301      	movne	r3, #1
 8001328:	0692      	lsls	r2, r2, #26
 800132a:	d42b      	bmi.n	8001384 <_printf_common+0xb0>
 800132c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001330:	4641      	mov	r1, r8
 8001332:	4638      	mov	r0, r7
 8001334:	47c8      	blx	r9
 8001336:	3001      	adds	r0, #1
 8001338:	d01e      	beq.n	8001378 <_printf_common+0xa4>
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	6922      	ldr	r2, [r4, #16]
 800133e:	f003 0306 	and.w	r3, r3, #6
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf02      	ittt	eq
 8001346:	68e5      	ldreq	r5, [r4, #12]
 8001348:	6833      	ldreq	r3, [r6, #0]
 800134a:	1aed      	subeq	r5, r5, r3
 800134c:	68a3      	ldr	r3, [r4, #8]
 800134e:	bf0c      	ite	eq
 8001350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001354:	2500      	movne	r5, #0
 8001356:	4293      	cmp	r3, r2
 8001358:	bfc4      	itt	gt
 800135a:	1a9b      	subgt	r3, r3, r2
 800135c:	18ed      	addgt	r5, r5, r3
 800135e:	2600      	movs	r6, #0
 8001360:	341a      	adds	r4, #26
 8001362:	42b5      	cmp	r5, r6
 8001364:	d11a      	bne.n	800139c <_printf_common+0xc8>
 8001366:	2000      	movs	r0, #0
 8001368:	e008      	b.n	800137c <_printf_common+0xa8>
 800136a:	2301      	movs	r3, #1
 800136c:	4652      	mov	r2, sl
 800136e:	4641      	mov	r1, r8
 8001370:	4638      	mov	r0, r7
 8001372:	47c8      	blx	r9
 8001374:	3001      	adds	r0, #1
 8001376:	d103      	bne.n	8001380 <_printf_common+0xac>
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001380:	3501      	adds	r5, #1
 8001382:	e7c6      	b.n	8001312 <_printf_common+0x3e>
 8001384:	18e1      	adds	r1, r4, r3
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	2030      	movs	r0, #48	@ 0x30
 800138a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800138e:	4422      	add	r2, r4
 8001390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001398:	3302      	adds	r3, #2
 800139a:	e7c7      	b.n	800132c <_printf_common+0x58>
 800139c:	2301      	movs	r3, #1
 800139e:	4622      	mov	r2, r4
 80013a0:	4641      	mov	r1, r8
 80013a2:	4638      	mov	r0, r7
 80013a4:	47c8      	blx	r9
 80013a6:	3001      	adds	r0, #1
 80013a8:	d0e6      	beq.n	8001378 <_printf_common+0xa4>
 80013aa:	3601      	adds	r6, #1
 80013ac:	e7d9      	b.n	8001362 <_printf_common+0x8e>
	...

080013b0 <_printf_i>:
 80013b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013b4:	7e0f      	ldrb	r7, [r1, #24]
 80013b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80013b8:	2f78      	cmp	r7, #120	@ 0x78
 80013ba:	4691      	mov	r9, r2
 80013bc:	4680      	mov	r8, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	469a      	mov	sl, r3
 80013c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80013c6:	d807      	bhi.n	80013d8 <_printf_i+0x28>
 80013c8:	2f62      	cmp	r7, #98	@ 0x62
 80013ca:	d80a      	bhi.n	80013e2 <_printf_i+0x32>
 80013cc:	2f00      	cmp	r7, #0
 80013ce:	f000 80d2 	beq.w	8001576 <_printf_i+0x1c6>
 80013d2:	2f58      	cmp	r7, #88	@ 0x58
 80013d4:	f000 80b9 	beq.w	800154a <_printf_i+0x19a>
 80013d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80013e0:	e03a      	b.n	8001458 <_printf_i+0xa8>
 80013e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80013e6:	2b15      	cmp	r3, #21
 80013e8:	d8f6      	bhi.n	80013d8 <_printf_i+0x28>
 80013ea:	a101      	add	r1, pc, #4	@ (adr r1, 80013f0 <_printf_i+0x40>)
 80013ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013f0:	08001449 	.word	0x08001449
 80013f4:	0800145d 	.word	0x0800145d
 80013f8:	080013d9 	.word	0x080013d9
 80013fc:	080013d9 	.word	0x080013d9
 8001400:	080013d9 	.word	0x080013d9
 8001404:	080013d9 	.word	0x080013d9
 8001408:	0800145d 	.word	0x0800145d
 800140c:	080013d9 	.word	0x080013d9
 8001410:	080013d9 	.word	0x080013d9
 8001414:	080013d9 	.word	0x080013d9
 8001418:	080013d9 	.word	0x080013d9
 800141c:	0800155d 	.word	0x0800155d
 8001420:	08001487 	.word	0x08001487
 8001424:	08001517 	.word	0x08001517
 8001428:	080013d9 	.word	0x080013d9
 800142c:	080013d9 	.word	0x080013d9
 8001430:	0800157f 	.word	0x0800157f
 8001434:	080013d9 	.word	0x080013d9
 8001438:	08001487 	.word	0x08001487
 800143c:	080013d9 	.word	0x080013d9
 8001440:	080013d9 	.word	0x080013d9
 8001444:	0800151f 	.word	0x0800151f
 8001448:	6833      	ldr	r3, [r6, #0]
 800144a:	1d1a      	adds	r2, r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6032      	str	r2, [r6, #0]
 8001450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001458:	2301      	movs	r3, #1
 800145a:	e09d      	b.n	8001598 <_printf_i+0x1e8>
 800145c:	6833      	ldr	r3, [r6, #0]
 800145e:	6820      	ldr	r0, [r4, #0]
 8001460:	1d19      	adds	r1, r3, #4
 8001462:	6031      	str	r1, [r6, #0]
 8001464:	0606      	lsls	r6, r0, #24
 8001466:	d501      	bpl.n	800146c <_printf_i+0xbc>
 8001468:	681d      	ldr	r5, [r3, #0]
 800146a:	e003      	b.n	8001474 <_printf_i+0xc4>
 800146c:	0645      	lsls	r5, r0, #25
 800146e:	d5fb      	bpl.n	8001468 <_printf_i+0xb8>
 8001470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001474:	2d00      	cmp	r5, #0
 8001476:	da03      	bge.n	8001480 <_printf_i+0xd0>
 8001478:	232d      	movs	r3, #45	@ 0x2d
 800147a:	426d      	negs	r5, r5
 800147c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001480:	4859      	ldr	r0, [pc, #356]	@ (80015e8 <_printf_i+0x238>)
 8001482:	230a      	movs	r3, #10
 8001484:	e011      	b.n	80014aa <_printf_i+0xfa>
 8001486:	6821      	ldr	r1, [r4, #0]
 8001488:	6833      	ldr	r3, [r6, #0]
 800148a:	0608      	lsls	r0, r1, #24
 800148c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001490:	d402      	bmi.n	8001498 <_printf_i+0xe8>
 8001492:	0649      	lsls	r1, r1, #25
 8001494:	bf48      	it	mi
 8001496:	b2ad      	uxthmi	r5, r5
 8001498:	2f6f      	cmp	r7, #111	@ 0x6f
 800149a:	4853      	ldr	r0, [pc, #332]	@ (80015e8 <_printf_i+0x238>)
 800149c:	6033      	str	r3, [r6, #0]
 800149e:	bf14      	ite	ne
 80014a0:	230a      	movne	r3, #10
 80014a2:	2308      	moveq	r3, #8
 80014a4:	2100      	movs	r1, #0
 80014a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80014aa:	6866      	ldr	r6, [r4, #4]
 80014ac:	60a6      	str	r6, [r4, #8]
 80014ae:	2e00      	cmp	r6, #0
 80014b0:	bfa2      	ittt	ge
 80014b2:	6821      	ldrge	r1, [r4, #0]
 80014b4:	f021 0104 	bicge.w	r1, r1, #4
 80014b8:	6021      	strge	r1, [r4, #0]
 80014ba:	b90d      	cbnz	r5, 80014c0 <_printf_i+0x110>
 80014bc:	2e00      	cmp	r6, #0
 80014be:	d04b      	beq.n	8001558 <_printf_i+0x1a8>
 80014c0:	4616      	mov	r6, r2
 80014c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80014c6:	fb03 5711 	mls	r7, r3, r1, r5
 80014ca:	5dc7      	ldrb	r7, [r0, r7]
 80014cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80014d0:	462f      	mov	r7, r5
 80014d2:	42bb      	cmp	r3, r7
 80014d4:	460d      	mov	r5, r1
 80014d6:	d9f4      	bls.n	80014c2 <_printf_i+0x112>
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d10b      	bne.n	80014f4 <_printf_i+0x144>
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	07df      	lsls	r7, r3, #31
 80014e0:	d508      	bpl.n	80014f4 <_printf_i+0x144>
 80014e2:	6923      	ldr	r3, [r4, #16]
 80014e4:	6861      	ldr	r1, [r4, #4]
 80014e6:	4299      	cmp	r1, r3
 80014e8:	bfde      	ittt	le
 80014ea:	2330      	movle	r3, #48	@ 0x30
 80014ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014f4:	1b92      	subs	r2, r2, r6
 80014f6:	6122      	str	r2, [r4, #16]
 80014f8:	f8cd a000 	str.w	sl, [sp]
 80014fc:	464b      	mov	r3, r9
 80014fe:	aa03      	add	r2, sp, #12
 8001500:	4621      	mov	r1, r4
 8001502:	4640      	mov	r0, r8
 8001504:	f7ff fee6 	bl	80012d4 <_printf_common>
 8001508:	3001      	adds	r0, #1
 800150a:	d14a      	bne.n	80015a2 <_printf_i+0x1f2>
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	b004      	add	sp, #16
 8001512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6023      	str	r3, [r4, #0]
 800151e:	4833      	ldr	r0, [pc, #204]	@ (80015ec <_printf_i+0x23c>)
 8001520:	2778      	movs	r7, #120	@ 0x78
 8001522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	6831      	ldr	r1, [r6, #0]
 800152a:	061f      	lsls	r7, r3, #24
 800152c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001530:	d402      	bmi.n	8001538 <_printf_i+0x188>
 8001532:	065f      	lsls	r7, r3, #25
 8001534:	bf48      	it	mi
 8001536:	b2ad      	uxthmi	r5, r5
 8001538:	6031      	str	r1, [r6, #0]
 800153a:	07d9      	lsls	r1, r3, #31
 800153c:	bf44      	itt	mi
 800153e:	f043 0320 	orrmi.w	r3, r3, #32
 8001542:	6023      	strmi	r3, [r4, #0]
 8001544:	b11d      	cbz	r5, 800154e <_printf_i+0x19e>
 8001546:	2310      	movs	r3, #16
 8001548:	e7ac      	b.n	80014a4 <_printf_i+0xf4>
 800154a:	4827      	ldr	r0, [pc, #156]	@ (80015e8 <_printf_i+0x238>)
 800154c:	e7e9      	b.n	8001522 <_printf_i+0x172>
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f023 0320 	bic.w	r3, r3, #32
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	e7f6      	b.n	8001546 <_printf_i+0x196>
 8001558:	4616      	mov	r6, r2
 800155a:	e7bd      	b.n	80014d8 <_printf_i+0x128>
 800155c:	6833      	ldr	r3, [r6, #0]
 800155e:	6825      	ldr	r5, [r4, #0]
 8001560:	6961      	ldr	r1, [r4, #20]
 8001562:	1d18      	adds	r0, r3, #4
 8001564:	6030      	str	r0, [r6, #0]
 8001566:	062e      	lsls	r6, r5, #24
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	d501      	bpl.n	8001570 <_printf_i+0x1c0>
 800156c:	6019      	str	r1, [r3, #0]
 800156e:	e002      	b.n	8001576 <_printf_i+0x1c6>
 8001570:	0668      	lsls	r0, r5, #25
 8001572:	d5fb      	bpl.n	800156c <_printf_i+0x1bc>
 8001574:	8019      	strh	r1, [r3, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	6123      	str	r3, [r4, #16]
 800157a:	4616      	mov	r6, r2
 800157c:	e7bc      	b.n	80014f8 <_printf_i+0x148>
 800157e:	6833      	ldr	r3, [r6, #0]
 8001580:	1d1a      	adds	r2, r3, #4
 8001582:	6032      	str	r2, [r6, #0]
 8001584:	681e      	ldr	r6, [r3, #0]
 8001586:	6862      	ldr	r2, [r4, #4]
 8001588:	2100      	movs	r1, #0
 800158a:	4630      	mov	r0, r6
 800158c:	f7fe fe40 	bl	8000210 <memchr>
 8001590:	b108      	cbz	r0, 8001596 <_printf_i+0x1e6>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	6060      	str	r0, [r4, #4]
 8001596:	6863      	ldr	r3, [r4, #4]
 8001598:	6123      	str	r3, [r4, #16]
 800159a:	2300      	movs	r3, #0
 800159c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015a0:	e7aa      	b.n	80014f8 <_printf_i+0x148>
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	4632      	mov	r2, r6
 80015a6:	4649      	mov	r1, r9
 80015a8:	4640      	mov	r0, r8
 80015aa:	47d0      	blx	sl
 80015ac:	3001      	adds	r0, #1
 80015ae:	d0ad      	beq.n	800150c <_printf_i+0x15c>
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	079b      	lsls	r3, r3, #30
 80015b4:	d413      	bmi.n	80015de <_printf_i+0x22e>
 80015b6:	68e0      	ldr	r0, [r4, #12]
 80015b8:	9b03      	ldr	r3, [sp, #12]
 80015ba:	4298      	cmp	r0, r3
 80015bc:	bfb8      	it	lt
 80015be:	4618      	movlt	r0, r3
 80015c0:	e7a6      	b.n	8001510 <_printf_i+0x160>
 80015c2:	2301      	movs	r3, #1
 80015c4:	4632      	mov	r2, r6
 80015c6:	4649      	mov	r1, r9
 80015c8:	4640      	mov	r0, r8
 80015ca:	47d0      	blx	sl
 80015cc:	3001      	adds	r0, #1
 80015ce:	d09d      	beq.n	800150c <_printf_i+0x15c>
 80015d0:	3501      	adds	r5, #1
 80015d2:	68e3      	ldr	r3, [r4, #12]
 80015d4:	9903      	ldr	r1, [sp, #12]
 80015d6:	1a5b      	subs	r3, r3, r1
 80015d8:	42ab      	cmp	r3, r5
 80015da:	dcf2      	bgt.n	80015c2 <_printf_i+0x212>
 80015dc:	e7eb      	b.n	80015b6 <_printf_i+0x206>
 80015de:	2500      	movs	r5, #0
 80015e0:	f104 0619 	add.w	r6, r4, #25
 80015e4:	e7f5      	b.n	80015d2 <_printf_i+0x222>
 80015e6:	bf00      	nop
 80015e8:	08001ae7 	.word	0x08001ae7
 80015ec:	08001af8 	.word	0x08001af8

080015f0 <__sflush_r>:
 80015f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80015f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f8:	0716      	lsls	r6, r2, #28
 80015fa:	4605      	mov	r5, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	d454      	bmi.n	80016aa <__sflush_r+0xba>
 8001600:	684b      	ldr	r3, [r1, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dc02      	bgt.n	800160c <__sflush_r+0x1c>
 8001606:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	dd48      	ble.n	800169e <__sflush_r+0xae>
 800160c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800160e:	2e00      	cmp	r6, #0
 8001610:	d045      	beq.n	800169e <__sflush_r+0xae>
 8001612:	2300      	movs	r3, #0
 8001614:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001618:	682f      	ldr	r7, [r5, #0]
 800161a:	6a21      	ldr	r1, [r4, #32]
 800161c:	602b      	str	r3, [r5, #0]
 800161e:	d030      	beq.n	8001682 <__sflush_r+0x92>
 8001620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001622:	89a3      	ldrh	r3, [r4, #12]
 8001624:	0759      	lsls	r1, r3, #29
 8001626:	d505      	bpl.n	8001634 <__sflush_r+0x44>
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	1ad2      	subs	r2, r2, r3
 800162c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800162e:	b10b      	cbz	r3, 8001634 <__sflush_r+0x44>
 8001630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001632:	1ad2      	subs	r2, r2, r3
 8001634:	2300      	movs	r3, #0
 8001636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001638:	6a21      	ldr	r1, [r4, #32]
 800163a:	4628      	mov	r0, r5
 800163c:	47b0      	blx	r6
 800163e:	1c43      	adds	r3, r0, #1
 8001640:	89a3      	ldrh	r3, [r4, #12]
 8001642:	d106      	bne.n	8001652 <__sflush_r+0x62>
 8001644:	6829      	ldr	r1, [r5, #0]
 8001646:	291d      	cmp	r1, #29
 8001648:	d82b      	bhi.n	80016a2 <__sflush_r+0xb2>
 800164a:	4a2a      	ldr	r2, [pc, #168]	@ (80016f4 <__sflush_r+0x104>)
 800164c:	410a      	asrs	r2, r1
 800164e:	07d6      	lsls	r6, r2, #31
 8001650:	d427      	bmi.n	80016a2 <__sflush_r+0xb2>
 8001652:	2200      	movs	r2, #0
 8001654:	6062      	str	r2, [r4, #4]
 8001656:	04d9      	lsls	r1, r3, #19
 8001658:	6922      	ldr	r2, [r4, #16]
 800165a:	6022      	str	r2, [r4, #0]
 800165c:	d504      	bpl.n	8001668 <__sflush_r+0x78>
 800165e:	1c42      	adds	r2, r0, #1
 8001660:	d101      	bne.n	8001666 <__sflush_r+0x76>
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	b903      	cbnz	r3, 8001668 <__sflush_r+0x78>
 8001666:	6560      	str	r0, [r4, #84]	@ 0x54
 8001668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800166a:	602f      	str	r7, [r5, #0]
 800166c:	b1b9      	cbz	r1, 800169e <__sflush_r+0xae>
 800166e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001672:	4299      	cmp	r1, r3
 8001674:	d002      	beq.n	800167c <__sflush_r+0x8c>
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff fca0 	bl	8000fbc <_free_r>
 800167c:	2300      	movs	r3, #0
 800167e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001680:	e00d      	b.n	800169e <__sflush_r+0xae>
 8001682:	2301      	movs	r3, #1
 8001684:	4628      	mov	r0, r5
 8001686:	47b0      	blx	r6
 8001688:	4602      	mov	r2, r0
 800168a:	1c50      	adds	r0, r2, #1
 800168c:	d1c9      	bne.n	8001622 <__sflush_r+0x32>
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0c6      	beq.n	8001622 <__sflush_r+0x32>
 8001694:	2b1d      	cmp	r3, #29
 8001696:	d001      	beq.n	800169c <__sflush_r+0xac>
 8001698:	2b16      	cmp	r3, #22
 800169a:	d11e      	bne.n	80016da <__sflush_r+0xea>
 800169c:	602f      	str	r7, [r5, #0]
 800169e:	2000      	movs	r0, #0
 80016a0:	e022      	b.n	80016e8 <__sflush_r+0xf8>
 80016a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	e01b      	b.n	80016e2 <__sflush_r+0xf2>
 80016aa:	690f      	ldr	r7, [r1, #16]
 80016ac:	2f00      	cmp	r7, #0
 80016ae:	d0f6      	beq.n	800169e <__sflush_r+0xae>
 80016b0:	0793      	lsls	r3, r2, #30
 80016b2:	680e      	ldr	r6, [r1, #0]
 80016b4:	bf08      	it	eq
 80016b6:	694b      	ldreq	r3, [r1, #20]
 80016b8:	600f      	str	r7, [r1, #0]
 80016ba:	bf18      	it	ne
 80016bc:	2300      	movne	r3, #0
 80016be:	eba6 0807 	sub.w	r8, r6, r7
 80016c2:	608b      	str	r3, [r1, #8]
 80016c4:	f1b8 0f00 	cmp.w	r8, #0
 80016c8:	dde9      	ble.n	800169e <__sflush_r+0xae>
 80016ca:	6a21      	ldr	r1, [r4, #32]
 80016cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80016ce:	4643      	mov	r3, r8
 80016d0:	463a      	mov	r2, r7
 80016d2:	4628      	mov	r0, r5
 80016d4:	47b0      	blx	r6
 80016d6:	2800      	cmp	r0, #0
 80016d8:	dc08      	bgt.n	80016ec <__sflush_r+0xfc>
 80016da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016e2:	81a3      	strh	r3, [r4, #12]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ec:	4407      	add	r7, r0
 80016ee:	eba8 0800 	sub.w	r8, r8, r0
 80016f2:	e7e7      	b.n	80016c4 <__sflush_r+0xd4>
 80016f4:	dfbffffe 	.word	0xdfbffffe

080016f8 <_fflush_r>:
 80016f8:	b538      	push	{r3, r4, r5, lr}
 80016fa:	690b      	ldr	r3, [r1, #16]
 80016fc:	4605      	mov	r5, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	b913      	cbnz	r3, 8001708 <_fflush_r+0x10>
 8001702:	2500      	movs	r5, #0
 8001704:	4628      	mov	r0, r5
 8001706:	bd38      	pop	{r3, r4, r5, pc}
 8001708:	b118      	cbz	r0, 8001712 <_fflush_r+0x1a>
 800170a:	6a03      	ldr	r3, [r0, #32]
 800170c:	b90b      	cbnz	r3, 8001712 <_fflush_r+0x1a>
 800170e:	f7ff fb3d 	bl	8000d8c <__sinit>
 8001712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f3      	beq.n	8001702 <_fflush_r+0xa>
 800171a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800171c:	07d0      	lsls	r0, r2, #31
 800171e:	d404      	bmi.n	800172a <_fflush_r+0x32>
 8001720:	0599      	lsls	r1, r3, #22
 8001722:	d402      	bmi.n	800172a <_fflush_r+0x32>
 8001724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001726:	f7ff fc46 	bl	8000fb6 <__retarget_lock_acquire_recursive>
 800172a:	4628      	mov	r0, r5
 800172c:	4621      	mov	r1, r4
 800172e:	f7ff ff5f 	bl	80015f0 <__sflush_r>
 8001732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001734:	07da      	lsls	r2, r3, #31
 8001736:	4605      	mov	r5, r0
 8001738:	d4e4      	bmi.n	8001704 <_fflush_r+0xc>
 800173a:	89a3      	ldrh	r3, [r4, #12]
 800173c:	059b      	lsls	r3, r3, #22
 800173e:	d4e1      	bmi.n	8001704 <_fflush_r+0xc>
 8001740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001742:	f7ff fc39 	bl	8000fb8 <__retarget_lock_release_recursive>
 8001746:	e7dd      	b.n	8001704 <_fflush_r+0xc>

08001748 <__swbuf_r>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	460e      	mov	r6, r1
 800174c:	4614      	mov	r4, r2
 800174e:	4605      	mov	r5, r0
 8001750:	b118      	cbz	r0, 800175a <__swbuf_r+0x12>
 8001752:	6a03      	ldr	r3, [r0, #32]
 8001754:	b90b      	cbnz	r3, 800175a <__swbuf_r+0x12>
 8001756:	f7ff fb19 	bl	8000d8c <__sinit>
 800175a:	69a3      	ldr	r3, [r4, #24]
 800175c:	60a3      	str	r3, [r4, #8]
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	071a      	lsls	r2, r3, #28
 8001762:	d501      	bpl.n	8001768 <__swbuf_r+0x20>
 8001764:	6923      	ldr	r3, [r4, #16]
 8001766:	b943      	cbnz	r3, 800177a <__swbuf_r+0x32>
 8001768:	4621      	mov	r1, r4
 800176a:	4628      	mov	r0, r5
 800176c:	f000 f82a 	bl	80017c4 <__swsetup_r>
 8001770:	b118      	cbz	r0, 800177a <__swbuf_r+0x32>
 8001772:	f04f 37ff 	mov.w	r7, #4294967295
 8001776:	4638      	mov	r0, r7
 8001778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	6922      	ldr	r2, [r4, #16]
 800177e:	1a98      	subs	r0, r3, r2
 8001780:	6963      	ldr	r3, [r4, #20]
 8001782:	b2f6      	uxtb	r6, r6
 8001784:	4283      	cmp	r3, r0
 8001786:	4637      	mov	r7, r6
 8001788:	dc05      	bgt.n	8001796 <__swbuf_r+0x4e>
 800178a:	4621      	mov	r1, r4
 800178c:	4628      	mov	r0, r5
 800178e:	f7ff ffb3 	bl	80016f8 <_fflush_r>
 8001792:	2800      	cmp	r0, #0
 8001794:	d1ed      	bne.n	8001772 <__swbuf_r+0x2a>
 8001796:	68a3      	ldr	r3, [r4, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60a3      	str	r3, [r4, #8]
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	6022      	str	r2, [r4, #0]
 80017a2:	701e      	strb	r6, [r3, #0]
 80017a4:	6962      	ldr	r2, [r4, #20]
 80017a6:	1c43      	adds	r3, r0, #1
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d004      	beq.n	80017b6 <__swbuf_r+0x6e>
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	07db      	lsls	r3, r3, #31
 80017b0:	d5e1      	bpl.n	8001776 <__swbuf_r+0x2e>
 80017b2:	2e0a      	cmp	r6, #10
 80017b4:	d1df      	bne.n	8001776 <__swbuf_r+0x2e>
 80017b6:	4621      	mov	r1, r4
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7ff ff9d 	bl	80016f8 <_fflush_r>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d0d9      	beq.n	8001776 <__swbuf_r+0x2e>
 80017c2:	e7d6      	b.n	8001772 <__swbuf_r+0x2a>

080017c4 <__swsetup_r>:
 80017c4:	b538      	push	{r3, r4, r5, lr}
 80017c6:	4b29      	ldr	r3, [pc, #164]	@ (800186c <__swsetup_r+0xa8>)
 80017c8:	4605      	mov	r5, r0
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	460c      	mov	r4, r1
 80017ce:	b118      	cbz	r0, 80017d8 <__swsetup_r+0x14>
 80017d0:	6a03      	ldr	r3, [r0, #32]
 80017d2:	b90b      	cbnz	r3, 80017d8 <__swsetup_r+0x14>
 80017d4:	f7ff fada 	bl	8000d8c <__sinit>
 80017d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017dc:	0719      	lsls	r1, r3, #28
 80017de:	d422      	bmi.n	8001826 <__swsetup_r+0x62>
 80017e0:	06da      	lsls	r2, r3, #27
 80017e2:	d407      	bmi.n	80017f4 <__swsetup_r+0x30>
 80017e4:	2209      	movs	r2, #9
 80017e6:	602a      	str	r2, [r5, #0]
 80017e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ec:	81a3      	strh	r3, [r4, #12]
 80017ee:	f04f 30ff 	mov.w	r0, #4294967295
 80017f2:	e033      	b.n	800185c <__swsetup_r+0x98>
 80017f4:	0758      	lsls	r0, r3, #29
 80017f6:	d512      	bpl.n	800181e <__swsetup_r+0x5a>
 80017f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017fa:	b141      	cbz	r1, 800180e <__swsetup_r+0x4a>
 80017fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001800:	4299      	cmp	r1, r3
 8001802:	d002      	beq.n	800180a <__swsetup_r+0x46>
 8001804:	4628      	mov	r0, r5
 8001806:	f7ff fbd9 	bl	8000fbc <_free_r>
 800180a:	2300      	movs	r3, #0
 800180c:	6363      	str	r3, [r4, #52]	@ 0x34
 800180e:	89a3      	ldrh	r3, [r4, #12]
 8001810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001814:	81a3      	strh	r3, [r4, #12]
 8001816:	2300      	movs	r3, #0
 8001818:	6063      	str	r3, [r4, #4]
 800181a:	6923      	ldr	r3, [r4, #16]
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	89a3      	ldrh	r3, [r4, #12]
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	81a3      	strh	r3, [r4, #12]
 8001826:	6923      	ldr	r3, [r4, #16]
 8001828:	b94b      	cbnz	r3, 800183e <__swsetup_r+0x7a>
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001834:	d003      	beq.n	800183e <__swsetup_r+0x7a>
 8001836:	4621      	mov	r1, r4
 8001838:	4628      	mov	r0, r5
 800183a:	f000 f83f 	bl	80018bc <__smakebuf_r>
 800183e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001842:	f013 0201 	ands.w	r2, r3, #1
 8001846:	d00a      	beq.n	800185e <__swsetup_r+0x9a>
 8001848:	2200      	movs	r2, #0
 800184a:	60a2      	str	r2, [r4, #8]
 800184c:	6962      	ldr	r2, [r4, #20]
 800184e:	4252      	negs	r2, r2
 8001850:	61a2      	str	r2, [r4, #24]
 8001852:	6922      	ldr	r2, [r4, #16]
 8001854:	b942      	cbnz	r2, 8001868 <__swsetup_r+0xa4>
 8001856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800185a:	d1c5      	bne.n	80017e8 <__swsetup_r+0x24>
 800185c:	bd38      	pop	{r3, r4, r5, pc}
 800185e:	0799      	lsls	r1, r3, #30
 8001860:	bf58      	it	pl
 8001862:	6962      	ldrpl	r2, [r4, #20]
 8001864:	60a2      	str	r2, [r4, #8]
 8001866:	e7f4      	b.n	8001852 <__swsetup_r+0x8e>
 8001868:	2000      	movs	r0, #0
 800186a:	e7f7      	b.n	800185c <__swsetup_r+0x98>
 800186c:	2000000c 	.word	0x2000000c

08001870 <__swhatbuf_r>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	460c      	mov	r4, r1
 8001874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001878:	2900      	cmp	r1, #0
 800187a:	b096      	sub	sp, #88	@ 0x58
 800187c:	4615      	mov	r5, r2
 800187e:	461e      	mov	r6, r3
 8001880:	da0d      	bge.n	800189e <__swhatbuf_r+0x2e>
 8001882:	89a3      	ldrh	r3, [r4, #12]
 8001884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	bf14      	ite	ne
 800188e:	2340      	movne	r3, #64	@ 0x40
 8001890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001894:	2000      	movs	r0, #0
 8001896:	6031      	str	r1, [r6, #0]
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	b016      	add	sp, #88	@ 0x58
 800189c:	bd70      	pop	{r4, r5, r6, pc}
 800189e:	466a      	mov	r2, sp
 80018a0:	f000 f848 	bl	8001934 <_fstat_r>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	dbec      	blt.n	8001882 <__swhatbuf_r+0x12>
 80018a8:	9901      	ldr	r1, [sp, #4]
 80018aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80018ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80018b2:	4259      	negs	r1, r3
 80018b4:	4159      	adcs	r1, r3
 80018b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ba:	e7eb      	b.n	8001894 <__swhatbuf_r+0x24>

080018bc <__smakebuf_r>:
 80018bc:	898b      	ldrh	r3, [r1, #12]
 80018be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018c0:	079d      	lsls	r5, r3, #30
 80018c2:	4606      	mov	r6, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	d507      	bpl.n	80018d8 <__smakebuf_r+0x1c>
 80018c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	6123      	str	r3, [r4, #16]
 80018d0:	2301      	movs	r3, #1
 80018d2:	6163      	str	r3, [r4, #20]
 80018d4:	b003      	add	sp, #12
 80018d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d8:	ab01      	add	r3, sp, #4
 80018da:	466a      	mov	r2, sp
 80018dc:	f7ff ffc8 	bl	8001870 <__swhatbuf_r>
 80018e0:	9f00      	ldr	r7, [sp, #0]
 80018e2:	4605      	mov	r5, r0
 80018e4:	4639      	mov	r1, r7
 80018e6:	4630      	mov	r0, r6
 80018e8:	f7ff f938 	bl	8000b5c <_malloc_r>
 80018ec:	b948      	cbnz	r0, 8001902 <__smakebuf_r+0x46>
 80018ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018f2:	059a      	lsls	r2, r3, #22
 80018f4:	d4ee      	bmi.n	80018d4 <__smakebuf_r+0x18>
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	81a3      	strh	r3, [r4, #12]
 8001900:	e7e2      	b.n	80018c8 <__smakebuf_r+0xc>
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	6020      	str	r0, [r4, #0]
 8001906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190a:	81a3      	strh	r3, [r4, #12]
 800190c:	9b01      	ldr	r3, [sp, #4]
 800190e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001912:	b15b      	cbz	r3, 800192c <__smakebuf_r+0x70>
 8001914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001918:	4630      	mov	r0, r6
 800191a:	f000 f81d 	bl	8001958 <_isatty_r>
 800191e:	b128      	cbz	r0, 800192c <__smakebuf_r+0x70>
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	81a3      	strh	r3, [r4, #12]
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	431d      	orrs	r5, r3
 8001930:	81a5      	strh	r5, [r4, #12]
 8001932:	e7cf      	b.n	80018d4 <__smakebuf_r+0x18>

08001934 <_fstat_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4d07      	ldr	r5, [pc, #28]	@ (8001954 <_fstat_r+0x20>)
 8001938:	2300      	movs	r3, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	602b      	str	r3, [r5, #0]
 8001942:	f7fe ffc2 	bl	80008ca <_fstat>
 8001946:	1c43      	adds	r3, r0, #1
 8001948:	d102      	bne.n	8001950 <_fstat_r+0x1c>
 800194a:	682b      	ldr	r3, [r5, #0]
 800194c:	b103      	cbz	r3, 8001950 <_fstat_r+0x1c>
 800194e:	6023      	str	r3, [r4, #0]
 8001950:	bd38      	pop	{r3, r4, r5, pc}
 8001952:	bf00      	nop
 8001954:	200001c0 	.word	0x200001c0

08001958 <_isatty_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4d06      	ldr	r5, [pc, #24]	@ (8001974 <_isatty_r+0x1c>)
 800195c:	2300      	movs	r3, #0
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	602b      	str	r3, [r5, #0]
 8001964:	f7fe ffc1 	bl	80008ea <_isatty>
 8001968:	1c43      	adds	r3, r0, #1
 800196a:	d102      	bne.n	8001972 <_isatty_r+0x1a>
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	b103      	cbz	r3, 8001972 <_isatty_r+0x1a>
 8001970:	6023      	str	r3, [r4, #0]
 8001972:	bd38      	pop	{r3, r4, r5, pc}
 8001974:	200001c0 	.word	0x200001c0

08001978 <_init>:
 8001978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197a:	bf00      	nop
 800197c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800197e:	bc08      	pop	{r3}
 8001980:	469e      	mov	lr, r3
 8001982:	4770      	bx	lr

08001984 <_fini>:
 8001984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001986:	bf00      	nop
 8001988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800198a:	bc08      	pop	{r3}
 800198c:	469e      	mov	lr, r3
 800198e:	4770      	bx	lr
