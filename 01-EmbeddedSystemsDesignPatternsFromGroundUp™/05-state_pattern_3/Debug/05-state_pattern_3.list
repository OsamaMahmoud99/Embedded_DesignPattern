
05-state_pattern_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001724  08001724  00002724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017dc  080017dc  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080017dc  080017dc  000027dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017e4  080017e4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e4  080017e4  000027e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017e8  080017e8  000027e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080017ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001848  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001848  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018e1  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a92  00000000  00000000  0000496d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00005400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000180  00000000  00000000  00005640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9eb  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002649  00000000  00000000  000201ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fd4  00000000  00000000  000227f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b37c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e64  00000000  00000000  000b380c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000b4670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800170c 	.word	0x0800170c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800170c 	.word	0x0800170c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <createWatch>:
	TimeSource source;
	const char *name;
};

DigitalStopWatchPtr createWatch(const char *name, const TimeSource* tmr)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	DigitalStopWatchPtr new_watch = (DigitalStopWatchPtr)calloc(sizeof(DigitalStopWatchPtr), sizeof(DigitalStopWatchPtr));
 80002ba:	2104      	movs	r1, #4
 80002bc:	2004      	movs	r0, #4
 80002be:	f000 fad9 	bl	8000874 <calloc>
 80002c2:	4603      	mov	r3, r0
 80002c4:	60fb      	str	r3, [r7, #12]

	if(new_watch){
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00e      	beq.n	80002ea <createWatch+0x3a>

		transitionToStopped(&new_watch->state);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f87a 	bl	80003c8 <transitionToStopped>
		new_watch->name = name;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
		new_watch->source.timer = tmr->timer;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	721a      	strb	r2, [r3, #8]

		printf("Watch created successfully \n\r");
 80002e2:	4806      	ldr	r0, [pc, #24]	@ (80002fc <createWatch+0x4c>)
 80002e4:	f000 fc52 	bl	8000b8c <iprintf>
 80002e8:	e002      	b.n	80002f0 <createWatch+0x40>
	}else{

		printf("Low Memory Could not create watch \n\r");
 80002ea:	4805      	ldr	r0, [pc, #20]	@ (8000300 <createWatch+0x50>)
 80002ec:	f000 fc4e 	bl	8000b8c <iprintf>
	}

	return new_watch;
 80002f0:	68fb      	ldr	r3, [r7, #12]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	08001724 	.word	0x08001724
 8000300:	08001744 	.word	0x08001744

08000304 <stopWatch>:

void stopWatch(DigitalStopWatchPtr instance)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	instance->state.stop(&instance->state);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4610      	mov	r0, r2
 8000314:	4798      	blx	r3

	switch(instance->source.timer){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	7a1b      	ldrb	r3, [r3, #8]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d002      	beq.n	8000324 <stopWatch+0x20>
 800031e:	2b01      	cmp	r3, #1
 8000320:	d003      	beq.n	800032a <stopWatch+0x26>
		break;
	case SYSTICK:
		systick_millis_reset();
		break;
	default:
		break;
 8000322:	e005      	b.n	8000330 <stopWatch+0x2c>
		timer2_sec_reset();
 8000324:	f000 f8ac 	bl	8000480 <timer2_sec_reset>
		break;
 8000328:	e002      	b.n	8000330 <stopWatch+0x2c>
		systick_millis_reset();
 800032a:	f000 f8ed 	bl	8000508 <systick_millis_reset>
		break;
 800032e:	bf00      	nop
	}
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <startWatch>:

void startWatch(DigitalStopWatchPtr instance, long max_time, long *current_count)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	instance->state.start(&instance->state);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	4610      	mov	r0, r2
 800034c:	4798      	blx	r3

	switch(instance->source.timer){
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	7a1b      	ldrb	r3, [r3, #8]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d002      	beq.n	800035c <startWatch+0x24>
 8000356:	2b01      	cmp	r3, #1
 8000358:	d005      	beq.n	8000366 <startWatch+0x2e>
		break;
	case SYSTICK:
		systick_millis_set(max_time, current_count);
		break;
	default:
		break;
 800035a:	e009      	b.n	8000370 <startWatch+0x38>
		timer2_sec_set(max_time, current_count);
 800035c:	6879      	ldr	r1, [r7, #4]
 800035e:	68b8      	ldr	r0, [r7, #8]
 8000360:	f000 f842 	bl	80003e8 <timer2_sec_set>
		break;
 8000364:	e004      	b.n	8000370 <startWatch+0x38>
		systick_millis_set(max_time, current_count);
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	68b8      	ldr	r0, [r7, #8]
 800036a:	f000 f895 	bl	8000498 <systick_millis_set>
		break;
 800036e:	bf00      	nop
	}
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <stopWatch>:
 */

#include "StartedState.h"
#include "StoppedState.h"

static void stopWatch(WatchStatePtr state){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	transitionToStopped(state);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f000 f821 	bl	80003c8 <transitionToStopped>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <transitionToStarted>:

void transitionToStarted(WatchStatePtr state)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	defaultImplementation(state);
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f000 f8d5 	bl	8000548 <defaultImplementation>
	state->stop = stopWatch;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a02      	ldr	r2, [pc, #8]	@ (80003ac <transitionToStarted+0x1c>)
 80003a2:	605a      	str	r2, [r3, #4]
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	08000379 	.word	0x08000379

080003b0 <startWatch>:


#include "StoppedState.h"
#include "StartedState.h"

static void startWatch(WatchStatePtr state){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

	transitionToStarted(state);
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ffe9 	bl	8000390 <transitionToStarted>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <transitionToStopped>:

void transitionToStopped(WatchStatePtr state)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	defaultImplementation(state);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f000 f8b9 	bl	8000548 <defaultImplementation>
	state->start = startWatch;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a02      	ldr	r2, [pc, #8]	@ (80003e4 <transitionToStopped+0x1c>)
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	080003b1 	.word	0x080003b1

080003e8 <timer2_sec_set>:
//16MHZ = 16 000 000cycles every second

// 16 000 000 /1600-1 = 10000 ---> PSC
// 10000 /10000-1 = 1 ---> ARR
void timer2_sec_set(int max_sec, long *current_count)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= (1U<<0);
 80003f2:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <timer2_sec_set+0x90>)
 80003f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f6:	4a20      	ldr	r2, [pc, #128]	@ (8000478 <timer2_sec_set+0x90>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Scale clock to 1hz*/
	TIM2->PSC = 1600-1; /*Divided by 1600*/
 80003fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000402:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 10000-1; /*Divided by 10000*/
 8000408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000410:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Clear Timer counter*/
	TIM2->CNT = 0;
 8000412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	@ 0x24

	/*Enable TIM2*/
	TIM2->CR1 = (1U<<0);
 800041a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]

	long seconds = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]

	for(int i=0; i<max_sec; i++){
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	e01c      	b.n	8000466 <timer2_sec_set+0x7e>
		while(!(TIM2->SR & 1)); /*wait for UIF set*/
 800042c:	bf00      	nop
 800042e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f8      	beq.n	800042e <timer2_sec_set+0x46>
		seconds++;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	3301      	adds	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
		*current_count = seconds;
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	601a      	str	r2, [r3, #0]
		printf("Elapsed time : %ld \n\r", seconds);
 8000448:	68f9      	ldr	r1, [r7, #12]
 800044a:	480c      	ldr	r0, [pc, #48]	@ (800047c <timer2_sec_set+0x94>)
 800044c:	f000 fb9e 	bl	8000b8c <iprintf>

		/*Clear UIF*/
		TIM2->SR &=~1;
 8000450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	6113      	str	r3, [r2, #16]
	for(int i=0; i<max_sec; i++){
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3301      	adds	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	dbde      	blt.n	800042c <timer2_sec_set+0x44>
	}
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40023800 	.word	0x40023800
 800047c:	0800176c 	.word	0x0800176c

08000480 <timer2_sec_reset>:

void timer2_sec_reset(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	TIM2->CR1 = 0;
 8000484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <systick_millis_set>:

void systick_millis_set(int max_millis, long *current_count)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
	SysTick->LOAD = 16000-1; /*Reload with number of clocks per seconds*/
 80004a2:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <systick_millis_set+0x68>)
 80004a4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80004a8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <systick_millis_set+0x68>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5; /*Enable Systick, No interrupt, use system clock*/
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <systick_millis_set+0x68>)
 80004b2:	2205      	movs	r2, #5
 80004b4:	601a      	str	r2, [r3, #0]

	long milliseconds = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<max_millis; i++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	e013      	b.n	80004e8 <systick_millis_set+0x50>
		while((SysTick->CTRL & 0x10000)); /*if count flag is set*/
 80004c0:	bf00      	nop
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <systick_millis_set+0x68>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1f9      	bne.n	80004c2 <systick_millis_set+0x2a>
		milliseconds++;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3301      	adds	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
		*current_count = milliseconds;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	601a      	str	r2, [r3, #0]
		printf("Elapsed Time : %ld\n\r",milliseconds);
 80004da:	68f9      	ldr	r1, [r7, #12]
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <systick_millis_set+0x6c>)
 80004de:	f000 fb55 	bl	8000b8c <iprintf>
	for(int i=0; i<max_millis; i++){
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbe7      	blt.n	80004c0 <systick_millis_set+0x28>

	}

	SysTick->CTRL = 0; /*Disable clock*/
 80004f0:	4b03      	ldr	r3, [pc, #12]	@ (8000500 <systick_millis_set+0x68>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]

}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	e000e010 	.word	0xe000e010
 8000504:	08001784 	.word	0x08001784

08000508 <systick_millis_reset>:

void systick_millis_reset(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0; /*Disable clock*/
 800050c:	4b03      	ldr	r3, [pc, #12]	@ (800051c <systick_millis_reset+0x14>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	e000e010 	.word	0xe000e010

08000520 <defaultStop>:
 */

#include "WatchState.h"

static void defaultStop(WatchStatePtr state)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <defaultStart>:

static void defaultStart(WatchStatePtr state)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <defaultImplementation>:

void defaultImplementation(WatchStatePtr state)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	state->start = defaultStart;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <defaultImplementation+0x20>)
 8000554:	601a      	str	r2, [r3, #0]
	state->stop = defaultStop;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a04      	ldr	r2, [pc, #16]	@ (800056c <defaultImplementation+0x24>)
 800055a:	605a      	str	r2, [r3, #4]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	08000535 	.word	0x08000535
 800056c:	08000521 	.word	0x08000521

08000570 <main>:
#include "DigitalStopWatch.h"

long watch_1_counter = 0;

int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0


	debug_uart_init();
 8000576:	f000 f8c9 	bl	800070c <debug_uart_init>

	DigitalStopWatchPtr stop_watch_1;
	const char* name1 = "Diag Timer";
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <main+0x34>)
 800057c:	60fb      	str	r3, [r7, #12]
	TimeSource timer = {TIMER2};
 800057e:	2300      	movs	r3, #0
 8000580:	713b      	strb	r3, [r7, #4]

	stop_watch_1 = createWatch(name1, &timer);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f7ff fe92 	bl	80002b0 <createWatch>
 800058c:	60b8      	str	r0, [r7, #8]

	startWatch(stop_watch_1, 20, &watch_1_counter);
 800058e:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <main+0x38>)
 8000590:	2114      	movs	r1, #20
 8000592:	68b8      	ldr	r0, [r7, #8]
 8000594:	f7ff fed0 	bl	8000338 <startWatch>

	stopWatch(stop_watch_1);
 8000598:	68b8      	ldr	r0, [r7, #8]
 800059a:	f7ff feb3 	bl	8000304 <stopWatch>
    while(1)
 800059e:	bf00      	nop
 80005a0:	e7fd      	b.n	800059e <main+0x2e>
 80005a2:	bf00      	nop
 80005a4:	0800179c 	.word	0x0800179c
 80005a8:	20000078 	.word	0x20000078

080005ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00a      	b.n	80005d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005be:	f3af 8000 	nop.w
 80005c2:	4601      	mov	r1, r0
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf0      	blt.n	80005be <_read+0x12>
  }

  return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f877 	bl	80006f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x12>
  }
  return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_close>:

int _close(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000646:	605a      	str	r2, [r3, #4]
  return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_isatty>:

int _isatty(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000690:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <_sbrk+0x5c>)
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <_sbrk+0x60>)
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <_sbrk+0x64>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <_sbrk+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d207      	bcs.n	80006c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b8:	f000 fb1c 	bl	8000cf4 <__errno>
 80006bc:	4603      	mov	r3, r0
 80006be:	220c      	movs	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	e009      	b.n	80006dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <_sbrk+0x64>)
 80006d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20020000 	.word	0x20020000
 80006e8:	00000400 	.word	0x00000400
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	200001d0 	.word	0x200001d0

080006f4 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f84f 	bl	80007a0 <uart_write>
	return ch;
 8000702:	687b      	ldr	r3, [r7, #4]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <debug_uart_init>:

void debug_uart_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <debug_uart_init+0x84>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000714:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <debug_uart_init+0x84>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800071c:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <debug_uart_init+0x88>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <debug_uart_init+0x88>)
 8000722:	f023 0310 	bic.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <debug_uart_init+0x88>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <debug_uart_init+0x88>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000734:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <debug_uart_init+0x88>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <debug_uart_init+0x88>)
 800073a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800073e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <debug_uart_init+0x88>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <debug_uart_init+0x88>)
 8000746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800074a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <debug_uart_init+0x88>)
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <debug_uart_init+0x88>)
 8000752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000756:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <debug_uart_init+0x88>)
 800075a:	6a1b      	ldr	r3, [r3, #32]
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <debug_uart_init+0x88>)
 800075e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000762:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <debug_uart_init+0x84>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <debug_uart_init+0x84>)
 800076a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076e:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 8000770:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000774:	4808      	ldr	r0, [pc, #32]	@ (8000798 <debug_uart_init+0x8c>)
 8000776:	f000 f83f 	bl	80007f8 <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <debug_uart_init+0x90>)
 800077c:	2208      	movs	r2, #8
 800077e:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <debug_uart_init+0x90>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	4a05      	ldr	r2, [pc, #20]	@ (800079c <debug_uart_init+0x90>)
 8000786:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	00f42400 	.word	0x00f42400
 800079c:	40004400 	.word	0x40004400

080007a0 <uart_write>:

static void uart_write(int ch)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 80007a8:	bf00      	nop
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <uart_write+0x2c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f9      	beq.n	80007aa <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <uart_write+0x2c>)
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	6053      	str	r3, [r2, #4]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40004400 	.word	0x40004400

080007d0 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	085a      	lsrs	r2, r3, #1
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	441a      	add	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000802:	6839      	ldr	r1, [r7, #0]
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffe3 	bl	80007d0 <compute_uart_bd>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b03      	ldr	r3, [pc, #12]	@ (800081c <uart_set_baudrate+0x24>)
 8000810:	609a      	str	r2, [r3, #8]
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40004400 	.word	0x40004400

08000820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000822:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000824:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	@ (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	@ (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084e:	f000 fa57 	bl	8000d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fe8d 	bl	8000570 <main>

08000856 <LoopForever>:

LoopForever:
  b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   r0, =_estack
 8000858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000864:	080017ec 	.word	0x080017ec
  ldr r2, =_sbss
 8000868:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800086c:	200001cc 	.word	0x200001cc

08000870 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC_IRQHandler>
	...

08000874 <calloc>:
 8000874:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <calloc+0xc>)
 8000876:	460a      	mov	r2, r1
 8000878:	4601      	mov	r1, r0
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f000 b802 	b.w	8000884 <_calloc_r>
 8000880:	2000000c 	.word	0x2000000c

08000884 <_calloc_r>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	fba1 5402 	umull	r5, r4, r1, r2
 800088a:	b93c      	cbnz	r4, 800089c <_calloc_r+0x18>
 800088c:	4629      	mov	r1, r5
 800088e:	f000 f82f 	bl	80008f0 <_malloc_r>
 8000892:	4606      	mov	r6, r0
 8000894:	b928      	cbnz	r0, 80008a2 <_calloc_r+0x1e>
 8000896:	2600      	movs	r6, #0
 8000898:	4630      	mov	r0, r6
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	220c      	movs	r2, #12
 800089e:	6002      	str	r2, [r0, #0]
 80008a0:	e7f9      	b.n	8000896 <_calloc_r+0x12>
 80008a2:	462a      	mov	r2, r5
 80008a4:	4621      	mov	r1, r4
 80008a6:	f000 f9c6 	bl	8000c36 <memset>
 80008aa:	e7f5      	b.n	8000898 <_calloc_r+0x14>

080008ac <sbrk_aligned>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	4e0f      	ldr	r6, [pc, #60]	@ (80008ec <sbrk_aligned+0x40>)
 80008b0:	460c      	mov	r4, r1
 80008b2:	6831      	ldr	r1, [r6, #0]
 80008b4:	4605      	mov	r5, r0
 80008b6:	b911      	cbnz	r1, 80008be <sbrk_aligned+0x12>
 80008b8:	f000 f9fa 	bl	8000cb0 <_sbrk_r>
 80008bc:	6030      	str	r0, [r6, #0]
 80008be:	4621      	mov	r1, r4
 80008c0:	4628      	mov	r0, r5
 80008c2:	f000 f9f5 	bl	8000cb0 <_sbrk_r>
 80008c6:	1c43      	adds	r3, r0, #1
 80008c8:	d103      	bne.n	80008d2 <sbrk_aligned+0x26>
 80008ca:	f04f 34ff 	mov.w	r4, #4294967295
 80008ce:	4620      	mov	r0, r4
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	1cc4      	adds	r4, r0, #3
 80008d4:	f024 0403 	bic.w	r4, r4, #3
 80008d8:	42a0      	cmp	r0, r4
 80008da:	d0f8      	beq.n	80008ce <sbrk_aligned+0x22>
 80008dc:	1a21      	subs	r1, r4, r0
 80008de:	4628      	mov	r0, r5
 80008e0:	f000 f9e6 	bl	8000cb0 <_sbrk_r>
 80008e4:	3001      	adds	r0, #1
 80008e6:	d1f2      	bne.n	80008ce <sbrk_aligned+0x22>
 80008e8:	e7ef      	b.n	80008ca <sbrk_aligned+0x1e>
 80008ea:	bf00      	nop
 80008ec:	20000080 	.word	0x20000080

080008f0 <_malloc_r>:
 80008f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008f4:	1ccd      	adds	r5, r1, #3
 80008f6:	f025 0503 	bic.w	r5, r5, #3
 80008fa:	3508      	adds	r5, #8
 80008fc:	2d0c      	cmp	r5, #12
 80008fe:	bf38      	it	cc
 8000900:	250c      	movcc	r5, #12
 8000902:	2d00      	cmp	r5, #0
 8000904:	4606      	mov	r6, r0
 8000906:	db01      	blt.n	800090c <_malloc_r+0x1c>
 8000908:	42a9      	cmp	r1, r5
 800090a:	d904      	bls.n	8000916 <_malloc_r+0x26>
 800090c:	230c      	movs	r3, #12
 800090e:	6033      	str	r3, [r6, #0]
 8000910:	2000      	movs	r0, #0
 8000912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009ec <_malloc_r+0xfc>
 800091a:	f000 f869 	bl	80009f0 <__malloc_lock>
 800091e:	f8d8 3000 	ldr.w	r3, [r8]
 8000922:	461c      	mov	r4, r3
 8000924:	bb44      	cbnz	r4, 8000978 <_malloc_r+0x88>
 8000926:	4629      	mov	r1, r5
 8000928:	4630      	mov	r0, r6
 800092a:	f7ff ffbf 	bl	80008ac <sbrk_aligned>
 800092e:	1c43      	adds	r3, r0, #1
 8000930:	4604      	mov	r4, r0
 8000932:	d158      	bne.n	80009e6 <_malloc_r+0xf6>
 8000934:	f8d8 4000 	ldr.w	r4, [r8]
 8000938:	4627      	mov	r7, r4
 800093a:	2f00      	cmp	r7, #0
 800093c:	d143      	bne.n	80009c6 <_malloc_r+0xd6>
 800093e:	2c00      	cmp	r4, #0
 8000940:	d04b      	beq.n	80009da <_malloc_r+0xea>
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	4639      	mov	r1, r7
 8000946:	4630      	mov	r0, r6
 8000948:	eb04 0903 	add.w	r9, r4, r3
 800094c:	f000 f9b0 	bl	8000cb0 <_sbrk_r>
 8000950:	4581      	cmp	r9, r0
 8000952:	d142      	bne.n	80009da <_malloc_r+0xea>
 8000954:	6821      	ldr	r1, [r4, #0]
 8000956:	1a6d      	subs	r5, r5, r1
 8000958:	4629      	mov	r1, r5
 800095a:	4630      	mov	r0, r6
 800095c:	f7ff ffa6 	bl	80008ac <sbrk_aligned>
 8000960:	3001      	adds	r0, #1
 8000962:	d03a      	beq.n	80009da <_malloc_r+0xea>
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	442b      	add	r3, r5
 8000968:	6023      	str	r3, [r4, #0]
 800096a:	f8d8 3000 	ldr.w	r3, [r8]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	bb62      	cbnz	r2, 80009cc <_malloc_r+0xdc>
 8000972:	f8c8 7000 	str.w	r7, [r8]
 8000976:	e00f      	b.n	8000998 <_malloc_r+0xa8>
 8000978:	6822      	ldr	r2, [r4, #0]
 800097a:	1b52      	subs	r2, r2, r5
 800097c:	d420      	bmi.n	80009c0 <_malloc_r+0xd0>
 800097e:	2a0b      	cmp	r2, #11
 8000980:	d917      	bls.n	80009b2 <_malloc_r+0xc2>
 8000982:	1961      	adds	r1, r4, r5
 8000984:	42a3      	cmp	r3, r4
 8000986:	6025      	str	r5, [r4, #0]
 8000988:	bf18      	it	ne
 800098a:	6059      	strne	r1, [r3, #4]
 800098c:	6863      	ldr	r3, [r4, #4]
 800098e:	bf08      	it	eq
 8000990:	f8c8 1000 	streq.w	r1, [r8]
 8000994:	5162      	str	r2, [r4, r5]
 8000996:	604b      	str	r3, [r1, #4]
 8000998:	4630      	mov	r0, r6
 800099a:	f000 f82f 	bl	80009fc <__malloc_unlock>
 800099e:	f104 000b 	add.w	r0, r4, #11
 80009a2:	1d23      	adds	r3, r4, #4
 80009a4:	f020 0007 	bic.w	r0, r0, #7
 80009a8:	1ac2      	subs	r2, r0, r3
 80009aa:	bf1c      	itt	ne
 80009ac:	1a1b      	subne	r3, r3, r0
 80009ae:	50a3      	strne	r3, [r4, r2]
 80009b0:	e7af      	b.n	8000912 <_malloc_r+0x22>
 80009b2:	6862      	ldr	r2, [r4, #4]
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	bf0c      	ite	eq
 80009b8:	f8c8 2000 	streq.w	r2, [r8]
 80009bc:	605a      	strne	r2, [r3, #4]
 80009be:	e7eb      	b.n	8000998 <_malloc_r+0xa8>
 80009c0:	4623      	mov	r3, r4
 80009c2:	6864      	ldr	r4, [r4, #4]
 80009c4:	e7ae      	b.n	8000924 <_malloc_r+0x34>
 80009c6:	463c      	mov	r4, r7
 80009c8:	687f      	ldr	r7, [r7, #4]
 80009ca:	e7b6      	b.n	800093a <_malloc_r+0x4a>
 80009cc:	461a      	mov	r2, r3
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	d1fb      	bne.n	80009cc <_malloc_r+0xdc>
 80009d4:	2300      	movs	r3, #0
 80009d6:	6053      	str	r3, [r2, #4]
 80009d8:	e7de      	b.n	8000998 <_malloc_r+0xa8>
 80009da:	230c      	movs	r3, #12
 80009dc:	6033      	str	r3, [r6, #0]
 80009de:	4630      	mov	r0, r6
 80009e0:	f000 f80c 	bl	80009fc <__malloc_unlock>
 80009e4:	e794      	b.n	8000910 <_malloc_r+0x20>
 80009e6:	6005      	str	r5, [r0, #0]
 80009e8:	e7d6      	b.n	8000998 <_malloc_r+0xa8>
 80009ea:	bf00      	nop
 80009ec:	20000084 	.word	0x20000084

080009f0 <__malloc_lock>:
 80009f0:	4801      	ldr	r0, [pc, #4]	@ (80009f8 <__malloc_lock+0x8>)
 80009f2:	f000 b9aa 	b.w	8000d4a <__retarget_lock_acquire_recursive>
 80009f6:	bf00      	nop
 80009f8:	200001c8 	.word	0x200001c8

080009fc <__malloc_unlock>:
 80009fc:	4801      	ldr	r0, [pc, #4]	@ (8000a04 <__malloc_unlock+0x8>)
 80009fe:	f000 b9a5 	b.w	8000d4c <__retarget_lock_release_recursive>
 8000a02:	bf00      	nop
 8000a04:	200001c8 	.word	0x200001c8

08000a08 <std>:
 8000a08:	2300      	movs	r3, #0
 8000a0a:	b510      	push	{r4, lr}
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a16:	6083      	str	r3, [r0, #8]
 8000a18:	8181      	strh	r1, [r0, #12]
 8000a1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000a1c:	81c2      	strh	r2, [r0, #14]
 8000a1e:	6183      	str	r3, [r0, #24]
 8000a20:	4619      	mov	r1, r3
 8000a22:	2208      	movs	r2, #8
 8000a24:	305c      	adds	r0, #92	@ 0x5c
 8000a26:	f000 f906 	bl	8000c36 <memset>
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <std+0x58>)
 8000a2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <std+0x5c>)
 8000a30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <std+0x60>)
 8000a34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <std+0x64>)
 8000a38:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <std+0x68>)
 8000a3c:	6224      	str	r4, [r4, #32]
 8000a3e:	429c      	cmp	r4, r3
 8000a40:	d006      	beq.n	8000a50 <std+0x48>
 8000a42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a46:	4294      	cmp	r4, r2
 8000a48:	d002      	beq.n	8000a50 <std+0x48>
 8000a4a:	33d0      	adds	r3, #208	@ 0xd0
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	d105      	bne.n	8000a5c <std+0x54>
 8000a50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a58:	f000 b976 	b.w	8000d48 <__retarget_lock_init_recursive>
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	bf00      	nop
 8000a60:	08000bb1 	.word	0x08000bb1
 8000a64:	08000bd3 	.word	0x08000bd3
 8000a68:	08000c0b 	.word	0x08000c0b
 8000a6c:	08000c2f 	.word	0x08000c2f
 8000a70:	20000088 	.word	0x20000088

08000a74 <stdio_exit_handler>:
 8000a74:	4a02      	ldr	r2, [pc, #8]	@ (8000a80 <stdio_exit_handler+0xc>)
 8000a76:	4903      	ldr	r1, [pc, #12]	@ (8000a84 <stdio_exit_handler+0x10>)
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <stdio_exit_handler+0x14>)
 8000a7a:	f000 b869 	b.w	8000b50 <_fwalk_sglue>
 8000a7e:	bf00      	nop
 8000a80:	20000000 	.word	0x20000000
 8000a84:	0800148d 	.word	0x0800148d
 8000a88:	20000010 	.word	0x20000010

08000a8c <cleanup_stdio>:
 8000a8c:	6841      	ldr	r1, [r0, #4]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <cleanup_stdio+0x34>)
 8000a90:	4299      	cmp	r1, r3
 8000a92:	b510      	push	{r4, lr}
 8000a94:	4604      	mov	r4, r0
 8000a96:	d001      	beq.n	8000a9c <cleanup_stdio+0x10>
 8000a98:	f000 fcf8 	bl	800148c <_fflush_r>
 8000a9c:	68a1      	ldr	r1, [r4, #8]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <cleanup_stdio+0x38>)
 8000aa0:	4299      	cmp	r1, r3
 8000aa2:	d002      	beq.n	8000aaa <cleanup_stdio+0x1e>
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f000 fcf1 	bl	800148c <_fflush_r>
 8000aaa:	68e1      	ldr	r1, [r4, #12]
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <cleanup_stdio+0x3c>)
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d004      	beq.n	8000abc <cleanup_stdio+0x30>
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ab8:	f000 bce8 	b.w	800148c <_fflush_r>
 8000abc:	bd10      	pop	{r4, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000088 	.word	0x20000088
 8000ac4:	200000f0 	.word	0x200000f0
 8000ac8:	20000158 	.word	0x20000158

08000acc <global_stdio_init.part.0>:
 8000acc:	b510      	push	{r4, lr}
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <global_stdio_init.part.0+0x30>)
 8000ad0:	4c0b      	ldr	r4, [pc, #44]	@ (8000b00 <global_stdio_init.part.0+0x34>)
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <global_stdio_init.part.0+0x38>)
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	f7ff ff94 	bl	8000a08 <std>
 8000ae0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2109      	movs	r1, #9
 8000ae8:	f7ff ff8e 	bl	8000a08 <std>
 8000aec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000af0:	2202      	movs	r2, #2
 8000af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af6:	2112      	movs	r1, #18
 8000af8:	f7ff bf86 	b.w	8000a08 <std>
 8000afc:	200001c0 	.word	0x200001c0
 8000b00:	20000088 	.word	0x20000088
 8000b04:	08000a75 	.word	0x08000a75

08000b08 <__sfp_lock_acquire>:
 8000b08:	4801      	ldr	r0, [pc, #4]	@ (8000b10 <__sfp_lock_acquire+0x8>)
 8000b0a:	f000 b91e 	b.w	8000d4a <__retarget_lock_acquire_recursive>
 8000b0e:	bf00      	nop
 8000b10:	200001c9 	.word	0x200001c9

08000b14 <__sfp_lock_release>:
 8000b14:	4801      	ldr	r0, [pc, #4]	@ (8000b1c <__sfp_lock_release+0x8>)
 8000b16:	f000 b919 	b.w	8000d4c <__retarget_lock_release_recursive>
 8000b1a:	bf00      	nop
 8000b1c:	200001c9 	.word	0x200001c9

08000b20 <__sinit>:
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fff0 	bl	8000b08 <__sfp_lock_acquire>
 8000b28:	6a23      	ldr	r3, [r4, #32]
 8000b2a:	b11b      	cbz	r3, 8000b34 <__sinit+0x14>
 8000b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b30:	f7ff bff0 	b.w	8000b14 <__sfp_lock_release>
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <__sinit+0x28>)
 8000b36:	6223      	str	r3, [r4, #32]
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__sinit+0x2c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f5      	bne.n	8000b2c <__sinit+0xc>
 8000b40:	f7ff ffc4 	bl	8000acc <global_stdio_init.part.0>
 8000b44:	e7f2      	b.n	8000b2c <__sinit+0xc>
 8000b46:	bf00      	nop
 8000b48:	08000a8d 	.word	0x08000a8d
 8000b4c:	200001c0 	.word	0x200001c0

08000b50 <_fwalk_sglue>:
 8000b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b54:	4607      	mov	r7, r0
 8000b56:	4688      	mov	r8, r1
 8000b58:	4614      	mov	r4, r2
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b60:	f1b9 0901 	subs.w	r9, r9, #1
 8000b64:	d505      	bpl.n	8000b72 <_fwalk_sglue+0x22>
 8000b66:	6824      	ldr	r4, [r4, #0]
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d1f7      	bne.n	8000b5c <_fwalk_sglue+0xc>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b72:	89ab      	ldrh	r3, [r5, #12]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d907      	bls.n	8000b88 <_fwalk_sglue+0x38>
 8000b78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	d003      	beq.n	8000b88 <_fwalk_sglue+0x38>
 8000b80:	4629      	mov	r1, r5
 8000b82:	4638      	mov	r0, r7
 8000b84:	47c0      	blx	r8
 8000b86:	4306      	orrs	r6, r0
 8000b88:	3568      	adds	r5, #104	@ 0x68
 8000b8a:	e7e9      	b.n	8000b60 <_fwalk_sglue+0x10>

08000b8c <iprintf>:
 8000b8c:	b40f      	push	{r0, r1, r2, r3}
 8000b8e:	b507      	push	{r0, r1, r2, lr}
 8000b90:	4906      	ldr	r1, [pc, #24]	@ (8000bac <iprintf+0x20>)
 8000b92:	ab04      	add	r3, sp, #16
 8000b94:	6808      	ldr	r0, [r1, #0]
 8000b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b9a:	6881      	ldr	r1, [r0, #8]
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	f000 f94b 	bl	8000e38 <_vfiprintf_r>
 8000ba2:	b003      	add	sp, #12
 8000ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr
 8000bac:	2000000c 	.word	0x2000000c

08000bb0 <__sread>:
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb8:	f000 f868 	bl	8000c8c <_read_r>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	bfab      	itete	ge
 8000bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8000bc4:	181b      	addge	r3, r3, r0
 8000bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bca:	bfac      	ite	ge
 8000bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000bce:	81a3      	strhlt	r3, [r4, #12]
 8000bd0:	bd10      	pop	{r4, pc}

08000bd2 <__swrite>:
 8000bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd6:	461f      	mov	r7, r3
 8000bd8:	898b      	ldrh	r3, [r1, #12]
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	4605      	mov	r5, r0
 8000bde:	460c      	mov	r4, r1
 8000be0:	4616      	mov	r6, r2
 8000be2:	d505      	bpl.n	8000bf0 <__swrite+0x1e>
 8000be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000be8:	2302      	movs	r3, #2
 8000bea:	2200      	movs	r2, #0
 8000bec:	f000 f83c 	bl	8000c68 <_lseek_r>
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bfa:	81a3      	strh	r3, [r4, #12]
 8000bfc:	4632      	mov	r2, r6
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4628      	mov	r0, r5
 8000c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c06:	f000 b863 	b.w	8000cd0 <_write_r>

08000c0a <__sseek>:
 8000c0a:	b510      	push	{r4, lr}
 8000c0c:	460c      	mov	r4, r1
 8000c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c12:	f000 f829 	bl	8000c68 <_lseek_r>
 8000c16:	1c43      	adds	r3, r0, #1
 8000c18:	89a3      	ldrh	r3, [r4, #12]
 8000c1a:	bf15      	itete	ne
 8000c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c26:	81a3      	strheq	r3, [r4, #12]
 8000c28:	bf18      	it	ne
 8000c2a:	81a3      	strhne	r3, [r4, #12]
 8000c2c:	bd10      	pop	{r4, pc}

08000c2e <__sclose>:
 8000c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c32:	f000 b809 	b.w	8000c48 <_close_r>

08000c36 <memset>:
 8000c36:	4402      	add	r2, r0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d100      	bne.n	8000c40 <memset+0xa>
 8000c3e:	4770      	bx	lr
 8000c40:	f803 1b01 	strb.w	r1, [r3], #1
 8000c44:	e7f9      	b.n	8000c3a <memset+0x4>
	...

08000c48 <_close_r>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4d06      	ldr	r5, [pc, #24]	@ (8000c64 <_close_r+0x1c>)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4608      	mov	r0, r1
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	f7ff fce3 	bl	800061e <_close>
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	d102      	bne.n	8000c62 <_close_r+0x1a>
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	b103      	cbz	r3, 8000c62 <_close_r+0x1a>
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
 8000c64:	200001c4 	.word	0x200001c4

08000c68 <_lseek_r>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4d07      	ldr	r5, [pc, #28]	@ (8000c88 <_lseek_r+0x20>)
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	4611      	mov	r1, r2
 8000c72:	2200      	movs	r2, #0
 8000c74:	602a      	str	r2, [r5, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	f7ff fcf8 	bl	800066c <_lseek>
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	d102      	bne.n	8000c86 <_lseek_r+0x1e>
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	b103      	cbz	r3, 8000c86 <_lseek_r+0x1e>
 8000c84:	6023      	str	r3, [r4, #0]
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
 8000c88:	200001c4 	.word	0x200001c4

08000c8c <_read_r>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	4d07      	ldr	r5, [pc, #28]	@ (8000cac <_read_r+0x20>)
 8000c90:	4604      	mov	r4, r0
 8000c92:	4608      	mov	r0, r1
 8000c94:	4611      	mov	r1, r2
 8000c96:	2200      	movs	r2, #0
 8000c98:	602a      	str	r2, [r5, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f7ff fc86 	bl	80005ac <_read>
 8000ca0:	1c43      	adds	r3, r0, #1
 8000ca2:	d102      	bne.n	8000caa <_read_r+0x1e>
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	b103      	cbz	r3, 8000caa <_read_r+0x1e>
 8000ca8:	6023      	str	r3, [r4, #0]
 8000caa:	bd38      	pop	{r3, r4, r5, pc}
 8000cac:	200001c4 	.word	0x200001c4

08000cb0 <_sbrk_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4d06      	ldr	r5, [pc, #24]	@ (8000ccc <_sbrk_r+0x1c>)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	602b      	str	r3, [r5, #0]
 8000cbc:	f7ff fce4 	bl	8000688 <_sbrk>
 8000cc0:	1c43      	adds	r3, r0, #1
 8000cc2:	d102      	bne.n	8000cca <_sbrk_r+0x1a>
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	b103      	cbz	r3, 8000cca <_sbrk_r+0x1a>
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	200001c4 	.word	0x200001c4

08000cd0 <_write_r>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4d07      	ldr	r5, [pc, #28]	@ (8000cf0 <_write_r+0x20>)
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	602a      	str	r2, [r5, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f7ff fc81 	bl	80005e6 <_write>
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	d102      	bne.n	8000cee <_write_r+0x1e>
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	b103      	cbz	r3, 8000cee <_write_r+0x1e>
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	200001c4 	.word	0x200001c4

08000cf4 <__errno>:
 8000cf4:	4b01      	ldr	r3, [pc, #4]	@ (8000cfc <__errno+0x8>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000000c 	.word	0x2000000c

08000d00 <__libc_init_array>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4d0d      	ldr	r5, [pc, #52]	@ (8000d38 <__libc_init_array+0x38>)
 8000d04:	4c0d      	ldr	r4, [pc, #52]	@ (8000d3c <__libc_init_array+0x3c>)
 8000d06:	1b64      	subs	r4, r4, r5
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d109      	bne.n	8000d24 <__libc_init_array+0x24>
 8000d10:	4d0b      	ldr	r5, [pc, #44]	@ (8000d40 <__libc_init_array+0x40>)
 8000d12:	4c0c      	ldr	r4, [pc, #48]	@ (8000d44 <__libc_init_array+0x44>)
 8000d14:	f000 fcfa 	bl	800170c <_init>
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	42a6      	cmp	r6, r4
 8000d20:	d105      	bne.n	8000d2e <__libc_init_array+0x2e>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d28:	4798      	blx	r3
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	e7ee      	b.n	8000d0c <__libc_init_array+0xc>
 8000d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d32:	4798      	blx	r3
 8000d34:	3601      	adds	r6, #1
 8000d36:	e7f2      	b.n	8000d1e <__libc_init_array+0x1e>
 8000d38:	080017e4 	.word	0x080017e4
 8000d3c:	080017e4 	.word	0x080017e4
 8000d40:	080017e4 	.word	0x080017e4
 8000d44:	080017e8 	.word	0x080017e8

08000d48 <__retarget_lock_init_recursive>:
 8000d48:	4770      	bx	lr

08000d4a <__retarget_lock_acquire_recursive>:
 8000d4a:	4770      	bx	lr

08000d4c <__retarget_lock_release_recursive>:
 8000d4c:	4770      	bx	lr
	...

08000d50 <_free_r>:
 8000d50:	b538      	push	{r3, r4, r5, lr}
 8000d52:	4605      	mov	r5, r0
 8000d54:	2900      	cmp	r1, #0
 8000d56:	d041      	beq.n	8000ddc <_free_r+0x8c>
 8000d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d5c:	1f0c      	subs	r4, r1, #4
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bfb8      	it	lt
 8000d62:	18e4      	addlt	r4, r4, r3
 8000d64:	f7ff fe44 	bl	80009f0 <__malloc_lock>
 8000d68:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <_free_r+0x90>)
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	b933      	cbnz	r3, 8000d7c <_free_r+0x2c>
 8000d6e:	6063      	str	r3, [r4, #4]
 8000d70:	6014      	str	r4, [r2, #0]
 8000d72:	4628      	mov	r0, r5
 8000d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d78:	f7ff be40 	b.w	80009fc <__malloc_unlock>
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <_free_r+0x42>
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	1821      	adds	r1, r4, r0
 8000d84:	428b      	cmp	r3, r1
 8000d86:	bf01      	itttt	eq
 8000d88:	6819      	ldreq	r1, [r3, #0]
 8000d8a:	685b      	ldreq	r3, [r3, #4]
 8000d8c:	1809      	addeq	r1, r1, r0
 8000d8e:	6021      	streq	r1, [r4, #0]
 8000d90:	e7ed      	b.n	8000d6e <_free_r+0x1e>
 8000d92:	461a      	mov	r2, r3
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	b10b      	cbz	r3, 8000d9c <_free_r+0x4c>
 8000d98:	42a3      	cmp	r3, r4
 8000d9a:	d9fa      	bls.n	8000d92 <_free_r+0x42>
 8000d9c:	6811      	ldr	r1, [r2, #0]
 8000d9e:	1850      	adds	r0, r2, r1
 8000da0:	42a0      	cmp	r0, r4
 8000da2:	d10b      	bne.n	8000dbc <_free_r+0x6c>
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	4401      	add	r1, r0
 8000da8:	1850      	adds	r0, r2, r1
 8000daa:	4283      	cmp	r3, r0
 8000dac:	6011      	str	r1, [r2, #0]
 8000dae:	d1e0      	bne.n	8000d72 <_free_r+0x22>
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	6053      	str	r3, [r2, #4]
 8000db6:	4408      	add	r0, r1
 8000db8:	6010      	str	r0, [r2, #0]
 8000dba:	e7da      	b.n	8000d72 <_free_r+0x22>
 8000dbc:	d902      	bls.n	8000dc4 <_free_r+0x74>
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	e7d6      	b.n	8000d72 <_free_r+0x22>
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	1821      	adds	r1, r4, r0
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	bf04      	itt	eq
 8000dcc:	6819      	ldreq	r1, [r3, #0]
 8000dce:	685b      	ldreq	r3, [r3, #4]
 8000dd0:	6063      	str	r3, [r4, #4]
 8000dd2:	bf04      	itt	eq
 8000dd4:	1809      	addeq	r1, r1, r0
 8000dd6:	6021      	streq	r1, [r4, #0]
 8000dd8:	6054      	str	r4, [r2, #4]
 8000dda:	e7ca      	b.n	8000d72 <_free_r+0x22>
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop
 8000de0:	20000084 	.word	0x20000084

08000de4 <__sfputc_r>:
 8000de4:	6893      	ldr	r3, [r2, #8]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	b410      	push	{r4}
 8000dec:	6093      	str	r3, [r2, #8]
 8000dee:	da08      	bge.n	8000e02 <__sfputc_r+0x1e>
 8000df0:	6994      	ldr	r4, [r2, #24]
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	db01      	blt.n	8000dfa <__sfputc_r+0x16>
 8000df6:	290a      	cmp	r1, #10
 8000df8:	d103      	bne.n	8000e02 <__sfputc_r+0x1e>
 8000dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dfe:	f000 bb6d 	b.w	80014dc <__swbuf_r>
 8000e02:	6813      	ldr	r3, [r2, #0]
 8000e04:	1c58      	adds	r0, r3, #1
 8000e06:	6010      	str	r0, [r2, #0]
 8000e08:	7019      	strb	r1, [r3, #0]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <__sfputs_r>:
 8000e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e14:	4606      	mov	r6, r0
 8000e16:	460f      	mov	r7, r1
 8000e18:	4614      	mov	r4, r2
 8000e1a:	18d5      	adds	r5, r2, r3
 8000e1c:	42ac      	cmp	r4, r5
 8000e1e:	d101      	bne.n	8000e24 <__sfputs_r+0x12>
 8000e20:	2000      	movs	r0, #0
 8000e22:	e007      	b.n	8000e34 <__sfputs_r+0x22>
 8000e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e28:	463a      	mov	r2, r7
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f7ff ffda 	bl	8000de4 <__sfputc_r>
 8000e30:	1c43      	adds	r3, r0, #1
 8000e32:	d1f3      	bne.n	8000e1c <__sfputs_r+0xa>
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e38 <_vfiprintf_r>:
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	460d      	mov	r5, r1
 8000e3e:	b09d      	sub	sp, #116	@ 0x74
 8000e40:	4614      	mov	r4, r2
 8000e42:	4698      	mov	r8, r3
 8000e44:	4606      	mov	r6, r0
 8000e46:	b118      	cbz	r0, 8000e50 <_vfiprintf_r+0x18>
 8000e48:	6a03      	ldr	r3, [r0, #32]
 8000e4a:	b90b      	cbnz	r3, 8000e50 <_vfiprintf_r+0x18>
 8000e4c:	f7ff fe68 	bl	8000b20 <__sinit>
 8000e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e52:	07d9      	lsls	r1, r3, #31
 8000e54:	d405      	bmi.n	8000e62 <_vfiprintf_r+0x2a>
 8000e56:	89ab      	ldrh	r3, [r5, #12]
 8000e58:	059a      	lsls	r2, r3, #22
 8000e5a:	d402      	bmi.n	8000e62 <_vfiprintf_r+0x2a>
 8000e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e5e:	f7ff ff74 	bl	8000d4a <__retarget_lock_acquire_recursive>
 8000e62:	89ab      	ldrh	r3, [r5, #12]
 8000e64:	071b      	lsls	r3, r3, #28
 8000e66:	d501      	bpl.n	8000e6c <_vfiprintf_r+0x34>
 8000e68:	692b      	ldr	r3, [r5, #16]
 8000e6a:	b99b      	cbnz	r3, 8000e94 <_vfiprintf_r+0x5c>
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f000 fb72 	bl	8001558 <__swsetup_r>
 8000e74:	b170      	cbz	r0, 8000e94 <_vfiprintf_r+0x5c>
 8000e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e78:	07dc      	lsls	r4, r3, #31
 8000e7a:	d504      	bpl.n	8000e86 <_vfiprintf_r+0x4e>
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	b01d      	add	sp, #116	@ 0x74
 8000e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e86:	89ab      	ldrh	r3, [r5, #12]
 8000e88:	0598      	lsls	r0, r3, #22
 8000e8a:	d4f7      	bmi.n	8000e7c <_vfiprintf_r+0x44>
 8000e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e8e:	f7ff ff5d 	bl	8000d4c <__retarget_lock_release_recursive>
 8000e92:	e7f3      	b.n	8000e7c <_vfiprintf_r+0x44>
 8000e94:	2300      	movs	r3, #0
 8000e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e98:	2320      	movs	r3, #32
 8000e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ea2:	2330      	movs	r3, #48	@ 0x30
 8000ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001054 <_vfiprintf_r+0x21c>
 8000ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000eac:	f04f 0901 	mov.w	r9, #1
 8000eb0:	4623      	mov	r3, r4
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eb8:	b10a      	cbz	r2, 8000ebe <_vfiprintf_r+0x86>
 8000eba:	2a25      	cmp	r2, #37	@ 0x25
 8000ebc:	d1f9      	bne.n	8000eb2 <_vfiprintf_r+0x7a>
 8000ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8000ec2:	d00b      	beq.n	8000edc <_vfiprintf_r+0xa4>
 8000ec4:	465b      	mov	r3, fp
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	4629      	mov	r1, r5
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f7ff ffa1 	bl	8000e12 <__sfputs_r>
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	f000 80a7 	beq.w	8001024 <_vfiprintf_r+0x1ec>
 8000ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ed8:	445a      	add	r2, fp
 8000eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8000edc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 809f 	beq.w	8001024 <_vfiprintf_r+0x1ec>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ef0:	f10a 0a01 	add.w	sl, sl, #1
 8000ef4:	9304      	str	r3, [sp, #16]
 8000ef6:	9307      	str	r3, [sp, #28]
 8000ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000efe:	4654      	mov	r4, sl
 8000f00:	2205      	movs	r2, #5
 8000f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f06:	4853      	ldr	r0, [pc, #332]	@ (8001054 <_vfiprintf_r+0x21c>)
 8000f08:	f7ff f982 	bl	8000210 <memchr>
 8000f0c:	9a04      	ldr	r2, [sp, #16]
 8000f0e:	b9d8      	cbnz	r0, 8000f48 <_vfiprintf_r+0x110>
 8000f10:	06d1      	lsls	r1, r2, #27
 8000f12:	bf44      	itt	mi
 8000f14:	2320      	movmi	r3, #32
 8000f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f1a:	0713      	lsls	r3, r2, #28
 8000f1c:	bf44      	itt	mi
 8000f1e:	232b      	movmi	r3, #43	@ 0x2b
 8000f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f24:	f89a 3000 	ldrb.w	r3, [sl]
 8000f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f2a:	d015      	beq.n	8000f58 <_vfiprintf_r+0x120>
 8000f2c:	9a07      	ldr	r2, [sp, #28]
 8000f2e:	4654      	mov	r4, sl
 8000f30:	2000      	movs	r0, #0
 8000f32:	f04f 0c0a 	mov.w	ip, #10
 8000f36:	4621      	mov	r1, r4
 8000f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f3c:	3b30      	subs	r3, #48	@ 0x30
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d94b      	bls.n	8000fda <_vfiprintf_r+0x1a2>
 8000f42:	b1b0      	cbz	r0, 8000f72 <_vfiprintf_r+0x13a>
 8000f44:	9207      	str	r2, [sp, #28]
 8000f46:	e014      	b.n	8000f72 <_vfiprintf_r+0x13a>
 8000f48:	eba0 0308 	sub.w	r3, r0, r8
 8000f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	9304      	str	r3, [sp, #16]
 8000f54:	46a2      	mov	sl, r4
 8000f56:	e7d2      	b.n	8000efe <_vfiprintf_r+0xc6>
 8000f58:	9b03      	ldr	r3, [sp, #12]
 8000f5a:	1d19      	adds	r1, r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	9103      	str	r1, [sp, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bfbb      	ittet	lt
 8000f64:	425b      	neglt	r3, r3
 8000f66:	f042 0202 	orrlt.w	r2, r2, #2
 8000f6a:	9307      	strge	r3, [sp, #28]
 8000f6c:	9307      	strlt	r3, [sp, #28]
 8000f6e:	bfb8      	it	lt
 8000f70:	9204      	strlt	r2, [sp, #16]
 8000f72:	7823      	ldrb	r3, [r4, #0]
 8000f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f76:	d10a      	bne.n	8000f8e <_vfiprintf_r+0x156>
 8000f78:	7863      	ldrb	r3, [r4, #1]
 8000f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f7c:	d132      	bne.n	8000fe4 <_vfiprintf_r+0x1ac>
 8000f7e:	9b03      	ldr	r3, [sp, #12]
 8000f80:	1d1a      	adds	r2, r3, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	9203      	str	r2, [sp, #12]
 8000f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f8a:	3402      	adds	r4, #2
 8000f8c:	9305      	str	r3, [sp, #20]
 8000f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001064 <_vfiprintf_r+0x22c>
 8000f92:	7821      	ldrb	r1, [r4, #0]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4650      	mov	r0, sl
 8000f98:	f7ff f93a 	bl	8000210 <memchr>
 8000f9c:	b138      	cbz	r0, 8000fae <_vfiprintf_r+0x176>
 8000f9e:	9b04      	ldr	r3, [sp, #16]
 8000fa0:	eba0 000a 	sub.w	r0, r0, sl
 8000fa4:	2240      	movs	r2, #64	@ 0x40
 8000fa6:	4082      	lsls	r2, r0
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	3401      	adds	r4, #1
 8000fac:	9304      	str	r3, [sp, #16]
 8000fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fb2:	4829      	ldr	r0, [pc, #164]	@ (8001058 <_vfiprintf_r+0x220>)
 8000fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000fb8:	2206      	movs	r2, #6
 8000fba:	f7ff f929 	bl	8000210 <memchr>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d03f      	beq.n	8001042 <_vfiprintf_r+0x20a>
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <_vfiprintf_r+0x224>)
 8000fc4:	bb1b      	cbnz	r3, 800100e <_vfiprintf_r+0x1d6>
 8000fc6:	9b03      	ldr	r3, [sp, #12]
 8000fc8:	3307      	adds	r3, #7
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	3308      	adds	r3, #8
 8000fd0:	9303      	str	r3, [sp, #12]
 8000fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000fd4:	443b      	add	r3, r7
 8000fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fd8:	e76a      	b.n	8000eb0 <_vfiprintf_r+0x78>
 8000fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fde:	460c      	mov	r4, r1
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	e7a8      	b.n	8000f36 <_vfiprintf_r+0xfe>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	3401      	adds	r4, #1
 8000fe8:	9305      	str	r3, [sp, #20]
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0c0a 	mov.w	ip, #10
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ff6:	3a30      	subs	r2, #48	@ 0x30
 8000ff8:	2a09      	cmp	r2, #9
 8000ffa:	d903      	bls.n	8001004 <_vfiprintf_r+0x1cc>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0c6      	beq.n	8000f8e <_vfiprintf_r+0x156>
 8001000:	9105      	str	r1, [sp, #20]
 8001002:	e7c4      	b.n	8000f8e <_vfiprintf_r+0x156>
 8001004:	fb0c 2101 	mla	r1, ip, r1, r2
 8001008:	4604      	mov	r4, r0
 800100a:	2301      	movs	r3, #1
 800100c:	e7f0      	b.n	8000ff0 <_vfiprintf_r+0x1b8>
 800100e:	ab03      	add	r3, sp, #12
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	462a      	mov	r2, r5
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <_vfiprintf_r+0x228>)
 8001016:	a904      	add	r1, sp, #16
 8001018:	4630      	mov	r0, r6
 800101a:	f3af 8000 	nop.w
 800101e:	4607      	mov	r7, r0
 8001020:	1c78      	adds	r0, r7, #1
 8001022:	d1d6      	bne.n	8000fd2 <_vfiprintf_r+0x19a>
 8001024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001026:	07d9      	lsls	r1, r3, #31
 8001028:	d405      	bmi.n	8001036 <_vfiprintf_r+0x1fe>
 800102a:	89ab      	ldrh	r3, [r5, #12]
 800102c:	059a      	lsls	r2, r3, #22
 800102e:	d402      	bmi.n	8001036 <_vfiprintf_r+0x1fe>
 8001030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001032:	f7ff fe8b 	bl	8000d4c <__retarget_lock_release_recursive>
 8001036:	89ab      	ldrh	r3, [r5, #12]
 8001038:	065b      	lsls	r3, r3, #25
 800103a:	f53f af1f 	bmi.w	8000e7c <_vfiprintf_r+0x44>
 800103e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001040:	e71e      	b.n	8000e80 <_vfiprintf_r+0x48>
 8001042:	ab03      	add	r3, sp, #12
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	462a      	mov	r2, r5
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <_vfiprintf_r+0x228>)
 800104a:	a904      	add	r1, sp, #16
 800104c:	4630      	mov	r0, r6
 800104e:	f000 f879 	bl	8001144 <_printf_i>
 8001052:	e7e4      	b.n	800101e <_vfiprintf_r+0x1e6>
 8001054:	080017a7 	.word	0x080017a7
 8001058:	080017b1 	.word	0x080017b1
 800105c:	00000000 	.word	0x00000000
 8001060:	08000e13 	.word	0x08000e13
 8001064:	080017ad 	.word	0x080017ad

08001068 <_printf_common>:
 8001068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800106c:	4616      	mov	r6, r2
 800106e:	4698      	mov	r8, r3
 8001070:	688a      	ldr	r2, [r1, #8]
 8001072:	690b      	ldr	r3, [r1, #16]
 8001074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001078:	4293      	cmp	r3, r2
 800107a:	bfb8      	it	lt
 800107c:	4613      	movlt	r3, r2
 800107e:	6033      	str	r3, [r6, #0]
 8001080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001084:	4607      	mov	r7, r0
 8001086:	460c      	mov	r4, r1
 8001088:	b10a      	cbz	r2, 800108e <_printf_common+0x26>
 800108a:	3301      	adds	r3, #1
 800108c:	6033      	str	r3, [r6, #0]
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	0699      	lsls	r1, r3, #26
 8001092:	bf42      	ittt	mi
 8001094:	6833      	ldrmi	r3, [r6, #0]
 8001096:	3302      	addmi	r3, #2
 8001098:	6033      	strmi	r3, [r6, #0]
 800109a:	6825      	ldr	r5, [r4, #0]
 800109c:	f015 0506 	ands.w	r5, r5, #6
 80010a0:	d106      	bne.n	80010b0 <_printf_common+0x48>
 80010a2:	f104 0a19 	add.w	sl, r4, #25
 80010a6:	68e3      	ldr	r3, [r4, #12]
 80010a8:	6832      	ldr	r2, [r6, #0]
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	dc26      	bgt.n	80010fe <_printf_common+0x96>
 80010b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	3b00      	subs	r3, #0
 80010b8:	bf18      	it	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	0692      	lsls	r2, r2, #26
 80010be:	d42b      	bmi.n	8001118 <_printf_common+0xb0>
 80010c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80010c4:	4641      	mov	r1, r8
 80010c6:	4638      	mov	r0, r7
 80010c8:	47c8      	blx	r9
 80010ca:	3001      	adds	r0, #1
 80010cc:	d01e      	beq.n	800110c <_printf_common+0xa4>
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	6922      	ldr	r2, [r4, #16]
 80010d2:	f003 0306 	and.w	r3, r3, #6
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf02      	ittt	eq
 80010da:	68e5      	ldreq	r5, [r4, #12]
 80010dc:	6833      	ldreq	r3, [r6, #0]
 80010de:	1aed      	subeq	r5, r5, r3
 80010e0:	68a3      	ldr	r3, [r4, #8]
 80010e2:	bf0c      	ite	eq
 80010e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010e8:	2500      	movne	r5, #0
 80010ea:	4293      	cmp	r3, r2
 80010ec:	bfc4      	itt	gt
 80010ee:	1a9b      	subgt	r3, r3, r2
 80010f0:	18ed      	addgt	r5, r5, r3
 80010f2:	2600      	movs	r6, #0
 80010f4:	341a      	adds	r4, #26
 80010f6:	42b5      	cmp	r5, r6
 80010f8:	d11a      	bne.n	8001130 <_printf_common+0xc8>
 80010fa:	2000      	movs	r0, #0
 80010fc:	e008      	b.n	8001110 <_printf_common+0xa8>
 80010fe:	2301      	movs	r3, #1
 8001100:	4652      	mov	r2, sl
 8001102:	4641      	mov	r1, r8
 8001104:	4638      	mov	r0, r7
 8001106:	47c8      	blx	r9
 8001108:	3001      	adds	r0, #1
 800110a:	d103      	bne.n	8001114 <_printf_common+0xac>
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001114:	3501      	adds	r5, #1
 8001116:	e7c6      	b.n	80010a6 <_printf_common+0x3e>
 8001118:	18e1      	adds	r1, r4, r3
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	2030      	movs	r0, #48	@ 0x30
 800111e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001122:	4422      	add	r2, r4
 8001124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800112c:	3302      	adds	r3, #2
 800112e:	e7c7      	b.n	80010c0 <_printf_common+0x58>
 8001130:	2301      	movs	r3, #1
 8001132:	4622      	mov	r2, r4
 8001134:	4641      	mov	r1, r8
 8001136:	4638      	mov	r0, r7
 8001138:	47c8      	blx	r9
 800113a:	3001      	adds	r0, #1
 800113c:	d0e6      	beq.n	800110c <_printf_common+0xa4>
 800113e:	3601      	adds	r6, #1
 8001140:	e7d9      	b.n	80010f6 <_printf_common+0x8e>
	...

08001144 <_printf_i>:
 8001144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	7e0f      	ldrb	r7, [r1, #24]
 800114a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800114c:	2f78      	cmp	r7, #120	@ 0x78
 800114e:	4691      	mov	r9, r2
 8001150:	4680      	mov	r8, r0
 8001152:	460c      	mov	r4, r1
 8001154:	469a      	mov	sl, r3
 8001156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800115a:	d807      	bhi.n	800116c <_printf_i+0x28>
 800115c:	2f62      	cmp	r7, #98	@ 0x62
 800115e:	d80a      	bhi.n	8001176 <_printf_i+0x32>
 8001160:	2f00      	cmp	r7, #0
 8001162:	f000 80d2 	beq.w	800130a <_printf_i+0x1c6>
 8001166:	2f58      	cmp	r7, #88	@ 0x58
 8001168:	f000 80b9 	beq.w	80012de <_printf_i+0x19a>
 800116c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001174:	e03a      	b.n	80011ec <_printf_i+0xa8>
 8001176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800117a:	2b15      	cmp	r3, #21
 800117c:	d8f6      	bhi.n	800116c <_printf_i+0x28>
 800117e:	a101      	add	r1, pc, #4	@ (adr r1, 8001184 <_printf_i+0x40>)
 8001180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001184:	080011dd 	.word	0x080011dd
 8001188:	080011f1 	.word	0x080011f1
 800118c:	0800116d 	.word	0x0800116d
 8001190:	0800116d 	.word	0x0800116d
 8001194:	0800116d 	.word	0x0800116d
 8001198:	0800116d 	.word	0x0800116d
 800119c:	080011f1 	.word	0x080011f1
 80011a0:	0800116d 	.word	0x0800116d
 80011a4:	0800116d 	.word	0x0800116d
 80011a8:	0800116d 	.word	0x0800116d
 80011ac:	0800116d 	.word	0x0800116d
 80011b0:	080012f1 	.word	0x080012f1
 80011b4:	0800121b 	.word	0x0800121b
 80011b8:	080012ab 	.word	0x080012ab
 80011bc:	0800116d 	.word	0x0800116d
 80011c0:	0800116d 	.word	0x0800116d
 80011c4:	08001313 	.word	0x08001313
 80011c8:	0800116d 	.word	0x0800116d
 80011cc:	0800121b 	.word	0x0800121b
 80011d0:	0800116d 	.word	0x0800116d
 80011d4:	0800116d 	.word	0x0800116d
 80011d8:	080012b3 	.word	0x080012b3
 80011dc:	6833      	ldr	r3, [r6, #0]
 80011de:	1d1a      	adds	r2, r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6032      	str	r2, [r6, #0]
 80011e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80011ec:	2301      	movs	r3, #1
 80011ee:	e09d      	b.n	800132c <_printf_i+0x1e8>
 80011f0:	6833      	ldr	r3, [r6, #0]
 80011f2:	6820      	ldr	r0, [r4, #0]
 80011f4:	1d19      	adds	r1, r3, #4
 80011f6:	6031      	str	r1, [r6, #0]
 80011f8:	0606      	lsls	r6, r0, #24
 80011fa:	d501      	bpl.n	8001200 <_printf_i+0xbc>
 80011fc:	681d      	ldr	r5, [r3, #0]
 80011fe:	e003      	b.n	8001208 <_printf_i+0xc4>
 8001200:	0645      	lsls	r5, r0, #25
 8001202:	d5fb      	bpl.n	80011fc <_printf_i+0xb8>
 8001204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001208:	2d00      	cmp	r5, #0
 800120a:	da03      	bge.n	8001214 <_printf_i+0xd0>
 800120c:	232d      	movs	r3, #45	@ 0x2d
 800120e:	426d      	negs	r5, r5
 8001210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001214:	4859      	ldr	r0, [pc, #356]	@ (800137c <_printf_i+0x238>)
 8001216:	230a      	movs	r3, #10
 8001218:	e011      	b.n	800123e <_printf_i+0xfa>
 800121a:	6821      	ldr	r1, [r4, #0]
 800121c:	6833      	ldr	r3, [r6, #0]
 800121e:	0608      	lsls	r0, r1, #24
 8001220:	f853 5b04 	ldr.w	r5, [r3], #4
 8001224:	d402      	bmi.n	800122c <_printf_i+0xe8>
 8001226:	0649      	lsls	r1, r1, #25
 8001228:	bf48      	it	mi
 800122a:	b2ad      	uxthmi	r5, r5
 800122c:	2f6f      	cmp	r7, #111	@ 0x6f
 800122e:	4853      	ldr	r0, [pc, #332]	@ (800137c <_printf_i+0x238>)
 8001230:	6033      	str	r3, [r6, #0]
 8001232:	bf14      	ite	ne
 8001234:	230a      	movne	r3, #10
 8001236:	2308      	moveq	r3, #8
 8001238:	2100      	movs	r1, #0
 800123a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800123e:	6866      	ldr	r6, [r4, #4]
 8001240:	60a6      	str	r6, [r4, #8]
 8001242:	2e00      	cmp	r6, #0
 8001244:	bfa2      	ittt	ge
 8001246:	6821      	ldrge	r1, [r4, #0]
 8001248:	f021 0104 	bicge.w	r1, r1, #4
 800124c:	6021      	strge	r1, [r4, #0]
 800124e:	b90d      	cbnz	r5, 8001254 <_printf_i+0x110>
 8001250:	2e00      	cmp	r6, #0
 8001252:	d04b      	beq.n	80012ec <_printf_i+0x1a8>
 8001254:	4616      	mov	r6, r2
 8001256:	fbb5 f1f3 	udiv	r1, r5, r3
 800125a:	fb03 5711 	mls	r7, r3, r1, r5
 800125e:	5dc7      	ldrb	r7, [r0, r7]
 8001260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001264:	462f      	mov	r7, r5
 8001266:	42bb      	cmp	r3, r7
 8001268:	460d      	mov	r5, r1
 800126a:	d9f4      	bls.n	8001256 <_printf_i+0x112>
 800126c:	2b08      	cmp	r3, #8
 800126e:	d10b      	bne.n	8001288 <_printf_i+0x144>
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	07df      	lsls	r7, r3, #31
 8001274:	d508      	bpl.n	8001288 <_printf_i+0x144>
 8001276:	6923      	ldr	r3, [r4, #16]
 8001278:	6861      	ldr	r1, [r4, #4]
 800127a:	4299      	cmp	r1, r3
 800127c:	bfde      	ittt	le
 800127e:	2330      	movle	r3, #48	@ 0x30
 8001280:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001284:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001288:	1b92      	subs	r2, r2, r6
 800128a:	6122      	str	r2, [r4, #16]
 800128c:	f8cd a000 	str.w	sl, [sp]
 8001290:	464b      	mov	r3, r9
 8001292:	aa03      	add	r2, sp, #12
 8001294:	4621      	mov	r1, r4
 8001296:	4640      	mov	r0, r8
 8001298:	f7ff fee6 	bl	8001068 <_printf_common>
 800129c:	3001      	adds	r0, #1
 800129e:	d14a      	bne.n	8001336 <_printf_i+0x1f2>
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	b004      	add	sp, #16
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	4833      	ldr	r0, [pc, #204]	@ (8001380 <_printf_i+0x23c>)
 80012b4:	2778      	movs	r7, #120	@ 0x78
 80012b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	6831      	ldr	r1, [r6, #0]
 80012be:	061f      	lsls	r7, r3, #24
 80012c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80012c4:	d402      	bmi.n	80012cc <_printf_i+0x188>
 80012c6:	065f      	lsls	r7, r3, #25
 80012c8:	bf48      	it	mi
 80012ca:	b2ad      	uxthmi	r5, r5
 80012cc:	6031      	str	r1, [r6, #0]
 80012ce:	07d9      	lsls	r1, r3, #31
 80012d0:	bf44      	itt	mi
 80012d2:	f043 0320 	orrmi.w	r3, r3, #32
 80012d6:	6023      	strmi	r3, [r4, #0]
 80012d8:	b11d      	cbz	r5, 80012e2 <_printf_i+0x19e>
 80012da:	2310      	movs	r3, #16
 80012dc:	e7ac      	b.n	8001238 <_printf_i+0xf4>
 80012de:	4827      	ldr	r0, [pc, #156]	@ (800137c <_printf_i+0x238>)
 80012e0:	e7e9      	b.n	80012b6 <_printf_i+0x172>
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	f023 0320 	bic.w	r3, r3, #32
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	e7f6      	b.n	80012da <_printf_i+0x196>
 80012ec:	4616      	mov	r6, r2
 80012ee:	e7bd      	b.n	800126c <_printf_i+0x128>
 80012f0:	6833      	ldr	r3, [r6, #0]
 80012f2:	6825      	ldr	r5, [r4, #0]
 80012f4:	6961      	ldr	r1, [r4, #20]
 80012f6:	1d18      	adds	r0, r3, #4
 80012f8:	6030      	str	r0, [r6, #0]
 80012fa:	062e      	lsls	r6, r5, #24
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	d501      	bpl.n	8001304 <_printf_i+0x1c0>
 8001300:	6019      	str	r1, [r3, #0]
 8001302:	e002      	b.n	800130a <_printf_i+0x1c6>
 8001304:	0668      	lsls	r0, r5, #25
 8001306:	d5fb      	bpl.n	8001300 <_printf_i+0x1bc>
 8001308:	8019      	strh	r1, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	6123      	str	r3, [r4, #16]
 800130e:	4616      	mov	r6, r2
 8001310:	e7bc      	b.n	800128c <_printf_i+0x148>
 8001312:	6833      	ldr	r3, [r6, #0]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	6032      	str	r2, [r6, #0]
 8001318:	681e      	ldr	r6, [r3, #0]
 800131a:	6862      	ldr	r2, [r4, #4]
 800131c:	2100      	movs	r1, #0
 800131e:	4630      	mov	r0, r6
 8001320:	f7fe ff76 	bl	8000210 <memchr>
 8001324:	b108      	cbz	r0, 800132a <_printf_i+0x1e6>
 8001326:	1b80      	subs	r0, r0, r6
 8001328:	6060      	str	r0, [r4, #4]
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	6123      	str	r3, [r4, #16]
 800132e:	2300      	movs	r3, #0
 8001330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001334:	e7aa      	b.n	800128c <_printf_i+0x148>
 8001336:	6923      	ldr	r3, [r4, #16]
 8001338:	4632      	mov	r2, r6
 800133a:	4649      	mov	r1, r9
 800133c:	4640      	mov	r0, r8
 800133e:	47d0      	blx	sl
 8001340:	3001      	adds	r0, #1
 8001342:	d0ad      	beq.n	80012a0 <_printf_i+0x15c>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	079b      	lsls	r3, r3, #30
 8001348:	d413      	bmi.n	8001372 <_printf_i+0x22e>
 800134a:	68e0      	ldr	r0, [r4, #12]
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	4298      	cmp	r0, r3
 8001350:	bfb8      	it	lt
 8001352:	4618      	movlt	r0, r3
 8001354:	e7a6      	b.n	80012a4 <_printf_i+0x160>
 8001356:	2301      	movs	r3, #1
 8001358:	4632      	mov	r2, r6
 800135a:	4649      	mov	r1, r9
 800135c:	4640      	mov	r0, r8
 800135e:	47d0      	blx	sl
 8001360:	3001      	adds	r0, #1
 8001362:	d09d      	beq.n	80012a0 <_printf_i+0x15c>
 8001364:	3501      	adds	r5, #1
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	9903      	ldr	r1, [sp, #12]
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	42ab      	cmp	r3, r5
 800136e:	dcf2      	bgt.n	8001356 <_printf_i+0x212>
 8001370:	e7eb      	b.n	800134a <_printf_i+0x206>
 8001372:	2500      	movs	r5, #0
 8001374:	f104 0619 	add.w	r6, r4, #25
 8001378:	e7f5      	b.n	8001366 <_printf_i+0x222>
 800137a:	bf00      	nop
 800137c:	080017b8 	.word	0x080017b8
 8001380:	080017c9 	.word	0x080017c9

08001384 <__sflush_r>:
 8001384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	0716      	lsls	r6, r2, #28
 800138e:	4605      	mov	r5, r0
 8001390:	460c      	mov	r4, r1
 8001392:	d454      	bmi.n	800143e <__sflush_r+0xba>
 8001394:	684b      	ldr	r3, [r1, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dc02      	bgt.n	80013a0 <__sflush_r+0x1c>
 800139a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd48      	ble.n	8001432 <__sflush_r+0xae>
 80013a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d045      	beq.n	8001432 <__sflush_r+0xae>
 80013a6:	2300      	movs	r3, #0
 80013a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013ac:	682f      	ldr	r7, [r5, #0]
 80013ae:	6a21      	ldr	r1, [r4, #32]
 80013b0:	602b      	str	r3, [r5, #0]
 80013b2:	d030      	beq.n	8001416 <__sflush_r+0x92>
 80013b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	0759      	lsls	r1, r3, #29
 80013ba:	d505      	bpl.n	80013c8 <__sflush_r+0x44>
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013c2:	b10b      	cbz	r3, 80013c8 <__sflush_r+0x44>
 80013c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	2300      	movs	r3, #0
 80013ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013cc:	6a21      	ldr	r1, [r4, #32]
 80013ce:	4628      	mov	r0, r5
 80013d0:	47b0      	blx	r6
 80013d2:	1c43      	adds	r3, r0, #1
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	d106      	bne.n	80013e6 <__sflush_r+0x62>
 80013d8:	6829      	ldr	r1, [r5, #0]
 80013da:	291d      	cmp	r1, #29
 80013dc:	d82b      	bhi.n	8001436 <__sflush_r+0xb2>
 80013de:	4a2a      	ldr	r2, [pc, #168]	@ (8001488 <__sflush_r+0x104>)
 80013e0:	410a      	asrs	r2, r1
 80013e2:	07d6      	lsls	r6, r2, #31
 80013e4:	d427      	bmi.n	8001436 <__sflush_r+0xb2>
 80013e6:	2200      	movs	r2, #0
 80013e8:	6062      	str	r2, [r4, #4]
 80013ea:	04d9      	lsls	r1, r3, #19
 80013ec:	6922      	ldr	r2, [r4, #16]
 80013ee:	6022      	str	r2, [r4, #0]
 80013f0:	d504      	bpl.n	80013fc <__sflush_r+0x78>
 80013f2:	1c42      	adds	r2, r0, #1
 80013f4:	d101      	bne.n	80013fa <__sflush_r+0x76>
 80013f6:	682b      	ldr	r3, [r5, #0]
 80013f8:	b903      	cbnz	r3, 80013fc <__sflush_r+0x78>
 80013fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80013fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013fe:	602f      	str	r7, [r5, #0]
 8001400:	b1b9      	cbz	r1, 8001432 <__sflush_r+0xae>
 8001402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001406:	4299      	cmp	r1, r3
 8001408:	d002      	beq.n	8001410 <__sflush_r+0x8c>
 800140a:	4628      	mov	r0, r5
 800140c:	f7ff fca0 	bl	8000d50 <_free_r>
 8001410:	2300      	movs	r3, #0
 8001412:	6363      	str	r3, [r4, #52]	@ 0x34
 8001414:	e00d      	b.n	8001432 <__sflush_r+0xae>
 8001416:	2301      	movs	r3, #1
 8001418:	4628      	mov	r0, r5
 800141a:	47b0      	blx	r6
 800141c:	4602      	mov	r2, r0
 800141e:	1c50      	adds	r0, r2, #1
 8001420:	d1c9      	bne.n	80013b6 <__sflush_r+0x32>
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0c6      	beq.n	80013b6 <__sflush_r+0x32>
 8001428:	2b1d      	cmp	r3, #29
 800142a:	d001      	beq.n	8001430 <__sflush_r+0xac>
 800142c:	2b16      	cmp	r3, #22
 800142e:	d11e      	bne.n	800146e <__sflush_r+0xea>
 8001430:	602f      	str	r7, [r5, #0]
 8001432:	2000      	movs	r0, #0
 8001434:	e022      	b.n	800147c <__sflush_r+0xf8>
 8001436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800143a:	b21b      	sxth	r3, r3
 800143c:	e01b      	b.n	8001476 <__sflush_r+0xf2>
 800143e:	690f      	ldr	r7, [r1, #16]
 8001440:	2f00      	cmp	r7, #0
 8001442:	d0f6      	beq.n	8001432 <__sflush_r+0xae>
 8001444:	0793      	lsls	r3, r2, #30
 8001446:	680e      	ldr	r6, [r1, #0]
 8001448:	bf08      	it	eq
 800144a:	694b      	ldreq	r3, [r1, #20]
 800144c:	600f      	str	r7, [r1, #0]
 800144e:	bf18      	it	ne
 8001450:	2300      	movne	r3, #0
 8001452:	eba6 0807 	sub.w	r8, r6, r7
 8001456:	608b      	str	r3, [r1, #8]
 8001458:	f1b8 0f00 	cmp.w	r8, #0
 800145c:	dde9      	ble.n	8001432 <__sflush_r+0xae>
 800145e:	6a21      	ldr	r1, [r4, #32]
 8001460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001462:	4643      	mov	r3, r8
 8001464:	463a      	mov	r2, r7
 8001466:	4628      	mov	r0, r5
 8001468:	47b0      	blx	r6
 800146a:	2800      	cmp	r0, #0
 800146c:	dc08      	bgt.n	8001480 <__sflush_r+0xfc>
 800146e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001476:	81a3      	strh	r3, [r4, #12]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001480:	4407      	add	r7, r0
 8001482:	eba8 0800 	sub.w	r8, r8, r0
 8001486:	e7e7      	b.n	8001458 <__sflush_r+0xd4>
 8001488:	dfbffffe 	.word	0xdfbffffe

0800148c <_fflush_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	690b      	ldr	r3, [r1, #16]
 8001490:	4605      	mov	r5, r0
 8001492:	460c      	mov	r4, r1
 8001494:	b913      	cbnz	r3, 800149c <_fflush_r+0x10>
 8001496:	2500      	movs	r5, #0
 8001498:	4628      	mov	r0, r5
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	b118      	cbz	r0, 80014a6 <_fflush_r+0x1a>
 800149e:	6a03      	ldr	r3, [r0, #32]
 80014a0:	b90b      	cbnz	r3, 80014a6 <_fflush_r+0x1a>
 80014a2:	f7ff fb3d 	bl	8000b20 <__sinit>
 80014a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f3      	beq.n	8001496 <_fflush_r+0xa>
 80014ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014b0:	07d0      	lsls	r0, r2, #31
 80014b2:	d404      	bmi.n	80014be <_fflush_r+0x32>
 80014b4:	0599      	lsls	r1, r3, #22
 80014b6:	d402      	bmi.n	80014be <_fflush_r+0x32>
 80014b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014ba:	f7ff fc46 	bl	8000d4a <__retarget_lock_acquire_recursive>
 80014be:	4628      	mov	r0, r5
 80014c0:	4621      	mov	r1, r4
 80014c2:	f7ff ff5f 	bl	8001384 <__sflush_r>
 80014c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014c8:	07da      	lsls	r2, r3, #31
 80014ca:	4605      	mov	r5, r0
 80014cc:	d4e4      	bmi.n	8001498 <_fflush_r+0xc>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	059b      	lsls	r3, r3, #22
 80014d2:	d4e1      	bmi.n	8001498 <_fflush_r+0xc>
 80014d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014d6:	f7ff fc39 	bl	8000d4c <__retarget_lock_release_recursive>
 80014da:	e7dd      	b.n	8001498 <_fflush_r+0xc>

080014dc <__swbuf_r>:
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014de:	460e      	mov	r6, r1
 80014e0:	4614      	mov	r4, r2
 80014e2:	4605      	mov	r5, r0
 80014e4:	b118      	cbz	r0, 80014ee <__swbuf_r+0x12>
 80014e6:	6a03      	ldr	r3, [r0, #32]
 80014e8:	b90b      	cbnz	r3, 80014ee <__swbuf_r+0x12>
 80014ea:	f7ff fb19 	bl	8000b20 <__sinit>
 80014ee:	69a3      	ldr	r3, [r4, #24]
 80014f0:	60a3      	str	r3, [r4, #8]
 80014f2:	89a3      	ldrh	r3, [r4, #12]
 80014f4:	071a      	lsls	r2, r3, #28
 80014f6:	d501      	bpl.n	80014fc <__swbuf_r+0x20>
 80014f8:	6923      	ldr	r3, [r4, #16]
 80014fa:	b943      	cbnz	r3, 800150e <__swbuf_r+0x32>
 80014fc:	4621      	mov	r1, r4
 80014fe:	4628      	mov	r0, r5
 8001500:	f000 f82a 	bl	8001558 <__swsetup_r>
 8001504:	b118      	cbz	r0, 800150e <__swbuf_r+0x32>
 8001506:	f04f 37ff 	mov.w	r7, #4294967295
 800150a:	4638      	mov	r0, r7
 800150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	6922      	ldr	r2, [r4, #16]
 8001512:	1a98      	subs	r0, r3, r2
 8001514:	6963      	ldr	r3, [r4, #20]
 8001516:	b2f6      	uxtb	r6, r6
 8001518:	4283      	cmp	r3, r0
 800151a:	4637      	mov	r7, r6
 800151c:	dc05      	bgt.n	800152a <__swbuf_r+0x4e>
 800151e:	4621      	mov	r1, r4
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff ffb3 	bl	800148c <_fflush_r>
 8001526:	2800      	cmp	r0, #0
 8001528:	d1ed      	bne.n	8001506 <__swbuf_r+0x2a>
 800152a:	68a3      	ldr	r3, [r4, #8]
 800152c:	3b01      	subs	r3, #1
 800152e:	60a3      	str	r3, [r4, #8]
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	6022      	str	r2, [r4, #0]
 8001536:	701e      	strb	r6, [r3, #0]
 8001538:	6962      	ldr	r2, [r4, #20]
 800153a:	1c43      	adds	r3, r0, #1
 800153c:	429a      	cmp	r2, r3
 800153e:	d004      	beq.n	800154a <__swbuf_r+0x6e>
 8001540:	89a3      	ldrh	r3, [r4, #12]
 8001542:	07db      	lsls	r3, r3, #31
 8001544:	d5e1      	bpl.n	800150a <__swbuf_r+0x2e>
 8001546:	2e0a      	cmp	r6, #10
 8001548:	d1df      	bne.n	800150a <__swbuf_r+0x2e>
 800154a:	4621      	mov	r1, r4
 800154c:	4628      	mov	r0, r5
 800154e:	f7ff ff9d 	bl	800148c <_fflush_r>
 8001552:	2800      	cmp	r0, #0
 8001554:	d0d9      	beq.n	800150a <__swbuf_r+0x2e>
 8001556:	e7d6      	b.n	8001506 <__swbuf_r+0x2a>

08001558 <__swsetup_r>:
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <__swsetup_r+0xa8>)
 800155c:	4605      	mov	r5, r0
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	460c      	mov	r4, r1
 8001562:	b118      	cbz	r0, 800156c <__swsetup_r+0x14>
 8001564:	6a03      	ldr	r3, [r0, #32]
 8001566:	b90b      	cbnz	r3, 800156c <__swsetup_r+0x14>
 8001568:	f7ff fada 	bl	8000b20 <__sinit>
 800156c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001570:	0719      	lsls	r1, r3, #28
 8001572:	d422      	bmi.n	80015ba <__swsetup_r+0x62>
 8001574:	06da      	lsls	r2, r3, #27
 8001576:	d407      	bmi.n	8001588 <__swsetup_r+0x30>
 8001578:	2209      	movs	r2, #9
 800157a:	602a      	str	r2, [r5, #0]
 800157c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001580:	81a3      	strh	r3, [r4, #12]
 8001582:	f04f 30ff 	mov.w	r0, #4294967295
 8001586:	e033      	b.n	80015f0 <__swsetup_r+0x98>
 8001588:	0758      	lsls	r0, r3, #29
 800158a:	d512      	bpl.n	80015b2 <__swsetup_r+0x5a>
 800158c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800158e:	b141      	cbz	r1, 80015a2 <__swsetup_r+0x4a>
 8001590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001594:	4299      	cmp	r1, r3
 8001596:	d002      	beq.n	800159e <__swsetup_r+0x46>
 8001598:	4628      	mov	r0, r5
 800159a:	f7ff fbd9 	bl	8000d50 <_free_r>
 800159e:	2300      	movs	r3, #0
 80015a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80015a2:	89a3      	ldrh	r3, [r4, #12]
 80015a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80015a8:	81a3      	strh	r3, [r4, #12]
 80015aa:	2300      	movs	r3, #0
 80015ac:	6063      	str	r3, [r4, #4]
 80015ae:	6923      	ldr	r3, [r4, #16]
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	89a3      	ldrh	r3, [r4, #12]
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	81a3      	strh	r3, [r4, #12]
 80015ba:	6923      	ldr	r3, [r4, #16]
 80015bc:	b94b      	cbnz	r3, 80015d2 <__swsetup_r+0x7a>
 80015be:	89a3      	ldrh	r3, [r4, #12]
 80015c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c8:	d003      	beq.n	80015d2 <__swsetup_r+0x7a>
 80015ca:	4621      	mov	r1, r4
 80015cc:	4628      	mov	r0, r5
 80015ce:	f000 f83f 	bl	8001650 <__smakebuf_r>
 80015d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d6:	f013 0201 	ands.w	r2, r3, #1
 80015da:	d00a      	beq.n	80015f2 <__swsetup_r+0x9a>
 80015dc:	2200      	movs	r2, #0
 80015de:	60a2      	str	r2, [r4, #8]
 80015e0:	6962      	ldr	r2, [r4, #20]
 80015e2:	4252      	negs	r2, r2
 80015e4:	61a2      	str	r2, [r4, #24]
 80015e6:	6922      	ldr	r2, [r4, #16]
 80015e8:	b942      	cbnz	r2, 80015fc <__swsetup_r+0xa4>
 80015ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80015ee:	d1c5      	bne.n	800157c <__swsetup_r+0x24>
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
 80015f2:	0799      	lsls	r1, r3, #30
 80015f4:	bf58      	it	pl
 80015f6:	6962      	ldrpl	r2, [r4, #20]
 80015f8:	60a2      	str	r2, [r4, #8]
 80015fa:	e7f4      	b.n	80015e6 <__swsetup_r+0x8e>
 80015fc:	2000      	movs	r0, #0
 80015fe:	e7f7      	b.n	80015f0 <__swsetup_r+0x98>
 8001600:	2000000c 	.word	0x2000000c

08001604 <__swhatbuf_r>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	460c      	mov	r4, r1
 8001608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800160c:	2900      	cmp	r1, #0
 800160e:	b096      	sub	sp, #88	@ 0x58
 8001610:	4615      	mov	r5, r2
 8001612:	461e      	mov	r6, r3
 8001614:	da0d      	bge.n	8001632 <__swhatbuf_r+0x2e>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800161c:	f04f 0100 	mov.w	r1, #0
 8001620:	bf14      	ite	ne
 8001622:	2340      	movne	r3, #64	@ 0x40
 8001624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001628:	2000      	movs	r0, #0
 800162a:	6031      	str	r1, [r6, #0]
 800162c:	602b      	str	r3, [r5, #0]
 800162e:	b016      	add	sp, #88	@ 0x58
 8001630:	bd70      	pop	{r4, r5, r6, pc}
 8001632:	466a      	mov	r2, sp
 8001634:	f000 f848 	bl	80016c8 <_fstat_r>
 8001638:	2800      	cmp	r0, #0
 800163a:	dbec      	blt.n	8001616 <__swhatbuf_r+0x12>
 800163c:	9901      	ldr	r1, [sp, #4]
 800163e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001646:	4259      	negs	r1, r3
 8001648:	4159      	adcs	r1, r3
 800164a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800164e:	e7eb      	b.n	8001628 <__swhatbuf_r+0x24>

08001650 <__smakebuf_r>:
 8001650:	898b      	ldrh	r3, [r1, #12]
 8001652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001654:	079d      	lsls	r5, r3, #30
 8001656:	4606      	mov	r6, r0
 8001658:	460c      	mov	r4, r1
 800165a:	d507      	bpl.n	800166c <__smakebuf_r+0x1c>
 800165c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	6123      	str	r3, [r4, #16]
 8001664:	2301      	movs	r3, #1
 8001666:	6163      	str	r3, [r4, #20]
 8001668:	b003      	add	sp, #12
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	ab01      	add	r3, sp, #4
 800166e:	466a      	mov	r2, sp
 8001670:	f7ff ffc8 	bl	8001604 <__swhatbuf_r>
 8001674:	9f00      	ldr	r7, [sp, #0]
 8001676:	4605      	mov	r5, r0
 8001678:	4639      	mov	r1, r7
 800167a:	4630      	mov	r0, r6
 800167c:	f7ff f938 	bl	80008f0 <_malloc_r>
 8001680:	b948      	cbnz	r0, 8001696 <__smakebuf_r+0x46>
 8001682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001686:	059a      	lsls	r2, r3, #22
 8001688:	d4ee      	bmi.n	8001668 <__smakebuf_r+0x18>
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	81a3      	strh	r3, [r4, #12]
 8001694:	e7e2      	b.n	800165c <__smakebuf_r+0xc>
 8001696:	89a3      	ldrh	r3, [r4, #12]
 8001698:	6020      	str	r0, [r4, #0]
 800169a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169e:	81a3      	strh	r3, [r4, #12]
 80016a0:	9b01      	ldr	r3, [sp, #4]
 80016a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016a6:	b15b      	cbz	r3, 80016c0 <__smakebuf_r+0x70>
 80016a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ac:	4630      	mov	r0, r6
 80016ae:	f000 f81d 	bl	80016ec <_isatty_r>
 80016b2:	b128      	cbz	r0, 80016c0 <__smakebuf_r+0x70>
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	431d      	orrs	r5, r3
 80016c4:	81a5      	strh	r5, [r4, #12]
 80016c6:	e7cf      	b.n	8001668 <__smakebuf_r+0x18>

080016c8 <_fstat_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4d07      	ldr	r5, [pc, #28]	@ (80016e8 <_fstat_r+0x20>)
 80016cc:	2300      	movs	r3, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	f7fe ffae 	bl	8000636 <_fstat>
 80016da:	1c43      	adds	r3, r0, #1
 80016dc:	d102      	bne.n	80016e4 <_fstat_r+0x1c>
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	b103      	cbz	r3, 80016e4 <_fstat_r+0x1c>
 80016e2:	6023      	str	r3, [r4, #0]
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
 80016e6:	bf00      	nop
 80016e8:	200001c4 	.word	0x200001c4

080016ec <_isatty_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4d06      	ldr	r5, [pc, #24]	@ (8001708 <_isatty_r+0x1c>)
 80016f0:	2300      	movs	r3, #0
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	602b      	str	r3, [r5, #0]
 80016f8:	f7fe ffad 	bl	8000656 <_isatty>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d102      	bne.n	8001706 <_isatty_r+0x1a>
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	b103      	cbz	r3, 8001706 <_isatty_r+0x1a>
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	bd38      	pop	{r3, r4, r5, pc}
 8001708:	200001c4 	.word	0x200001c4

0800170c <_init>:
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	bf00      	nop
 8001710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001712:	bc08      	pop	{r3}
 8001714:	469e      	mov	lr, r3
 8001716:	4770      	bx	lr

08001718 <_fini>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	bf00      	nop
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr
