
12-observer_pattern.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08001b84  08001b84  00002b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d44  08001d44  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d44  08001d44  00002d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d4c  08001d4c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d4c  08001d4c  00002d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d50  08001d50  00002d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001d54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001db0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001db0  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001910  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000968  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00005308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000179  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002401  00000000  00000000  000056a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003100  00000000  00000000  00007aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910e9  00000000  00000000  0000abaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bc93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000110c  00000000  00000000  0009bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  0009cde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b6c 	.word	0x08001b6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001b6c 	.word	0x08001b6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <display_client_init>:

#include "env_display_client.h"
#include <stdlib.h>
#include "uart.h"

void display_client_init(display_client_t * const me){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	me->fn_handler = display_client_handle_new_data;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <display_client_init+0x1c>)
 80002bc:	60da      	str	r2, [r3, #12]
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	080002f9 	.word	0x080002f9

080002d0 <display_client_create>:
display_client_t * display_client_create(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0

display_client_t * me   = (display_client_t *)malloc(sizeof(display_client_t));
 80002d6:	2010      	movs	r0, #16
 80002d8:	f000 fbf0 	bl	8000abc <malloc>
 80002dc:	4603      	mov	r3, r0
 80002de:	607b      	str	r3, [r7, #4]

	if( me!=NULL){
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <display_client_create+0x1c>

	  display_client_init(me);
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f7ff ffe2 	bl	80002b0 <display_client_init>
	}

	return me;
 80002ec:	687b      	ldr	r3, [r7, #4]

}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <display_client_handle_new_data>:

void display_client_handle_new_data(void * me, env_data_t data){
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	4638      	mov	r0, r7
 8000302:	e880 000e 	stmia.w	r0, {r1, r2, r3}

   ((display_client_t *)me)->data =  data;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	461c      	mov	r4, r3
 800030a:	463b      	mov	r3, r7
 800030c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000310:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  /*Process data*/
	  //Do somthing..
	  printf("display_module : \t New data :  %d %d %d \n\r",
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	685a      	ldr	r2, [r3, #4]
						((display_client_t *)me)->data.temperature,
						((display_client_t *)me)->data.humidity,
						((display_client_t *)me)->data.sprayed);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	7a1b      	ldrb	r3, [r3, #8]
	  printf("display_module : \t New data :  %d %d %d \n\r",
 8000320:	4803      	ldr	r0, [pc, #12]	@ (8000330 <display_client_handle_new_data+0x38>)
 8000322:	f000 fd89 	bl	8000e38 <iprintf>

}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bd90      	pop	{r4, r7, pc}
 800032e:	bf00      	nop
 8000330:	08001b84 	.word	0x08001b84

08000334 <display_client_subscribe>:


void display_client_subscribe(display_client_t * const me, env_sensor_t * const server){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]

	  for(int i=0;i<MAX_CLIENT;i++){
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e044      	b.n	80003ce <display_client_subscribe+0x9a>

		  //Check if client is already subscribed
			  if(server->clients[i].pObject ==  me){
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	3202      	adds	r2, #2
 800034a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d040      	beq.n	80003d6 <display_client_subscribe+0xa2>
				  return;
				}
				//Add new client
				if(server->clients[i].pObject == NULL){
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	3202      	adds	r2, #2
 800035a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d132      	bne.n	80003c8 <display_client_subscribe+0x94>

				   server->n_client++;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	60da      	str	r2, [r3, #12]
					 server->clients[i].pObject =  me;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	3202      	adds	r2, #2
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					 server->clients[i].fn_handler = me->fn_handler;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	6839      	ldr	r1, [r7, #0]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3302      	adds	r3, #2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	440b      	add	r3, r1
 8000386:	605a      	str	r2, [r3, #4]

					 //Remove duplicate
					for(int j= i+1; j<MAX_CLIENT;j++){
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3301      	adds	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	e017      	b.n	80003c0 <display_client_subscribe+0x8c>
					   if(server->clients[j].pObject == me){
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	3202      	adds	r2, #2
 8000396:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	429a      	cmp	r2, r3
 800039e:	d10c      	bne.n	80003ba <display_client_subscribe+0x86>
						    server->clients[j].pObject = NULL;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	3202      	adds	r2, #2
 80003a6:	2100      	movs	r1, #0
 80003a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
							   server->clients[j].fn_handler =  NULL;
 80003ac:	683a      	ldr	r2, [r7, #0]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	3302      	adds	r3, #2
 80003b2:	00db      	lsls	r3, r3, #3
 80003b4:	4413      	add	r3, r2
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
					for(int j= i+1; j<MAX_CLIENT;j++){
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	3301      	adds	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2b09      	cmp	r3, #9
 80003c4:	dde4      	ble.n	8000390 <display_client_subscribe+0x5c>
						 }
					}
					return;
 80003c6:	e007      	b.n	80003d8 <display_client_subscribe+0xa4>
	  for(int i=0;i<MAX_CLIENT;i++){
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	3301      	adds	r3, #1
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2b09      	cmp	r3, #9
 80003d2:	ddb7      	ble.n	8000344 <display_client_subscribe+0x10>
 80003d4:	e000      	b.n	80003d8 <display_client_subscribe+0xa4>
				  return;
 80003d6:	bf00      	nop
				}
		}


}
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <display_client_unsubscribe>:

void display_client_unsubscribe(display_client_t * const me, env_sensor_t * const server){
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	6039      	str	r1, [r7, #0]

    for(int i =0;i<MAX_CLIENT;++i){
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e01d      	b.n	800042e <display_client_unsubscribe+0x4c>

		   if(server->clients[i].pObject ==  me){
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	3202      	adds	r2, #2
 80003f8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d112      	bne.n	8000428 <display_client_unsubscribe+0x46>
			     server->clients[i].pObject = NULL;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	3202      	adds	r2, #2
 8000408:	2100      	movs	r1, #0
 800040a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				   server->clients[i].fn_handler =  NULL;
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3302      	adds	r3, #2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	4413      	add	r3, r2
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
				   server->n_client--;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	60da      	str	r2, [r3, #12]
				   return;
 8000426:	e005      	b.n	8000434 <display_client_unsubscribe+0x52>
    for(int i =0;i<MAX_CLIENT;++i){
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b09      	cmp	r3, #9
 8000432:	ddde      	ble.n	80003f2 <display_client_unsubscribe+0x10>
			 }
		}

}
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <display_client_destroy>:


void display_client_destroy(display_client_t * const me){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

  printf("Client destroyed...\r\n");
 8000448:	4804      	ldr	r0, [pc, #16]	@ (800045c <display_client_destroy+0x1c>)
 800044a:	f000 fd5d 	bl	8000f08 <puts>
	free(me);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 fb3c 	bl	8000acc <free>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	08001bb0 	.word	0x08001bb0

08000460 <env_sensor_init>:

#include "env_sensor.h"
#include <stdlib.h>
#include "uart.h"

void env_sensor_init(env_sensor_t * const me){
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
   for(int i=0;i<MAX_CLIENT;i++){
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	e00f      	b.n	800048e <env_sensor_init+0x2e>
		 me->clients[i].pObject=NULL;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	3202      	adds	r2, #2
 8000474:	2100      	movs	r1, #0
 8000476:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		 me->clients[i].fn_handler =NULL;
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3302      	adds	r3, #2
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	4413      	add	r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
   for(int i=0;i<MAX_CLIENT;i++){
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	3301      	adds	r3, #1
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	2b09      	cmp	r3, #9
 8000492:	ddec      	ble.n	800046e <env_sensor_init+0xe>
	 }

}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <env_sensor_create>:
env_sensor_t * env_sensor_create(void){
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
  env_sensor_t * me = (env_sensor_t *)malloc(sizeof(env_sensor_t));
 80004a8:	2060      	movs	r0, #96	@ 0x60
 80004aa:	f000 fb07 	bl	8000abc <malloc>
 80004ae:	4603      	mov	r3, r0
 80004b0:	607b      	str	r3, [r7, #4]
	if( me !=NULL){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <env_sensor_create+0x1c>
	  env_sensor_init(me);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ffd1 	bl	8000460 <env_sensor_init>
	}
  return me;
 80004be:	687b      	ldr	r3, [r7, #4]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <env_sensor_get_data>:
void env_sensor_get_data(env_sensor_t * const me){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

   me->data.temperature = (rand() %10);
 80004d0:	f000 fbb2 	bl	8000c38 <rand>
 80004d4:	4602      	mov	r2, r0
 80004d6:	4b13      	ldr	r3, [pc, #76]	@ (8000524 <env_sensor_get_data+0x5c>)
 80004d8:	fb83 1302 	smull	r1, r3, r3, r2
 80004dc:	1099      	asrs	r1, r3, #2
 80004de:	17d3      	asrs	r3, r2, #31
 80004e0:	1ac9      	subs	r1, r1, r3
 80004e2:	460b      	mov	r3, r1
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	440b      	add	r3, r1
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	1ad1      	subs	r1, r2, r3
 80004ec:	460a      	mov	r2, r1
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
	 me->data.humidity    =  (rand() %200);
 80004f2:	f000 fba1 	bl	8000c38 <rand>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <env_sensor_get_data+0x60>)
 80004fa:	fb82 1203 	smull	r1, r2, r2, r3
 80004fe:	1191      	asrs	r1, r2, #6
 8000500:	17da      	asrs	r2, r3, #31
 8000502:	1a8a      	subs	r2, r1, r2
 8000504:	21c8      	movs	r1, #200	@ 0xc8
 8000506:	fb01 f202 	mul.w	r2, r1, r2
 800050a:	1a9a      	subs	r2, r3, r2
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	605a      	str	r2, [r3, #4]
	 me->data.sprayed     =0;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	721a      	strb	r2, [r3, #8]

	//Notify all clients
	 env_sensor_notify(me);
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 f808 	bl	800052c <env_sensor_notify>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	66666667 	.word	0x66666667
 8000528:	51eb851f 	.word	0x51eb851f

0800052c <env_sensor_notify>:


void env_sensor_notify(env_sensor_t * const me){
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	for(int i=0;i<MAX_CLIENT;i++){
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e01f      	b.n	800057a <env_sensor_notify+0x4e>
	   if(me->clients[i].pObject !=NULL && me->clients[i].fn_handler !=NULL){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	3202      	adds	r2, #2
 8000540:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d015      	beq.n	8000574 <env_sensor_notify+0x48>
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3302      	adds	r3, #2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4413      	add	r3, r2
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00d      	beq.n	8000574 <env_sensor_notify+0x48>
		   me->clients[i].fn_handler(me->clients[i].pObject,me->data);
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3302      	adds	r3, #2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	4413      	add	r3, r2
 8000562:	685c      	ldr	r4, [r3, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	3202      	adds	r2, #2
 800056a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000572:	47a0      	blx	r4
	for(int i=0;i<MAX_CLIENT;i++){
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b09      	cmp	r3, #9
 800057e:	dddc      	ble.n	800053a <env_sensor_notify+0xe>
		 }
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bd90      	pop	{r4, r7, pc}
	...

0800058c <env_sensor_dumplist>:


void env_sensor_dumplist(env_sensor_t * const me){
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

	 printf("Dumplist :  \t number of clients: %d\n\r",me->n_client);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	4619      	mov	r1, r3
 800059a:	4818      	ldr	r0, [pc, #96]	@ (80005fc <env_sensor_dumplist+0x70>)
 800059c:	f000 fc4c 	bl	8000e38 <iprintf>

	for(int i=0;i<MAX_CLIENT;i++){
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e021      	b.n	80005ea <env_sensor_dumplist+0x5e>
	  if(me->clients[i].pObject !=NULL && me->clients[i].fn_handler !=NULL){
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	3202      	adds	r2, #2
 80005ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d017      	beq.n	80005e4 <env_sensor_dumplist+0x58>
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3302      	adds	r3, #2
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	4413      	add	r3, r2
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00f      	beq.n	80005e4 <env_sensor_dumplist+0x58>
		   printf("\t pObect:   0x%X \t fn_handler: 0x%X\n\r",(uint32_t)me->clients[i].pObject,(uint32_t)me->clients[i].fn_handler);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	3202      	adds	r2, #2
 80005ca:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005ce:	4619      	mov	r1, r3
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3302      	adds	r3, #2
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	4413      	add	r3, r2
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	461a      	mov	r2, r3
 80005de:	4808      	ldr	r0, [pc, #32]	@ (8000600 <env_sensor_dumplist+0x74>)
 80005e0:	f000 fc2a 	bl	8000e38 <iprintf>
	for(int i=0;i<MAX_CLIENT;i++){
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	ddda      	ble.n	80005a6 <env_sensor_dumplist+0x1a>
			}

	}

}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	08001bc8 	.word	0x08001bc8
 8000600:	08001bf0 	.word	0x08001bf0

08000604 <env_sensor_destroy>:


void env_sensor_destroy(env_sensor_t * const me){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	  //Do somthing..
	  free(me);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 fa5d 	bl	8000acc <free>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <fertilizer_mixer_client_init>:

#include "fertilizer_mixer_client.h"
#include <stdlib.h>
#include "uart.h"

void fertilizer_mixer_client_init(fertilizer_mixer_client_t * const me){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	me->fn_handler = fertilizer_mixer_client_handle_new_data;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <fertilizer_mixer_client_init+0x1c>)
 8000628:	60da      	str	r2, [r3, #12]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	08000665 	.word	0x08000665

0800063c <fertilizer_mixer_client_create>:
fertilizer_mixer_client_t * fertilizer_mixer_client_create(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

fertilizer_mixer_client_t * me   = (fertilizer_mixer_client_t *)malloc(sizeof(fertilizer_mixer_client_t));
 8000642:	2010      	movs	r0, #16
 8000644:	f000 fa3a 	bl	8000abc <malloc>
 8000648:	4603      	mov	r3, r0
 800064a:	607b      	str	r3, [r7, #4]

	if( me!=NULL){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <fertilizer_mixer_client_create+0x1c>

	  fertilizer_mixer_client_init(me);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ffe2 	bl	800061c <fertilizer_mixer_client_init>
	}

	return me;
 8000658:	687b      	ldr	r3, [r7, #4]

}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <fertilizer_mixer_client_handle_new_data>:

void fertilizer_mixer_client_handle_new_data(void * me, env_data_t data){
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	4638      	mov	r0, r7
 800066e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

   ((fertilizer_mixer_client_t *)me)->data =  data;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	461c      	mov	r4, r3
 8000676:	463b      	mov	r3, r7
 8000678:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  /*Process data*/
	  //Do somthing..
	  printf("fertilizer_mixer_module : \t New data :  %d %d %d \n\r",
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	685a      	ldr	r2, [r3, #4]
						((fertilizer_mixer_client_t *)me)->data.temperature,
						((fertilizer_mixer_client_t *)me)->data.humidity,
						((fertilizer_mixer_client_t *)me)->data.sprayed);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	7a1b      	ldrb	r3, [r3, #8]
	  printf("fertilizer_mixer_module : \t New data :  %d %d %d \n\r",
 800068c:	4803      	ldr	r0, [pc, #12]	@ (800069c <fertilizer_mixer_client_handle_new_data+0x38>)
 800068e:	f000 fbd3 	bl	8000e38 <iprintf>

}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	bf00      	nop
 800069c:	08001c18 	.word	0x08001c18

080006a0 <fertilizer_mixer_client_subscribe>:


void fertilizer_mixer_client_subscribe(fertilizer_mixer_client_t * const me, env_sensor_t * const server){
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]

	  for(int i=0;i<MAX_CLIENT;i++){
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e044      	b.n	800073a <fertilizer_mixer_client_subscribe+0x9a>

		  //Check if client is already subscribed
			  if(server->clients[i].pObject ==  me){
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	3202      	adds	r2, #2
 80006b6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d040      	beq.n	8000742 <fertilizer_mixer_client_subscribe+0xa2>
				  return;
				}
				//Add new client
				if(server->clients[i].pObject == NULL){
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	3202      	adds	r2, #2
 80006c6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d132      	bne.n	8000734 <fertilizer_mixer_client_subscribe+0x94>

				   server->n_client++;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	60da      	str	r2, [r3, #12]
					 server->clients[i].pObject =  me;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	3202      	adds	r2, #2
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					 server->clients[i].fn_handler = me->fn_handler;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3302      	adds	r3, #2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	605a      	str	r2, [r3, #4]

					 //Remove duplicate
					for(int j= i+1; j<MAX_CLIENT;j++){
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	e017      	b.n	800072c <fertilizer_mixer_client_subscribe+0x8c>
					   if(server->clients[j].pObject == me){
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	3202      	adds	r2, #2
 8000702:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	d10c      	bne.n	8000726 <fertilizer_mixer_client_subscribe+0x86>
						    server->clients[j].pObject = NULL;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	3202      	adds	r2, #2
 8000712:	2100      	movs	r1, #0
 8000714:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
							   server->clients[j].fn_handler =  NULL;
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3302      	adds	r3, #2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
					for(int j= i+1; j<MAX_CLIENT;j++){
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	3301      	adds	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b09      	cmp	r3, #9
 8000730:	dde4      	ble.n	80006fc <fertilizer_mixer_client_subscribe+0x5c>
						 }
					}
					return;
 8000732:	e007      	b.n	8000744 <fertilizer_mixer_client_subscribe+0xa4>
	  for(int i=0;i<MAX_CLIENT;i++){
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b09      	cmp	r3, #9
 800073e:	ddb7      	ble.n	80006b0 <fertilizer_mixer_client_subscribe+0x10>
 8000740:	e000      	b.n	8000744 <fertilizer_mixer_client_subscribe+0xa4>
				  return;
 8000742:	bf00      	nop
				}
		}


}
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <main>:
#include "env_display_client.h"
#include "fertilizer_mixer_client.h"


int main(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0


	debug_uart_init();
 8000754:	f000 f8fe 	bl	8000954 <debug_uart_init>

	//Setup server
		 env_sensor_t * sensor = env_sensor_create();
 8000758:	f7ff fea3 	bl	80004a2 <env_sensor_create>
 800075c:	60f8      	str	r0, [r7, #12]

		 //Setup CLIENT 1
		display_client_t * lcd_display = display_client_create();
 800075e:	f7ff fdb7 	bl	80002d0 <display_client_create>
 8000762:	60b8      	str	r0, [r7, #8]
	  //Subscribe to server
		display_client_subscribe(lcd_display,sensor);
 8000764:	68f9      	ldr	r1, [r7, #12]
 8000766:	68b8      	ldr	r0, [r7, #8]
 8000768:	f7ff fde4 	bl	8000334 <display_client_subscribe>

			 //Setup CLIENT 2

		 fertilizer_mixer_client_t  * fertilizer_mixer =  fertilizer_mixer_client_create();
 800076c:	f7ff ff66 	bl	800063c <fertilizer_mixer_client_create>
 8000770:	6078      	str	r0, [r7, #4]
		 //Subscribe to server
		 fertilizer_mixer_client_subscribe(fertilizer_mixer,sensor);
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff93 	bl	80006a0 <fertilizer_mixer_client_subscribe>

		 env_sensor_get_data(sensor);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fea4 	bl	80004c8 <env_sensor_get_data>
		 env_sensor_get_data(sensor);
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f7ff fea1 	bl	80004c8 <env_sensor_get_data>

		  //Test 2
			display_client_unsubscribe(lcd_display,sensor);
 8000786:	68f9      	ldr	r1, [r7, #12]
 8000788:	68b8      	ldr	r0, [r7, #8]
 800078a:	f7ff fe2a 	bl	80003e2 <display_client_unsubscribe>
			env_sensor_get_data(sensor);
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f7ff fe9a 	bl	80004c8 <env_sensor_get_data>
		  env_sensor_get_data(sensor);
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f7ff fe97 	bl	80004c8 <env_sensor_get_data>

			//Test3
			 env_sensor_dumplist(sensor);
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff fef6 	bl	800058c <env_sensor_dumplist>

			 //Test 4
			  env_sensor_destroy(sensor);
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f7ff ff2f 	bl	8000604 <env_sensor_destroy>
				 display_client_destroy(lcd_display);
 80007a6:	68b8      	ldr	r0, [r7, #8]
 80007a8:	f7ff fe4a 	bl	8000440 <display_client_destroy>
		while(1){
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <main+0x5e>

080007b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return 1;
 80007b4:	2301      	movs	r3, #1
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_kill>:

int _kill(int pid, int sig)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007ca:	f000 fcdb 	bl	8001184 <__errno>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2216      	movs	r2, #22
 80007d2:	601a      	str	r2, [r3, #0]
  return -1;
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_exit>:

void _exit (int status)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ffe7 	bl	80007c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007f2:	bf00      	nop
 80007f4:	e7fd      	b.n	80007f2 <_exit+0x12>

080007f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e00a      	b.n	800081e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000808:	f3af 8000 	nop.w
 800080c:	4601      	mov	r1, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	60ba      	str	r2, [r7, #8]
 8000814:	b2ca      	uxtb	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	dbf0      	blt.n	8000808 <_read+0x12>
  }

  return len;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e009      	b.n	8000856 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	60ba      	str	r2, [r7, #8]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f876 	bl	800093c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3301      	adds	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	dbf1      	blt.n	8000842 <_write+0x12>
  }
  return len;
 800085e:	687b      	ldr	r3, [r7, #4]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <_close>:

int _close(int file)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000890:	605a      	str	r2, [r3, #4]
  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_isatty>:

int _isatty(int file)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a8:	2301      	movs	r3, #1
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b085      	sub	sp, #20
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f000 fc40 	bl	8001184 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20020000 	.word	0x20020000
 8000930:	00000400 	.word	0x00000400
 8000934:	20000078 	.word	0x20000078
 8000938:	200001c8 	.word	0x200001c8

0800093c <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f84f 	bl	80009e8 <uart_write>
	return ch;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <debug_uart_init>:

void debug_uart_init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <debug_uart_init+0x84>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <debug_uart_init+0x84>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <debug_uart_init+0x88>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <debug_uart_init+0x88>)
 800096a:	f023 0310 	bic.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <debug_uart_init+0x88>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <debug_uart_init+0x88>)
 8000976:	f043 0320 	orr.w	r3, r3, #32
 800097a:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <debug_uart_init+0x88>)
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4a16      	ldr	r2, [pc, #88]	@ (80009dc <debug_uart_init+0x88>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000986:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <debug_uart_init+0x88>)
 800098a:	6a1b      	ldr	r3, [r3, #32]
 800098c:	4a13      	ldr	r2, [pc, #76]	@ (80009dc <debug_uart_init+0x88>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000992:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <debug_uart_init+0x88>)
 8000996:	6a1b      	ldr	r3, [r3, #32]
 8000998:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <debug_uart_init+0x88>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <debug_uart_init+0x88>)
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <debug_uart_init+0x88>)
 80009a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80009aa:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <debug_uart_init+0x84>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <debug_uart_init+0x84>)
 80009b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 80009b8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <debug_uart_init+0x8c>)
 80009be:	f000 f83f 	bl	8000a40 <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <debug_uart_init+0x90>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <debug_uart_init+0x90>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <debug_uart_init+0x90>)
 80009ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000
 80009e0:	00f42400 	.word	0x00f42400
 80009e4:	40004400 	.word	0x40004400

080009e8 <uart_write>:

static void uart_write(int ch)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 80009f0:	bf00      	nop
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <uart_write+0x2c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0f9      	beq.n	80009f2 <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <uart_write+0x2c>)
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	6053      	str	r3, [r2, #4]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40004400 	.word	0x40004400

08000a18 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	085a      	lsrs	r2, r3, #1
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	441a      	add	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffe3 	bl	8000a18 <compute_uart_bd>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <uart_set_baudrate+0x24>)
 8000a58:	609a      	str	r2, [r3, #8]
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a96:	f000 fb7b 	bl	8001190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fe58 	bl	800074e <main>

08000a9e <LoopForever>:

LoopForever:
  b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   r0, =_estack
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000aac:	08001d54 	.word	0x08001d54
  ldr r2, =_sbss
 8000ab0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ab4:	200001c8 	.word	0x200001c8

08000ab8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <malloc>:
 8000abc:	4b02      	ldr	r3, [pc, #8]	@ (8000ac8 <malloc+0xc>)
 8000abe:	4601      	mov	r1, r0
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f000 b82d 	b.w	8000b20 <_malloc_r>
 8000ac6:	bf00      	nop
 8000ac8:	2000000c 	.word	0x2000000c

08000acc <free>:
 8000acc:	4b02      	ldr	r3, [pc, #8]	@ (8000ad8 <free+0xc>)
 8000ace:	4601      	mov	r1, r0
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	f000 bba3 	b.w	800121c <_free_r>
 8000ad6:	bf00      	nop
 8000ad8:	2000000c 	.word	0x2000000c

08000adc <sbrk_aligned>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	4e0f      	ldr	r6, [pc, #60]	@ (8000b1c <sbrk_aligned+0x40>)
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	6831      	ldr	r1, [r6, #0]
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b911      	cbnz	r1, 8000aee <sbrk_aligned+0x12>
 8000ae8:	f000 fb2a 	bl	8001140 <_sbrk_r>
 8000aec:	6030      	str	r0, [r6, #0]
 8000aee:	4621      	mov	r1, r4
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 fb25 	bl	8001140 <_sbrk_r>
 8000af6:	1c43      	adds	r3, r0, #1
 8000af8:	d103      	bne.n	8000b02 <sbrk_aligned+0x26>
 8000afa:	f04f 34ff 	mov.w	r4, #4294967295
 8000afe:	4620      	mov	r0, r4
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	1cc4      	adds	r4, r0, #3
 8000b04:	f024 0403 	bic.w	r4, r4, #3
 8000b08:	42a0      	cmp	r0, r4
 8000b0a:	d0f8      	beq.n	8000afe <sbrk_aligned+0x22>
 8000b0c:	1a21      	subs	r1, r4, r0
 8000b0e:	4628      	mov	r0, r5
 8000b10:	f000 fb16 	bl	8001140 <_sbrk_r>
 8000b14:	3001      	adds	r0, #1
 8000b16:	d1f2      	bne.n	8000afe <sbrk_aligned+0x22>
 8000b18:	e7ef      	b.n	8000afa <sbrk_aligned+0x1e>
 8000b1a:	bf00      	nop
 8000b1c:	2000007c 	.word	0x2000007c

08000b20 <_malloc_r>:
 8000b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b24:	1ccd      	adds	r5, r1, #3
 8000b26:	f025 0503 	bic.w	r5, r5, #3
 8000b2a:	3508      	adds	r5, #8
 8000b2c:	2d0c      	cmp	r5, #12
 8000b2e:	bf38      	it	cc
 8000b30:	250c      	movcc	r5, #12
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	4606      	mov	r6, r0
 8000b36:	db01      	blt.n	8000b3c <_malloc_r+0x1c>
 8000b38:	42a9      	cmp	r1, r5
 8000b3a:	d904      	bls.n	8000b46 <_malloc_r+0x26>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	6033      	str	r3, [r6, #0]
 8000b40:	2000      	movs	r0, #0
 8000b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c1c <_malloc_r+0xfc>
 8000b4a:	f000 f869 	bl	8000c20 <__malloc_lock>
 8000b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b52:	461c      	mov	r4, r3
 8000b54:	bb44      	cbnz	r4, 8000ba8 <_malloc_r+0x88>
 8000b56:	4629      	mov	r1, r5
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff ffbf 	bl	8000adc <sbrk_aligned>
 8000b5e:	1c43      	adds	r3, r0, #1
 8000b60:	4604      	mov	r4, r0
 8000b62:	d158      	bne.n	8000c16 <_malloc_r+0xf6>
 8000b64:	f8d8 4000 	ldr.w	r4, [r8]
 8000b68:	4627      	mov	r7, r4
 8000b6a:	2f00      	cmp	r7, #0
 8000b6c:	d143      	bne.n	8000bf6 <_malloc_r+0xd6>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d04b      	beq.n	8000c0a <_malloc_r+0xea>
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4639      	mov	r1, r7
 8000b76:	4630      	mov	r0, r6
 8000b78:	eb04 0903 	add.w	r9, r4, r3
 8000b7c:	f000 fae0 	bl	8001140 <_sbrk_r>
 8000b80:	4581      	cmp	r9, r0
 8000b82:	d142      	bne.n	8000c0a <_malloc_r+0xea>
 8000b84:	6821      	ldr	r1, [r4, #0]
 8000b86:	1a6d      	subs	r5, r5, r1
 8000b88:	4629      	mov	r1, r5
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f7ff ffa6 	bl	8000adc <sbrk_aligned>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d03a      	beq.n	8000c0a <_malloc_r+0xea>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	442b      	add	r3, r5
 8000b98:	6023      	str	r3, [r4, #0]
 8000b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	bb62      	cbnz	r2, 8000bfc <_malloc_r+0xdc>
 8000ba2:	f8c8 7000 	str.w	r7, [r8]
 8000ba6:	e00f      	b.n	8000bc8 <_malloc_r+0xa8>
 8000ba8:	6822      	ldr	r2, [r4, #0]
 8000baa:	1b52      	subs	r2, r2, r5
 8000bac:	d420      	bmi.n	8000bf0 <_malloc_r+0xd0>
 8000bae:	2a0b      	cmp	r2, #11
 8000bb0:	d917      	bls.n	8000be2 <_malloc_r+0xc2>
 8000bb2:	1961      	adds	r1, r4, r5
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	6025      	str	r5, [r4, #0]
 8000bb8:	bf18      	it	ne
 8000bba:	6059      	strne	r1, [r3, #4]
 8000bbc:	6863      	ldr	r3, [r4, #4]
 8000bbe:	bf08      	it	eq
 8000bc0:	f8c8 1000 	streq.w	r1, [r8]
 8000bc4:	5162      	str	r2, [r4, r5]
 8000bc6:	604b      	str	r3, [r1, #4]
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f000 f82f 	bl	8000c2c <__malloc_unlock>
 8000bce:	f104 000b 	add.w	r0, r4, #11
 8000bd2:	1d23      	adds	r3, r4, #4
 8000bd4:	f020 0007 	bic.w	r0, r0, #7
 8000bd8:	1ac2      	subs	r2, r0, r3
 8000bda:	bf1c      	itt	ne
 8000bdc:	1a1b      	subne	r3, r3, r0
 8000bde:	50a3      	strne	r3, [r4, r2]
 8000be0:	e7af      	b.n	8000b42 <_malloc_r+0x22>
 8000be2:	6862      	ldr	r2, [r4, #4]
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	bf0c      	ite	eq
 8000be8:	f8c8 2000 	streq.w	r2, [r8]
 8000bec:	605a      	strne	r2, [r3, #4]
 8000bee:	e7eb      	b.n	8000bc8 <_malloc_r+0xa8>
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	6864      	ldr	r4, [r4, #4]
 8000bf4:	e7ae      	b.n	8000b54 <_malloc_r+0x34>
 8000bf6:	463c      	mov	r4, r7
 8000bf8:	687f      	ldr	r7, [r7, #4]
 8000bfa:	e7b6      	b.n	8000b6a <_malloc_r+0x4a>
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	d1fb      	bne.n	8000bfc <_malloc_r+0xdc>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6053      	str	r3, [r2, #4]
 8000c08:	e7de      	b.n	8000bc8 <_malloc_r+0xa8>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f000 f80c 	bl	8000c2c <__malloc_unlock>
 8000c14:	e794      	b.n	8000b40 <_malloc_r+0x20>
 8000c16:	6005      	str	r5, [r0, #0]
 8000c18:	e7d6      	b.n	8000bc8 <_malloc_r+0xa8>
 8000c1a:	bf00      	nop
 8000c1c:	20000080 	.word	0x20000080

08000c20 <__malloc_lock>:
 8000c20:	4801      	ldr	r0, [pc, #4]	@ (8000c28 <__malloc_lock+0x8>)
 8000c22:	f000 bada 	b.w	80011da <__retarget_lock_acquire_recursive>
 8000c26:	bf00      	nop
 8000c28:	200001c4 	.word	0x200001c4

08000c2c <__malloc_unlock>:
 8000c2c:	4801      	ldr	r0, [pc, #4]	@ (8000c34 <__malloc_unlock+0x8>)
 8000c2e:	f000 bad5 	b.w	80011dc <__retarget_lock_release_recursive>
 8000c32:	bf00      	nop
 8000c34:	200001c4 	.word	0x200001c4

08000c38 <rand>:
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <rand+0x5c>)
 8000c3a:	b510      	push	{r4, lr}
 8000c3c:	681c      	ldr	r4, [r3, #0]
 8000c3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000c40:	b9b3      	cbnz	r3, 8000c70 <rand+0x38>
 8000c42:	2018      	movs	r0, #24
 8000c44:	f7ff ff3a 	bl	8000abc <malloc>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	6320      	str	r0, [r4, #48]	@ 0x30
 8000c4c:	b920      	cbnz	r0, 8000c58 <rand+0x20>
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <rand+0x60>)
 8000c50:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <rand+0x64>)
 8000c52:	2152      	movs	r1, #82	@ 0x52
 8000c54:	f000 fac4 	bl	80011e0 <__assert_func>
 8000c58:	4911      	ldr	r1, [pc, #68]	@ (8000ca0 <rand+0x68>)
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <rand+0x6c>)
 8000c5c:	e9c0 1300 	strd	r1, r3, [r0]
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <rand+0x70>)
 8000c62:	6083      	str	r3, [r0, #8]
 8000c64:	230b      	movs	r3, #11
 8000c66:	8183      	strh	r3, [r0, #12]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000c70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000c72:	480e      	ldr	r0, [pc, #56]	@ (8000cac <rand+0x74>)
 8000c74:	690b      	ldr	r3, [r1, #16]
 8000c76:	694c      	ldr	r4, [r1, #20]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <rand+0x78>)
 8000c7a:	4358      	muls	r0, r3
 8000c7c:	fb02 0004 	mla	r0, r2, r4, r0
 8000c80:	fba3 3202 	umull	r3, r2, r3, r2
 8000c84:	3301      	adds	r3, #1
 8000c86:	eb40 0002 	adc.w	r0, r0, r2
 8000c8a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000c8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000c92:	bd10      	pop	{r4, pc}
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	08001c64 	.word	0x08001c64
 8000c9c:	08001c7b 	.word	0x08001c7b
 8000ca0:	abcd330e 	.word	0xabcd330e
 8000ca4:	e66d1234 	.word	0xe66d1234
 8000ca8:	0005deec 	.word	0x0005deec
 8000cac:	5851f42d 	.word	0x5851f42d
 8000cb0:	4c957f2d 	.word	0x4c957f2d

08000cb4 <std>:
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	b510      	push	{r4, lr}
 8000cb8:	4604      	mov	r4, r0
 8000cba:	e9c0 3300 	strd	r3, r3, [r0]
 8000cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cc2:	6083      	str	r3, [r0, #8]
 8000cc4:	8181      	strh	r1, [r0, #12]
 8000cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000cc8:	81c2      	strh	r2, [r0, #14]
 8000cca:	6183      	str	r3, [r0, #24]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2208      	movs	r2, #8
 8000cd0:	305c      	adds	r0, #92	@ 0x5c
 8000cd2:	f000 f9f9 	bl	80010c8 <memset>
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <std+0x58>)
 8000cd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <std+0x5c>)
 8000cdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <std+0x60>)
 8000ce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <std+0x64>)
 8000ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <std+0x68>)
 8000ce8:	6224      	str	r4, [r4, #32]
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d006      	beq.n	8000cfc <std+0x48>
 8000cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000cf2:	4294      	cmp	r4, r2
 8000cf4:	d002      	beq.n	8000cfc <std+0x48>
 8000cf6:	33d0      	adds	r3, #208	@ 0xd0
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d105      	bne.n	8000d08 <std+0x54>
 8000cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d04:	f000 ba68 	b.w	80011d8 <__retarget_lock_init_recursive>
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08000f19 	.word	0x08000f19
 8000d10:	08000f3b 	.word	0x08000f3b
 8000d14:	08000f73 	.word	0x08000f73
 8000d18:	08000f97 	.word	0x08000f97
 8000d1c:	20000084 	.word	0x20000084

08000d20 <stdio_exit_handler>:
 8000d20:	4a02      	ldr	r2, [pc, #8]	@ (8000d2c <stdio_exit_handler+0xc>)
 8000d22:	4903      	ldr	r1, [pc, #12]	@ (8000d30 <stdio_exit_handler+0x10>)
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <stdio_exit_handler+0x14>)
 8000d26:	f000 b869 	b.w	8000dfc <_fwalk_sglue>
 8000d2a:	bf00      	nop
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	08001959 	.word	0x08001959
 8000d34:	20000010 	.word	0x20000010

08000d38 <cleanup_stdio>:
 8000d38:	6841      	ldr	r1, [r0, #4]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <cleanup_stdio+0x34>)
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	b510      	push	{r4, lr}
 8000d40:	4604      	mov	r4, r0
 8000d42:	d001      	beq.n	8000d48 <cleanup_stdio+0x10>
 8000d44:	f000 fe08 	bl	8001958 <_fflush_r>
 8000d48:	68a1      	ldr	r1, [r4, #8]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <cleanup_stdio+0x38>)
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d002      	beq.n	8000d56 <cleanup_stdio+0x1e>
 8000d50:	4620      	mov	r0, r4
 8000d52:	f000 fe01 	bl	8001958 <_fflush_r>
 8000d56:	68e1      	ldr	r1, [r4, #12]
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <cleanup_stdio+0x3c>)
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	d004      	beq.n	8000d68 <cleanup_stdio+0x30>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d64:	f000 bdf8 	b.w	8001958 <_fflush_r>
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000084 	.word	0x20000084
 8000d70:	200000ec 	.word	0x200000ec
 8000d74:	20000154 	.word	0x20000154

08000d78 <global_stdio_init.part.0>:
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <global_stdio_init.part.0+0x30>)
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8000dac <global_stdio_init.part.0+0x34>)
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <global_stdio_init.part.0+0x38>)
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	4620      	mov	r0, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	2104      	movs	r1, #4
 8000d88:	f7ff ff94 	bl	8000cb4 <std>
 8000d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d90:	2201      	movs	r2, #1
 8000d92:	2109      	movs	r1, #9
 8000d94:	f7ff ff8e 	bl	8000cb4 <std>
 8000d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da2:	2112      	movs	r1, #18
 8000da4:	f7ff bf86 	b.w	8000cb4 <std>
 8000da8:	200001bc 	.word	0x200001bc
 8000dac:	20000084 	.word	0x20000084
 8000db0:	08000d21 	.word	0x08000d21

08000db4 <__sfp_lock_acquire>:
 8000db4:	4801      	ldr	r0, [pc, #4]	@ (8000dbc <__sfp_lock_acquire+0x8>)
 8000db6:	f000 ba10 	b.w	80011da <__retarget_lock_acquire_recursive>
 8000dba:	bf00      	nop
 8000dbc:	200001c5 	.word	0x200001c5

08000dc0 <__sfp_lock_release>:
 8000dc0:	4801      	ldr	r0, [pc, #4]	@ (8000dc8 <__sfp_lock_release+0x8>)
 8000dc2:	f000 ba0b 	b.w	80011dc <__retarget_lock_release_recursive>
 8000dc6:	bf00      	nop
 8000dc8:	200001c5 	.word	0x200001c5

08000dcc <__sinit>:
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	4604      	mov	r4, r0
 8000dd0:	f7ff fff0 	bl	8000db4 <__sfp_lock_acquire>
 8000dd4:	6a23      	ldr	r3, [r4, #32]
 8000dd6:	b11b      	cbz	r3, 8000de0 <__sinit+0x14>
 8000dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ddc:	f7ff bff0 	b.w	8000dc0 <__sfp_lock_release>
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__sinit+0x28>)
 8000de2:	6223      	str	r3, [r4, #32]
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__sinit+0x2c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f5      	bne.n	8000dd8 <__sinit+0xc>
 8000dec:	f7ff ffc4 	bl	8000d78 <global_stdio_init.part.0>
 8000df0:	e7f2      	b.n	8000dd8 <__sinit+0xc>
 8000df2:	bf00      	nop
 8000df4:	08000d39 	.word	0x08000d39
 8000df8:	200001bc 	.word	0x200001bc

08000dfc <_fwalk_sglue>:
 8000dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e00:	4607      	mov	r7, r0
 8000e02:	4688      	mov	r8, r1
 8000e04:	4614      	mov	r4, r2
 8000e06:	2600      	movs	r6, #0
 8000e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8000e10:	d505      	bpl.n	8000e1e <_fwalk_sglue+0x22>
 8000e12:	6824      	ldr	r4, [r4, #0]
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d1f7      	bne.n	8000e08 <_fwalk_sglue+0xc>
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e1e:	89ab      	ldrh	r3, [r5, #12]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d907      	bls.n	8000e34 <_fwalk_sglue+0x38>
 8000e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	d003      	beq.n	8000e34 <_fwalk_sglue+0x38>
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4638      	mov	r0, r7
 8000e30:	47c0      	blx	r8
 8000e32:	4306      	orrs	r6, r0
 8000e34:	3568      	adds	r5, #104	@ 0x68
 8000e36:	e7e9      	b.n	8000e0c <_fwalk_sglue+0x10>

08000e38 <iprintf>:
 8000e38:	b40f      	push	{r0, r1, r2, r3}
 8000e3a:	b507      	push	{r0, r1, r2, lr}
 8000e3c:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <iprintf+0x20>)
 8000e3e:	ab04      	add	r3, sp, #16
 8000e40:	6808      	ldr	r0, [r1, #0]
 8000e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e46:	6881      	ldr	r1, [r0, #8]
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f000 fa5b 	bl	8001304 <_vfiprintf_r>
 8000e4e:	b003      	add	sp, #12
 8000e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e54:	b004      	add	sp, #16
 8000e56:	4770      	bx	lr
 8000e58:	2000000c 	.word	0x2000000c

08000e5c <_puts_r>:
 8000e5c:	6a03      	ldr	r3, [r0, #32]
 8000e5e:	b570      	push	{r4, r5, r6, lr}
 8000e60:	6884      	ldr	r4, [r0, #8]
 8000e62:	4605      	mov	r5, r0
 8000e64:	460e      	mov	r6, r1
 8000e66:	b90b      	cbnz	r3, 8000e6c <_puts_r+0x10>
 8000e68:	f7ff ffb0 	bl	8000dcc <__sinit>
 8000e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e6e:	07db      	lsls	r3, r3, #31
 8000e70:	d405      	bmi.n	8000e7e <_puts_r+0x22>
 8000e72:	89a3      	ldrh	r3, [r4, #12]
 8000e74:	0598      	lsls	r0, r3, #22
 8000e76:	d402      	bmi.n	8000e7e <_puts_r+0x22>
 8000e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e7a:	f000 f9ae 	bl	80011da <__retarget_lock_acquire_recursive>
 8000e7e:	89a3      	ldrh	r3, [r4, #12]
 8000e80:	0719      	lsls	r1, r3, #28
 8000e82:	d502      	bpl.n	8000e8a <_puts_r+0x2e>
 8000e84:	6923      	ldr	r3, [r4, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d135      	bne.n	8000ef6 <_puts_r+0x9a>
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f000 f8c5 	bl	800101c <__swsetup_r>
 8000e92:	b380      	cbz	r0, 8000ef6 <_puts_r+0x9a>
 8000e94:	f04f 35ff 	mov.w	r5, #4294967295
 8000e98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e9a:	07da      	lsls	r2, r3, #31
 8000e9c:	d405      	bmi.n	8000eaa <_puts_r+0x4e>
 8000e9e:	89a3      	ldrh	r3, [r4, #12]
 8000ea0:	059b      	lsls	r3, r3, #22
 8000ea2:	d402      	bmi.n	8000eaa <_puts_r+0x4e>
 8000ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ea6:	f000 f999 	bl	80011dc <__retarget_lock_release_recursive>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	bd70      	pop	{r4, r5, r6, pc}
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da04      	bge.n	8000ebc <_puts_r+0x60>
 8000eb2:	69a2      	ldr	r2, [r4, #24]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dc17      	bgt.n	8000ee8 <_puts_r+0x8c>
 8000eb8:	290a      	cmp	r1, #10
 8000eba:	d015      	beq.n	8000ee8 <_puts_r+0x8c>
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	6022      	str	r2, [r4, #0]
 8000ec2:	7019      	strb	r1, [r3, #0]
 8000ec4:	68a3      	ldr	r3, [r4, #8]
 8000ec6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	60a3      	str	r3, [r4, #8]
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d1ed      	bne.n	8000eae <_puts_r+0x52>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da11      	bge.n	8000efa <_puts_r+0x9e>
 8000ed6:	4622      	mov	r2, r4
 8000ed8:	210a      	movs	r1, #10
 8000eda:	4628      	mov	r0, r5
 8000edc:	f000 f85f 	bl	8000f9e <__swbuf_r>
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d0d7      	beq.n	8000e94 <_puts_r+0x38>
 8000ee4:	250a      	movs	r5, #10
 8000ee6:	e7d7      	b.n	8000e98 <_puts_r+0x3c>
 8000ee8:	4622      	mov	r2, r4
 8000eea:	4628      	mov	r0, r5
 8000eec:	f000 f857 	bl	8000f9e <__swbuf_r>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d1e7      	bne.n	8000ec4 <_puts_r+0x68>
 8000ef4:	e7ce      	b.n	8000e94 <_puts_r+0x38>
 8000ef6:	3e01      	subs	r6, #1
 8000ef8:	e7e4      	b.n	8000ec4 <_puts_r+0x68>
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	6022      	str	r2, [r4, #0]
 8000f00:	220a      	movs	r2, #10
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e7ee      	b.n	8000ee4 <_puts_r+0x88>
	...

08000f08 <puts>:
 8000f08:	4b02      	ldr	r3, [pc, #8]	@ (8000f14 <puts+0xc>)
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f7ff bfa5 	b.w	8000e5c <_puts_r>
 8000f12:	bf00      	nop
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <__sread>:
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f20:	f000 f8fc 	bl	800111c <_read_r>
 8000f24:	2800      	cmp	r0, #0
 8000f26:	bfab      	itete	ge
 8000f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f2c:	181b      	addge	r3, r3, r0
 8000f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f32:	bfac      	ite	ge
 8000f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f36:	81a3      	strhlt	r3, [r4, #12]
 8000f38:	bd10      	pop	{r4, pc}

08000f3a <__swrite>:
 8000f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f3e:	461f      	mov	r7, r3
 8000f40:	898b      	ldrh	r3, [r1, #12]
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	4605      	mov	r5, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	4616      	mov	r6, r2
 8000f4a:	d505      	bpl.n	8000f58 <__swrite+0x1e>
 8000f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f50:	2302      	movs	r3, #2
 8000f52:	2200      	movs	r2, #0
 8000f54:	f000 f8d0 	bl	80010f8 <_lseek_r>
 8000f58:	89a3      	ldrh	r3, [r4, #12]
 8000f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f62:	81a3      	strh	r3, [r4, #12]
 8000f64:	4632      	mov	r2, r6
 8000f66:	463b      	mov	r3, r7
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6e:	f000 b8f7 	b.w	8001160 <_write_r>

08000f72 <__sseek>:
 8000f72:	b510      	push	{r4, lr}
 8000f74:	460c      	mov	r4, r1
 8000f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f7a:	f000 f8bd 	bl	80010f8 <_lseek_r>
 8000f7e:	1c43      	adds	r3, r0, #1
 8000f80:	89a3      	ldrh	r3, [r4, #12]
 8000f82:	bf15      	itete	ne
 8000f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000f8e:	81a3      	strheq	r3, [r4, #12]
 8000f90:	bf18      	it	ne
 8000f92:	81a3      	strhne	r3, [r4, #12]
 8000f94:	bd10      	pop	{r4, pc}

08000f96 <__sclose>:
 8000f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f9a:	f000 b89d 	b.w	80010d8 <_close_r>

08000f9e <__swbuf_r>:
 8000f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa0:	460e      	mov	r6, r1
 8000fa2:	4614      	mov	r4, r2
 8000fa4:	4605      	mov	r5, r0
 8000fa6:	b118      	cbz	r0, 8000fb0 <__swbuf_r+0x12>
 8000fa8:	6a03      	ldr	r3, [r0, #32]
 8000faa:	b90b      	cbnz	r3, 8000fb0 <__swbuf_r+0x12>
 8000fac:	f7ff ff0e 	bl	8000dcc <__sinit>
 8000fb0:	69a3      	ldr	r3, [r4, #24]
 8000fb2:	60a3      	str	r3, [r4, #8]
 8000fb4:	89a3      	ldrh	r3, [r4, #12]
 8000fb6:	071a      	lsls	r2, r3, #28
 8000fb8:	d501      	bpl.n	8000fbe <__swbuf_r+0x20>
 8000fba:	6923      	ldr	r3, [r4, #16]
 8000fbc:	b943      	cbnz	r3, 8000fd0 <__swbuf_r+0x32>
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f000 f82b 	bl	800101c <__swsetup_r>
 8000fc6:	b118      	cbz	r0, 8000fd0 <__swbuf_r+0x32>
 8000fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8000fcc:	4638      	mov	r0, r7
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	6922      	ldr	r2, [r4, #16]
 8000fd4:	1a98      	subs	r0, r3, r2
 8000fd6:	6963      	ldr	r3, [r4, #20]
 8000fd8:	b2f6      	uxtb	r6, r6
 8000fda:	4283      	cmp	r3, r0
 8000fdc:	4637      	mov	r7, r6
 8000fde:	dc05      	bgt.n	8000fec <__swbuf_r+0x4e>
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	4628      	mov	r0, r5
 8000fe4:	f000 fcb8 	bl	8001958 <_fflush_r>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d1ed      	bne.n	8000fc8 <__swbuf_r+0x2a>
 8000fec:	68a3      	ldr	r3, [r4, #8]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	60a3      	str	r3, [r4, #8]
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	6022      	str	r2, [r4, #0]
 8000ff8:	701e      	strb	r6, [r3, #0]
 8000ffa:	6962      	ldr	r2, [r4, #20]
 8000ffc:	1c43      	adds	r3, r0, #1
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d004      	beq.n	800100c <__swbuf_r+0x6e>
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	07db      	lsls	r3, r3, #31
 8001006:	d5e1      	bpl.n	8000fcc <__swbuf_r+0x2e>
 8001008:	2e0a      	cmp	r6, #10
 800100a:	d1df      	bne.n	8000fcc <__swbuf_r+0x2e>
 800100c:	4621      	mov	r1, r4
 800100e:	4628      	mov	r0, r5
 8001010:	f000 fca2 	bl	8001958 <_fflush_r>
 8001014:	2800      	cmp	r0, #0
 8001016:	d0d9      	beq.n	8000fcc <__swbuf_r+0x2e>
 8001018:	e7d6      	b.n	8000fc8 <__swbuf_r+0x2a>
	...

0800101c <__swsetup_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <__swsetup_r+0xa8>)
 8001020:	4605      	mov	r5, r0
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	460c      	mov	r4, r1
 8001026:	b118      	cbz	r0, 8001030 <__swsetup_r+0x14>
 8001028:	6a03      	ldr	r3, [r0, #32]
 800102a:	b90b      	cbnz	r3, 8001030 <__swsetup_r+0x14>
 800102c:	f7ff fece 	bl	8000dcc <__sinit>
 8001030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001034:	0719      	lsls	r1, r3, #28
 8001036:	d422      	bmi.n	800107e <__swsetup_r+0x62>
 8001038:	06da      	lsls	r2, r3, #27
 800103a:	d407      	bmi.n	800104c <__swsetup_r+0x30>
 800103c:	2209      	movs	r2, #9
 800103e:	602a      	str	r2, [r5, #0]
 8001040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001044:	81a3      	strh	r3, [r4, #12]
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	e033      	b.n	80010b4 <__swsetup_r+0x98>
 800104c:	0758      	lsls	r0, r3, #29
 800104e:	d512      	bpl.n	8001076 <__swsetup_r+0x5a>
 8001050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001052:	b141      	cbz	r1, 8001066 <__swsetup_r+0x4a>
 8001054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001058:	4299      	cmp	r1, r3
 800105a:	d002      	beq.n	8001062 <__swsetup_r+0x46>
 800105c:	4628      	mov	r0, r5
 800105e:	f000 f8dd 	bl	800121c <_free_r>
 8001062:	2300      	movs	r3, #0
 8001064:	6363      	str	r3, [r4, #52]	@ 0x34
 8001066:	89a3      	ldrh	r3, [r4, #12]
 8001068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800106c:	81a3      	strh	r3, [r4, #12]
 800106e:	2300      	movs	r3, #0
 8001070:	6063      	str	r3, [r4, #4]
 8001072:	6923      	ldr	r3, [r4, #16]
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	6923      	ldr	r3, [r4, #16]
 8001080:	b94b      	cbnz	r3, 8001096 <__swsetup_r+0x7a>
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800108c:	d003      	beq.n	8001096 <__swsetup_r+0x7a>
 800108e:	4621      	mov	r1, r4
 8001090:	4628      	mov	r0, r5
 8001092:	f000 fcc1 	bl	8001a18 <__smakebuf_r>
 8001096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800109a:	f013 0201 	ands.w	r2, r3, #1
 800109e:	d00a      	beq.n	80010b6 <__swsetup_r+0x9a>
 80010a0:	2200      	movs	r2, #0
 80010a2:	60a2      	str	r2, [r4, #8]
 80010a4:	6962      	ldr	r2, [r4, #20]
 80010a6:	4252      	negs	r2, r2
 80010a8:	61a2      	str	r2, [r4, #24]
 80010aa:	6922      	ldr	r2, [r4, #16]
 80010ac:	b942      	cbnz	r2, 80010c0 <__swsetup_r+0xa4>
 80010ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80010b2:	d1c5      	bne.n	8001040 <__swsetup_r+0x24>
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
 80010b6:	0799      	lsls	r1, r3, #30
 80010b8:	bf58      	it	pl
 80010ba:	6962      	ldrpl	r2, [r4, #20]
 80010bc:	60a2      	str	r2, [r4, #8]
 80010be:	e7f4      	b.n	80010aa <__swsetup_r+0x8e>
 80010c0:	2000      	movs	r0, #0
 80010c2:	e7f7      	b.n	80010b4 <__swsetup_r+0x98>
 80010c4:	2000000c 	.word	0x2000000c

080010c8 <memset>:
 80010c8:	4402      	add	r2, r0
 80010ca:	4603      	mov	r3, r0
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d100      	bne.n	80010d2 <memset+0xa>
 80010d0:	4770      	bx	lr
 80010d2:	f803 1b01 	strb.w	r1, [r3], #1
 80010d6:	e7f9      	b.n	80010cc <memset+0x4>

080010d8 <_close_r>:
 80010d8:	b538      	push	{r3, r4, r5, lr}
 80010da:	4d06      	ldr	r5, [pc, #24]	@ (80010f4 <_close_r+0x1c>)
 80010dc:	2300      	movs	r3, #0
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	602b      	str	r3, [r5, #0]
 80010e4:	f7ff fbc0 	bl	8000868 <_close>
 80010e8:	1c43      	adds	r3, r0, #1
 80010ea:	d102      	bne.n	80010f2 <_close_r+0x1a>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	b103      	cbz	r3, 80010f2 <_close_r+0x1a>
 80010f0:	6023      	str	r3, [r4, #0]
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
 80010f4:	200001c0 	.word	0x200001c0

080010f8 <_lseek_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4d07      	ldr	r5, [pc, #28]	@ (8001118 <_lseek_r+0x20>)
 80010fc:	4604      	mov	r4, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	4611      	mov	r1, r2
 8001102:	2200      	movs	r2, #0
 8001104:	602a      	str	r2, [r5, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	f7ff fbd5 	bl	80008b6 <_lseek>
 800110c:	1c43      	adds	r3, r0, #1
 800110e:	d102      	bne.n	8001116 <_lseek_r+0x1e>
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	b103      	cbz	r3, 8001116 <_lseek_r+0x1e>
 8001114:	6023      	str	r3, [r4, #0]
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	200001c0 	.word	0x200001c0

0800111c <_read_r>:
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4d07      	ldr	r5, [pc, #28]	@ (800113c <_read_r+0x20>)
 8001120:	4604      	mov	r4, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4611      	mov	r1, r2
 8001126:	2200      	movs	r2, #0
 8001128:	602a      	str	r2, [r5, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	f7ff fb63 	bl	80007f6 <_read>
 8001130:	1c43      	adds	r3, r0, #1
 8001132:	d102      	bne.n	800113a <_read_r+0x1e>
 8001134:	682b      	ldr	r3, [r5, #0]
 8001136:	b103      	cbz	r3, 800113a <_read_r+0x1e>
 8001138:	6023      	str	r3, [r4, #0]
 800113a:	bd38      	pop	{r3, r4, r5, pc}
 800113c:	200001c0 	.word	0x200001c0

08001140 <_sbrk_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4d06      	ldr	r5, [pc, #24]	@ (800115c <_sbrk_r+0x1c>)
 8001144:	2300      	movs	r3, #0
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	602b      	str	r3, [r5, #0]
 800114c:	f7ff fbc0 	bl	80008d0 <_sbrk>
 8001150:	1c43      	adds	r3, r0, #1
 8001152:	d102      	bne.n	800115a <_sbrk_r+0x1a>
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	b103      	cbz	r3, 800115a <_sbrk_r+0x1a>
 8001158:	6023      	str	r3, [r4, #0]
 800115a:	bd38      	pop	{r3, r4, r5, pc}
 800115c:	200001c0 	.word	0x200001c0

08001160 <_write_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4d07      	ldr	r5, [pc, #28]	@ (8001180 <_write_r+0x20>)
 8001164:	4604      	mov	r4, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4611      	mov	r1, r2
 800116a:	2200      	movs	r2, #0
 800116c:	602a      	str	r2, [r5, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	f7ff fb5e 	bl	8000830 <_write>
 8001174:	1c43      	adds	r3, r0, #1
 8001176:	d102      	bne.n	800117e <_write_r+0x1e>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	b103      	cbz	r3, 800117e <_write_r+0x1e>
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	bd38      	pop	{r3, r4, r5, pc}
 8001180:	200001c0 	.word	0x200001c0

08001184 <__errno>:
 8001184:	4b01      	ldr	r3, [pc, #4]	@ (800118c <__errno+0x8>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000000c 	.word	0x2000000c

08001190 <__libc_init_array>:
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	4d0d      	ldr	r5, [pc, #52]	@ (80011c8 <__libc_init_array+0x38>)
 8001194:	4c0d      	ldr	r4, [pc, #52]	@ (80011cc <__libc_init_array+0x3c>)
 8001196:	1b64      	subs	r4, r4, r5
 8001198:	10a4      	asrs	r4, r4, #2
 800119a:	2600      	movs	r6, #0
 800119c:	42a6      	cmp	r6, r4
 800119e:	d109      	bne.n	80011b4 <__libc_init_array+0x24>
 80011a0:	4d0b      	ldr	r5, [pc, #44]	@ (80011d0 <__libc_init_array+0x40>)
 80011a2:	4c0c      	ldr	r4, [pc, #48]	@ (80011d4 <__libc_init_array+0x44>)
 80011a4:	f000 fce2 	bl	8001b6c <_init>
 80011a8:	1b64      	subs	r4, r4, r5
 80011aa:	10a4      	asrs	r4, r4, #2
 80011ac:	2600      	movs	r6, #0
 80011ae:	42a6      	cmp	r6, r4
 80011b0:	d105      	bne.n	80011be <__libc_init_array+0x2e>
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b8:	4798      	blx	r3
 80011ba:	3601      	adds	r6, #1
 80011bc:	e7ee      	b.n	800119c <__libc_init_array+0xc>
 80011be:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c2:	4798      	blx	r3
 80011c4:	3601      	adds	r6, #1
 80011c6:	e7f2      	b.n	80011ae <__libc_init_array+0x1e>
 80011c8:	08001d4c 	.word	0x08001d4c
 80011cc:	08001d4c 	.word	0x08001d4c
 80011d0:	08001d4c 	.word	0x08001d4c
 80011d4:	08001d50 	.word	0x08001d50

080011d8 <__retarget_lock_init_recursive>:
 80011d8:	4770      	bx	lr

080011da <__retarget_lock_acquire_recursive>:
 80011da:	4770      	bx	lr

080011dc <__retarget_lock_release_recursive>:
 80011dc:	4770      	bx	lr
	...

080011e0 <__assert_func>:
 80011e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011e2:	4614      	mov	r4, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <__assert_func+0x2c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4605      	mov	r5, r0
 80011ec:	68d8      	ldr	r0, [r3, #12]
 80011ee:	b954      	cbnz	r4, 8001206 <__assert_func+0x26>
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <__assert_func+0x30>)
 80011f2:	461c      	mov	r4, r3
 80011f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80011f8:	9100      	str	r1, [sp, #0]
 80011fa:	462b      	mov	r3, r5
 80011fc:	4905      	ldr	r1, [pc, #20]	@ (8001214 <__assert_func+0x34>)
 80011fe:	f000 fbd3 	bl	80019a8 <fiprintf>
 8001202:	f000 fc67 	bl	8001ad4 <abort>
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__assert_func+0x38>)
 8001208:	e7f4      	b.n	80011f4 <__assert_func+0x14>
 800120a:	bf00      	nop
 800120c:	2000000c 	.word	0x2000000c
 8001210:	08001d0e 	.word	0x08001d0e
 8001214:	08001ce0 	.word	0x08001ce0
 8001218:	08001cd3 	.word	0x08001cd3

0800121c <_free_r>:
 800121c:	b538      	push	{r3, r4, r5, lr}
 800121e:	4605      	mov	r5, r0
 8001220:	2900      	cmp	r1, #0
 8001222:	d041      	beq.n	80012a8 <_free_r+0x8c>
 8001224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001228:	1f0c      	subs	r4, r1, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	bfb8      	it	lt
 800122e:	18e4      	addlt	r4, r4, r3
 8001230:	f7ff fcf6 	bl	8000c20 <__malloc_lock>
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <_free_r+0x90>)
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	b933      	cbnz	r3, 8001248 <_free_r+0x2c>
 800123a:	6063      	str	r3, [r4, #4]
 800123c:	6014      	str	r4, [r2, #0]
 800123e:	4628      	mov	r0, r5
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001244:	f7ff bcf2 	b.w	8000c2c <__malloc_unlock>
 8001248:	42a3      	cmp	r3, r4
 800124a:	d908      	bls.n	800125e <_free_r+0x42>
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	1821      	adds	r1, r4, r0
 8001250:	428b      	cmp	r3, r1
 8001252:	bf01      	itttt	eq
 8001254:	6819      	ldreq	r1, [r3, #0]
 8001256:	685b      	ldreq	r3, [r3, #4]
 8001258:	1809      	addeq	r1, r1, r0
 800125a:	6021      	streq	r1, [r4, #0]
 800125c:	e7ed      	b.n	800123a <_free_r+0x1e>
 800125e:	461a      	mov	r2, r3
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	b10b      	cbz	r3, 8001268 <_free_r+0x4c>
 8001264:	42a3      	cmp	r3, r4
 8001266:	d9fa      	bls.n	800125e <_free_r+0x42>
 8001268:	6811      	ldr	r1, [r2, #0]
 800126a:	1850      	adds	r0, r2, r1
 800126c:	42a0      	cmp	r0, r4
 800126e:	d10b      	bne.n	8001288 <_free_r+0x6c>
 8001270:	6820      	ldr	r0, [r4, #0]
 8001272:	4401      	add	r1, r0
 8001274:	1850      	adds	r0, r2, r1
 8001276:	4283      	cmp	r3, r0
 8001278:	6011      	str	r1, [r2, #0]
 800127a:	d1e0      	bne.n	800123e <_free_r+0x22>
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	6053      	str	r3, [r2, #4]
 8001282:	4408      	add	r0, r1
 8001284:	6010      	str	r0, [r2, #0]
 8001286:	e7da      	b.n	800123e <_free_r+0x22>
 8001288:	d902      	bls.n	8001290 <_free_r+0x74>
 800128a:	230c      	movs	r3, #12
 800128c:	602b      	str	r3, [r5, #0]
 800128e:	e7d6      	b.n	800123e <_free_r+0x22>
 8001290:	6820      	ldr	r0, [r4, #0]
 8001292:	1821      	adds	r1, r4, r0
 8001294:	428b      	cmp	r3, r1
 8001296:	bf04      	itt	eq
 8001298:	6819      	ldreq	r1, [r3, #0]
 800129a:	685b      	ldreq	r3, [r3, #4]
 800129c:	6063      	str	r3, [r4, #4]
 800129e:	bf04      	itt	eq
 80012a0:	1809      	addeq	r1, r1, r0
 80012a2:	6021      	streq	r1, [r4, #0]
 80012a4:	6054      	str	r4, [r2, #4]
 80012a6:	e7ca      	b.n	800123e <_free_r+0x22>
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
 80012aa:	bf00      	nop
 80012ac:	20000080 	.word	0x20000080

080012b0 <__sfputc_r>:
 80012b0:	6893      	ldr	r3, [r2, #8]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	b410      	push	{r4}
 80012b8:	6093      	str	r3, [r2, #8]
 80012ba:	da08      	bge.n	80012ce <__sfputc_r+0x1e>
 80012bc:	6994      	ldr	r4, [r2, #24]
 80012be:	42a3      	cmp	r3, r4
 80012c0:	db01      	blt.n	80012c6 <__sfputc_r+0x16>
 80012c2:	290a      	cmp	r1, #10
 80012c4:	d103      	bne.n	80012ce <__sfputc_r+0x1e>
 80012c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012ca:	f7ff be68 	b.w	8000f9e <__swbuf_r>
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	1c58      	adds	r0, r3, #1
 80012d2:	6010      	str	r0, [r2, #0]
 80012d4:	7019      	strb	r1, [r3, #0]
 80012d6:	4608      	mov	r0, r1
 80012d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012dc:	4770      	bx	lr

080012de <__sfputs_r>:
 80012de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e0:	4606      	mov	r6, r0
 80012e2:	460f      	mov	r7, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	18d5      	adds	r5, r2, r3
 80012e8:	42ac      	cmp	r4, r5
 80012ea:	d101      	bne.n	80012f0 <__sfputs_r+0x12>
 80012ec:	2000      	movs	r0, #0
 80012ee:	e007      	b.n	8001300 <__sfputs_r+0x22>
 80012f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012f4:	463a      	mov	r2, r7
 80012f6:	4630      	mov	r0, r6
 80012f8:	f7ff ffda 	bl	80012b0 <__sfputc_r>
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	d1f3      	bne.n	80012e8 <__sfputs_r+0xa>
 8001300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001304 <_vfiprintf_r>:
 8001304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001308:	460d      	mov	r5, r1
 800130a:	b09d      	sub	sp, #116	@ 0x74
 800130c:	4614      	mov	r4, r2
 800130e:	4698      	mov	r8, r3
 8001310:	4606      	mov	r6, r0
 8001312:	b118      	cbz	r0, 800131c <_vfiprintf_r+0x18>
 8001314:	6a03      	ldr	r3, [r0, #32]
 8001316:	b90b      	cbnz	r3, 800131c <_vfiprintf_r+0x18>
 8001318:	f7ff fd58 	bl	8000dcc <__sinit>
 800131c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800131e:	07d9      	lsls	r1, r3, #31
 8001320:	d405      	bmi.n	800132e <_vfiprintf_r+0x2a>
 8001322:	89ab      	ldrh	r3, [r5, #12]
 8001324:	059a      	lsls	r2, r3, #22
 8001326:	d402      	bmi.n	800132e <_vfiprintf_r+0x2a>
 8001328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800132a:	f7ff ff56 	bl	80011da <__retarget_lock_acquire_recursive>
 800132e:	89ab      	ldrh	r3, [r5, #12]
 8001330:	071b      	lsls	r3, r3, #28
 8001332:	d501      	bpl.n	8001338 <_vfiprintf_r+0x34>
 8001334:	692b      	ldr	r3, [r5, #16]
 8001336:	b99b      	cbnz	r3, 8001360 <_vfiprintf_r+0x5c>
 8001338:	4629      	mov	r1, r5
 800133a:	4630      	mov	r0, r6
 800133c:	f7ff fe6e 	bl	800101c <__swsetup_r>
 8001340:	b170      	cbz	r0, 8001360 <_vfiprintf_r+0x5c>
 8001342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001344:	07dc      	lsls	r4, r3, #31
 8001346:	d504      	bpl.n	8001352 <_vfiprintf_r+0x4e>
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	b01d      	add	sp, #116	@ 0x74
 800134e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001352:	89ab      	ldrh	r3, [r5, #12]
 8001354:	0598      	lsls	r0, r3, #22
 8001356:	d4f7      	bmi.n	8001348 <_vfiprintf_r+0x44>
 8001358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800135a:	f7ff ff3f 	bl	80011dc <__retarget_lock_release_recursive>
 800135e:	e7f3      	b.n	8001348 <_vfiprintf_r+0x44>
 8001360:	2300      	movs	r3, #0
 8001362:	9309      	str	r3, [sp, #36]	@ 0x24
 8001364:	2320      	movs	r3, #32
 8001366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800136a:	f8cd 800c 	str.w	r8, [sp, #12]
 800136e:	2330      	movs	r3, #48	@ 0x30
 8001370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001520 <_vfiprintf_r+0x21c>
 8001374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001378:	f04f 0901 	mov.w	r9, #1
 800137c:	4623      	mov	r3, r4
 800137e:	469a      	mov	sl, r3
 8001380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001384:	b10a      	cbz	r2, 800138a <_vfiprintf_r+0x86>
 8001386:	2a25      	cmp	r2, #37	@ 0x25
 8001388:	d1f9      	bne.n	800137e <_vfiprintf_r+0x7a>
 800138a:	ebba 0b04 	subs.w	fp, sl, r4
 800138e:	d00b      	beq.n	80013a8 <_vfiprintf_r+0xa4>
 8001390:	465b      	mov	r3, fp
 8001392:	4622      	mov	r2, r4
 8001394:	4629      	mov	r1, r5
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff ffa1 	bl	80012de <__sfputs_r>
 800139c:	3001      	adds	r0, #1
 800139e:	f000 80a7 	beq.w	80014f0 <_vfiprintf_r+0x1ec>
 80013a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013a4:	445a      	add	r2, fp
 80013a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80013a8:	f89a 3000 	ldrb.w	r3, [sl]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 809f 	beq.w	80014f0 <_vfiprintf_r+0x1ec>
 80013b2:	2300      	movs	r3, #0
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013bc:	f10a 0a01 	add.w	sl, sl, #1
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	9307      	str	r3, [sp, #28]
 80013c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80013ca:	4654      	mov	r4, sl
 80013cc:	2205      	movs	r2, #5
 80013ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d2:	4853      	ldr	r0, [pc, #332]	@ (8001520 <_vfiprintf_r+0x21c>)
 80013d4:	f7fe ff1c 	bl	8000210 <memchr>
 80013d8:	9a04      	ldr	r2, [sp, #16]
 80013da:	b9d8      	cbnz	r0, 8001414 <_vfiprintf_r+0x110>
 80013dc:	06d1      	lsls	r1, r2, #27
 80013de:	bf44      	itt	mi
 80013e0:	2320      	movmi	r3, #32
 80013e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013e6:	0713      	lsls	r3, r2, #28
 80013e8:	bf44      	itt	mi
 80013ea:	232b      	movmi	r3, #43	@ 0x2b
 80013ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013f0:	f89a 3000 	ldrb.w	r3, [sl]
 80013f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80013f6:	d015      	beq.n	8001424 <_vfiprintf_r+0x120>
 80013f8:	9a07      	ldr	r2, [sp, #28]
 80013fa:	4654      	mov	r4, sl
 80013fc:	2000      	movs	r0, #0
 80013fe:	f04f 0c0a 	mov.w	ip, #10
 8001402:	4621      	mov	r1, r4
 8001404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001408:	3b30      	subs	r3, #48	@ 0x30
 800140a:	2b09      	cmp	r3, #9
 800140c:	d94b      	bls.n	80014a6 <_vfiprintf_r+0x1a2>
 800140e:	b1b0      	cbz	r0, 800143e <_vfiprintf_r+0x13a>
 8001410:	9207      	str	r2, [sp, #28]
 8001412:	e014      	b.n	800143e <_vfiprintf_r+0x13a>
 8001414:	eba0 0308 	sub.w	r3, r0, r8
 8001418:	fa09 f303 	lsl.w	r3, r9, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	9304      	str	r3, [sp, #16]
 8001420:	46a2      	mov	sl, r4
 8001422:	e7d2      	b.n	80013ca <_vfiprintf_r+0xc6>
 8001424:	9b03      	ldr	r3, [sp, #12]
 8001426:	1d19      	adds	r1, r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	9103      	str	r1, [sp, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfbb      	ittet	lt
 8001430:	425b      	neglt	r3, r3
 8001432:	f042 0202 	orrlt.w	r2, r2, #2
 8001436:	9307      	strge	r3, [sp, #28]
 8001438:	9307      	strlt	r3, [sp, #28]
 800143a:	bfb8      	it	lt
 800143c:	9204      	strlt	r2, [sp, #16]
 800143e:	7823      	ldrb	r3, [r4, #0]
 8001440:	2b2e      	cmp	r3, #46	@ 0x2e
 8001442:	d10a      	bne.n	800145a <_vfiprintf_r+0x156>
 8001444:	7863      	ldrb	r3, [r4, #1]
 8001446:	2b2a      	cmp	r3, #42	@ 0x2a
 8001448:	d132      	bne.n	80014b0 <_vfiprintf_r+0x1ac>
 800144a:	9b03      	ldr	r3, [sp, #12]
 800144c:	1d1a      	adds	r2, r3, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	9203      	str	r2, [sp, #12]
 8001452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001456:	3402      	adds	r4, #2
 8001458:	9305      	str	r3, [sp, #20]
 800145a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001530 <_vfiprintf_r+0x22c>
 800145e:	7821      	ldrb	r1, [r4, #0]
 8001460:	2203      	movs	r2, #3
 8001462:	4650      	mov	r0, sl
 8001464:	f7fe fed4 	bl	8000210 <memchr>
 8001468:	b138      	cbz	r0, 800147a <_vfiprintf_r+0x176>
 800146a:	9b04      	ldr	r3, [sp, #16]
 800146c:	eba0 000a 	sub.w	r0, r0, sl
 8001470:	2240      	movs	r2, #64	@ 0x40
 8001472:	4082      	lsls	r2, r0
 8001474:	4313      	orrs	r3, r2
 8001476:	3401      	adds	r4, #1
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147e:	4829      	ldr	r0, [pc, #164]	@ (8001524 <_vfiprintf_r+0x220>)
 8001480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001484:	2206      	movs	r2, #6
 8001486:	f7fe fec3 	bl	8000210 <memchr>
 800148a:	2800      	cmp	r0, #0
 800148c:	d03f      	beq.n	800150e <_vfiprintf_r+0x20a>
 800148e:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <_vfiprintf_r+0x224>)
 8001490:	bb1b      	cbnz	r3, 80014da <_vfiprintf_r+0x1d6>
 8001492:	9b03      	ldr	r3, [sp, #12]
 8001494:	3307      	adds	r3, #7
 8001496:	f023 0307 	bic.w	r3, r3, #7
 800149a:	3308      	adds	r3, #8
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014a0:	443b      	add	r3, r7
 80014a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80014a4:	e76a      	b.n	800137c <_vfiprintf_r+0x78>
 80014a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80014aa:	460c      	mov	r4, r1
 80014ac:	2001      	movs	r0, #1
 80014ae:	e7a8      	b.n	8001402 <_vfiprintf_r+0xfe>
 80014b0:	2300      	movs	r3, #0
 80014b2:	3401      	adds	r4, #1
 80014b4:	9305      	str	r3, [sp, #20]
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 0c0a 	mov.w	ip, #10
 80014bc:	4620      	mov	r0, r4
 80014be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014c2:	3a30      	subs	r2, #48	@ 0x30
 80014c4:	2a09      	cmp	r2, #9
 80014c6:	d903      	bls.n	80014d0 <_vfiprintf_r+0x1cc>
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0c6      	beq.n	800145a <_vfiprintf_r+0x156>
 80014cc:	9105      	str	r1, [sp, #20]
 80014ce:	e7c4      	b.n	800145a <_vfiprintf_r+0x156>
 80014d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80014d4:	4604      	mov	r4, r0
 80014d6:	2301      	movs	r3, #1
 80014d8:	e7f0      	b.n	80014bc <_vfiprintf_r+0x1b8>
 80014da:	ab03      	add	r3, sp, #12
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	462a      	mov	r2, r5
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <_vfiprintf_r+0x228>)
 80014e2:	a904      	add	r1, sp, #16
 80014e4:	4630      	mov	r0, r6
 80014e6:	f3af 8000 	nop.w
 80014ea:	4607      	mov	r7, r0
 80014ec:	1c78      	adds	r0, r7, #1
 80014ee:	d1d6      	bne.n	800149e <_vfiprintf_r+0x19a>
 80014f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014f2:	07d9      	lsls	r1, r3, #31
 80014f4:	d405      	bmi.n	8001502 <_vfiprintf_r+0x1fe>
 80014f6:	89ab      	ldrh	r3, [r5, #12]
 80014f8:	059a      	lsls	r2, r3, #22
 80014fa:	d402      	bmi.n	8001502 <_vfiprintf_r+0x1fe>
 80014fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014fe:	f7ff fe6d 	bl	80011dc <__retarget_lock_release_recursive>
 8001502:	89ab      	ldrh	r3, [r5, #12]
 8001504:	065b      	lsls	r3, r3, #25
 8001506:	f53f af1f 	bmi.w	8001348 <_vfiprintf_r+0x44>
 800150a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800150c:	e71e      	b.n	800134c <_vfiprintf_r+0x48>
 800150e:	ab03      	add	r3, sp, #12
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	462a      	mov	r2, r5
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <_vfiprintf_r+0x228>)
 8001516:	a904      	add	r1, sp, #16
 8001518:	4630      	mov	r0, r6
 800151a:	f000 f879 	bl	8001610 <_printf_i>
 800151e:	e7e4      	b.n	80014ea <_vfiprintf_r+0x1e6>
 8001520:	08001d0f 	.word	0x08001d0f
 8001524:	08001d19 	.word	0x08001d19
 8001528:	00000000 	.word	0x00000000
 800152c:	080012df 	.word	0x080012df
 8001530:	08001d15 	.word	0x08001d15

08001534 <_printf_common>:
 8001534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001538:	4616      	mov	r6, r2
 800153a:	4698      	mov	r8, r3
 800153c:	688a      	ldr	r2, [r1, #8]
 800153e:	690b      	ldr	r3, [r1, #16]
 8001540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001544:	4293      	cmp	r3, r2
 8001546:	bfb8      	it	lt
 8001548:	4613      	movlt	r3, r2
 800154a:	6033      	str	r3, [r6, #0]
 800154c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001550:	4607      	mov	r7, r0
 8001552:	460c      	mov	r4, r1
 8001554:	b10a      	cbz	r2, 800155a <_printf_common+0x26>
 8001556:	3301      	adds	r3, #1
 8001558:	6033      	str	r3, [r6, #0]
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	0699      	lsls	r1, r3, #26
 800155e:	bf42      	ittt	mi
 8001560:	6833      	ldrmi	r3, [r6, #0]
 8001562:	3302      	addmi	r3, #2
 8001564:	6033      	strmi	r3, [r6, #0]
 8001566:	6825      	ldr	r5, [r4, #0]
 8001568:	f015 0506 	ands.w	r5, r5, #6
 800156c:	d106      	bne.n	800157c <_printf_common+0x48>
 800156e:	f104 0a19 	add.w	sl, r4, #25
 8001572:	68e3      	ldr	r3, [r4, #12]
 8001574:	6832      	ldr	r2, [r6, #0]
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	42ab      	cmp	r3, r5
 800157a:	dc26      	bgt.n	80015ca <_printf_common+0x96>
 800157c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001580:	6822      	ldr	r2, [r4, #0]
 8001582:	3b00      	subs	r3, #0
 8001584:	bf18      	it	ne
 8001586:	2301      	movne	r3, #1
 8001588:	0692      	lsls	r2, r2, #26
 800158a:	d42b      	bmi.n	80015e4 <_printf_common+0xb0>
 800158c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001590:	4641      	mov	r1, r8
 8001592:	4638      	mov	r0, r7
 8001594:	47c8      	blx	r9
 8001596:	3001      	adds	r0, #1
 8001598:	d01e      	beq.n	80015d8 <_printf_common+0xa4>
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	6922      	ldr	r2, [r4, #16]
 800159e:	f003 0306 	and.w	r3, r3, #6
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf02      	ittt	eq
 80015a6:	68e5      	ldreq	r5, [r4, #12]
 80015a8:	6833      	ldreq	r3, [r6, #0]
 80015aa:	1aed      	subeq	r5, r5, r3
 80015ac:	68a3      	ldr	r3, [r4, #8]
 80015ae:	bf0c      	ite	eq
 80015b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015b4:	2500      	movne	r5, #0
 80015b6:	4293      	cmp	r3, r2
 80015b8:	bfc4      	itt	gt
 80015ba:	1a9b      	subgt	r3, r3, r2
 80015bc:	18ed      	addgt	r5, r5, r3
 80015be:	2600      	movs	r6, #0
 80015c0:	341a      	adds	r4, #26
 80015c2:	42b5      	cmp	r5, r6
 80015c4:	d11a      	bne.n	80015fc <_printf_common+0xc8>
 80015c6:	2000      	movs	r0, #0
 80015c8:	e008      	b.n	80015dc <_printf_common+0xa8>
 80015ca:	2301      	movs	r3, #1
 80015cc:	4652      	mov	r2, sl
 80015ce:	4641      	mov	r1, r8
 80015d0:	4638      	mov	r0, r7
 80015d2:	47c8      	blx	r9
 80015d4:	3001      	adds	r0, #1
 80015d6:	d103      	bne.n	80015e0 <_printf_common+0xac>
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015e0:	3501      	adds	r5, #1
 80015e2:	e7c6      	b.n	8001572 <_printf_common+0x3e>
 80015e4:	18e1      	adds	r1, r4, r3
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	2030      	movs	r0, #48	@ 0x30
 80015ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015ee:	4422      	add	r2, r4
 80015f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80015f8:	3302      	adds	r3, #2
 80015fa:	e7c7      	b.n	800158c <_printf_common+0x58>
 80015fc:	2301      	movs	r3, #1
 80015fe:	4622      	mov	r2, r4
 8001600:	4641      	mov	r1, r8
 8001602:	4638      	mov	r0, r7
 8001604:	47c8      	blx	r9
 8001606:	3001      	adds	r0, #1
 8001608:	d0e6      	beq.n	80015d8 <_printf_common+0xa4>
 800160a:	3601      	adds	r6, #1
 800160c:	e7d9      	b.n	80015c2 <_printf_common+0x8e>
	...

08001610 <_printf_i>:
 8001610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001614:	7e0f      	ldrb	r7, [r1, #24]
 8001616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001618:	2f78      	cmp	r7, #120	@ 0x78
 800161a:	4691      	mov	r9, r2
 800161c:	4680      	mov	r8, r0
 800161e:	460c      	mov	r4, r1
 8001620:	469a      	mov	sl, r3
 8001622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001626:	d807      	bhi.n	8001638 <_printf_i+0x28>
 8001628:	2f62      	cmp	r7, #98	@ 0x62
 800162a:	d80a      	bhi.n	8001642 <_printf_i+0x32>
 800162c:	2f00      	cmp	r7, #0
 800162e:	f000 80d2 	beq.w	80017d6 <_printf_i+0x1c6>
 8001632:	2f58      	cmp	r7, #88	@ 0x58
 8001634:	f000 80b9 	beq.w	80017aa <_printf_i+0x19a>
 8001638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800163c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001640:	e03a      	b.n	80016b8 <_printf_i+0xa8>
 8001642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001646:	2b15      	cmp	r3, #21
 8001648:	d8f6      	bhi.n	8001638 <_printf_i+0x28>
 800164a:	a101      	add	r1, pc, #4	@ (adr r1, 8001650 <_printf_i+0x40>)
 800164c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001650:	080016a9 	.word	0x080016a9
 8001654:	080016bd 	.word	0x080016bd
 8001658:	08001639 	.word	0x08001639
 800165c:	08001639 	.word	0x08001639
 8001660:	08001639 	.word	0x08001639
 8001664:	08001639 	.word	0x08001639
 8001668:	080016bd 	.word	0x080016bd
 800166c:	08001639 	.word	0x08001639
 8001670:	08001639 	.word	0x08001639
 8001674:	08001639 	.word	0x08001639
 8001678:	08001639 	.word	0x08001639
 800167c:	080017bd 	.word	0x080017bd
 8001680:	080016e7 	.word	0x080016e7
 8001684:	08001777 	.word	0x08001777
 8001688:	08001639 	.word	0x08001639
 800168c:	08001639 	.word	0x08001639
 8001690:	080017df 	.word	0x080017df
 8001694:	08001639 	.word	0x08001639
 8001698:	080016e7 	.word	0x080016e7
 800169c:	08001639 	.word	0x08001639
 80016a0:	08001639 	.word	0x08001639
 80016a4:	0800177f 	.word	0x0800177f
 80016a8:	6833      	ldr	r3, [r6, #0]
 80016aa:	1d1a      	adds	r2, r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6032      	str	r2, [r6, #0]
 80016b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016b8:	2301      	movs	r3, #1
 80016ba:	e09d      	b.n	80017f8 <_printf_i+0x1e8>
 80016bc:	6833      	ldr	r3, [r6, #0]
 80016be:	6820      	ldr	r0, [r4, #0]
 80016c0:	1d19      	adds	r1, r3, #4
 80016c2:	6031      	str	r1, [r6, #0]
 80016c4:	0606      	lsls	r6, r0, #24
 80016c6:	d501      	bpl.n	80016cc <_printf_i+0xbc>
 80016c8:	681d      	ldr	r5, [r3, #0]
 80016ca:	e003      	b.n	80016d4 <_printf_i+0xc4>
 80016cc:	0645      	lsls	r5, r0, #25
 80016ce:	d5fb      	bpl.n	80016c8 <_printf_i+0xb8>
 80016d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016d4:	2d00      	cmp	r5, #0
 80016d6:	da03      	bge.n	80016e0 <_printf_i+0xd0>
 80016d8:	232d      	movs	r3, #45	@ 0x2d
 80016da:	426d      	negs	r5, r5
 80016dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016e0:	4859      	ldr	r0, [pc, #356]	@ (8001848 <_printf_i+0x238>)
 80016e2:	230a      	movs	r3, #10
 80016e4:	e011      	b.n	800170a <_printf_i+0xfa>
 80016e6:	6821      	ldr	r1, [r4, #0]
 80016e8:	6833      	ldr	r3, [r6, #0]
 80016ea:	0608      	lsls	r0, r1, #24
 80016ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80016f0:	d402      	bmi.n	80016f8 <_printf_i+0xe8>
 80016f2:	0649      	lsls	r1, r1, #25
 80016f4:	bf48      	it	mi
 80016f6:	b2ad      	uxthmi	r5, r5
 80016f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80016fa:	4853      	ldr	r0, [pc, #332]	@ (8001848 <_printf_i+0x238>)
 80016fc:	6033      	str	r3, [r6, #0]
 80016fe:	bf14      	ite	ne
 8001700:	230a      	movne	r3, #10
 8001702:	2308      	moveq	r3, #8
 8001704:	2100      	movs	r1, #0
 8001706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800170a:	6866      	ldr	r6, [r4, #4]
 800170c:	60a6      	str	r6, [r4, #8]
 800170e:	2e00      	cmp	r6, #0
 8001710:	bfa2      	ittt	ge
 8001712:	6821      	ldrge	r1, [r4, #0]
 8001714:	f021 0104 	bicge.w	r1, r1, #4
 8001718:	6021      	strge	r1, [r4, #0]
 800171a:	b90d      	cbnz	r5, 8001720 <_printf_i+0x110>
 800171c:	2e00      	cmp	r6, #0
 800171e:	d04b      	beq.n	80017b8 <_printf_i+0x1a8>
 8001720:	4616      	mov	r6, r2
 8001722:	fbb5 f1f3 	udiv	r1, r5, r3
 8001726:	fb03 5711 	mls	r7, r3, r1, r5
 800172a:	5dc7      	ldrb	r7, [r0, r7]
 800172c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001730:	462f      	mov	r7, r5
 8001732:	42bb      	cmp	r3, r7
 8001734:	460d      	mov	r5, r1
 8001736:	d9f4      	bls.n	8001722 <_printf_i+0x112>
 8001738:	2b08      	cmp	r3, #8
 800173a:	d10b      	bne.n	8001754 <_printf_i+0x144>
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	07df      	lsls	r7, r3, #31
 8001740:	d508      	bpl.n	8001754 <_printf_i+0x144>
 8001742:	6923      	ldr	r3, [r4, #16]
 8001744:	6861      	ldr	r1, [r4, #4]
 8001746:	4299      	cmp	r1, r3
 8001748:	bfde      	ittt	le
 800174a:	2330      	movle	r3, #48	@ 0x30
 800174c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001754:	1b92      	subs	r2, r2, r6
 8001756:	6122      	str	r2, [r4, #16]
 8001758:	f8cd a000 	str.w	sl, [sp]
 800175c:	464b      	mov	r3, r9
 800175e:	aa03      	add	r2, sp, #12
 8001760:	4621      	mov	r1, r4
 8001762:	4640      	mov	r0, r8
 8001764:	f7ff fee6 	bl	8001534 <_printf_common>
 8001768:	3001      	adds	r0, #1
 800176a:	d14a      	bne.n	8001802 <_printf_i+0x1f2>
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	b004      	add	sp, #16
 8001772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	f043 0320 	orr.w	r3, r3, #32
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	4833      	ldr	r0, [pc, #204]	@ (800184c <_printf_i+0x23c>)
 8001780:	2778      	movs	r7, #120	@ 0x78
 8001782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	6831      	ldr	r1, [r6, #0]
 800178a:	061f      	lsls	r7, r3, #24
 800178c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001790:	d402      	bmi.n	8001798 <_printf_i+0x188>
 8001792:	065f      	lsls	r7, r3, #25
 8001794:	bf48      	it	mi
 8001796:	b2ad      	uxthmi	r5, r5
 8001798:	6031      	str	r1, [r6, #0]
 800179a:	07d9      	lsls	r1, r3, #31
 800179c:	bf44      	itt	mi
 800179e:	f043 0320 	orrmi.w	r3, r3, #32
 80017a2:	6023      	strmi	r3, [r4, #0]
 80017a4:	b11d      	cbz	r5, 80017ae <_printf_i+0x19e>
 80017a6:	2310      	movs	r3, #16
 80017a8:	e7ac      	b.n	8001704 <_printf_i+0xf4>
 80017aa:	4827      	ldr	r0, [pc, #156]	@ (8001848 <_printf_i+0x238>)
 80017ac:	e7e9      	b.n	8001782 <_printf_i+0x172>
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f023 0320 	bic.w	r3, r3, #32
 80017b4:	6023      	str	r3, [r4, #0]
 80017b6:	e7f6      	b.n	80017a6 <_printf_i+0x196>
 80017b8:	4616      	mov	r6, r2
 80017ba:	e7bd      	b.n	8001738 <_printf_i+0x128>
 80017bc:	6833      	ldr	r3, [r6, #0]
 80017be:	6825      	ldr	r5, [r4, #0]
 80017c0:	6961      	ldr	r1, [r4, #20]
 80017c2:	1d18      	adds	r0, r3, #4
 80017c4:	6030      	str	r0, [r6, #0]
 80017c6:	062e      	lsls	r6, r5, #24
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	d501      	bpl.n	80017d0 <_printf_i+0x1c0>
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	e002      	b.n	80017d6 <_printf_i+0x1c6>
 80017d0:	0668      	lsls	r0, r5, #25
 80017d2:	d5fb      	bpl.n	80017cc <_printf_i+0x1bc>
 80017d4:	8019      	strh	r1, [r3, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	6123      	str	r3, [r4, #16]
 80017da:	4616      	mov	r6, r2
 80017dc:	e7bc      	b.n	8001758 <_printf_i+0x148>
 80017de:	6833      	ldr	r3, [r6, #0]
 80017e0:	1d1a      	adds	r2, r3, #4
 80017e2:	6032      	str	r2, [r6, #0]
 80017e4:	681e      	ldr	r6, [r3, #0]
 80017e6:	6862      	ldr	r2, [r4, #4]
 80017e8:	2100      	movs	r1, #0
 80017ea:	4630      	mov	r0, r6
 80017ec:	f7fe fd10 	bl	8000210 <memchr>
 80017f0:	b108      	cbz	r0, 80017f6 <_printf_i+0x1e6>
 80017f2:	1b80      	subs	r0, r0, r6
 80017f4:	6060      	str	r0, [r4, #4]
 80017f6:	6863      	ldr	r3, [r4, #4]
 80017f8:	6123      	str	r3, [r4, #16]
 80017fa:	2300      	movs	r3, #0
 80017fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001800:	e7aa      	b.n	8001758 <_printf_i+0x148>
 8001802:	6923      	ldr	r3, [r4, #16]
 8001804:	4632      	mov	r2, r6
 8001806:	4649      	mov	r1, r9
 8001808:	4640      	mov	r0, r8
 800180a:	47d0      	blx	sl
 800180c:	3001      	adds	r0, #1
 800180e:	d0ad      	beq.n	800176c <_printf_i+0x15c>
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	079b      	lsls	r3, r3, #30
 8001814:	d413      	bmi.n	800183e <_printf_i+0x22e>
 8001816:	68e0      	ldr	r0, [r4, #12]
 8001818:	9b03      	ldr	r3, [sp, #12]
 800181a:	4298      	cmp	r0, r3
 800181c:	bfb8      	it	lt
 800181e:	4618      	movlt	r0, r3
 8001820:	e7a6      	b.n	8001770 <_printf_i+0x160>
 8001822:	2301      	movs	r3, #1
 8001824:	4632      	mov	r2, r6
 8001826:	4649      	mov	r1, r9
 8001828:	4640      	mov	r0, r8
 800182a:	47d0      	blx	sl
 800182c:	3001      	adds	r0, #1
 800182e:	d09d      	beq.n	800176c <_printf_i+0x15c>
 8001830:	3501      	adds	r5, #1
 8001832:	68e3      	ldr	r3, [r4, #12]
 8001834:	9903      	ldr	r1, [sp, #12]
 8001836:	1a5b      	subs	r3, r3, r1
 8001838:	42ab      	cmp	r3, r5
 800183a:	dcf2      	bgt.n	8001822 <_printf_i+0x212>
 800183c:	e7eb      	b.n	8001816 <_printf_i+0x206>
 800183e:	2500      	movs	r5, #0
 8001840:	f104 0619 	add.w	r6, r4, #25
 8001844:	e7f5      	b.n	8001832 <_printf_i+0x222>
 8001846:	bf00      	nop
 8001848:	08001d20 	.word	0x08001d20
 800184c:	08001d31 	.word	0x08001d31

08001850 <__sflush_r>:
 8001850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001858:	0716      	lsls	r6, r2, #28
 800185a:	4605      	mov	r5, r0
 800185c:	460c      	mov	r4, r1
 800185e:	d454      	bmi.n	800190a <__sflush_r+0xba>
 8001860:	684b      	ldr	r3, [r1, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	dc02      	bgt.n	800186c <__sflush_r+0x1c>
 8001866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd48      	ble.n	80018fe <__sflush_r+0xae>
 800186c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800186e:	2e00      	cmp	r6, #0
 8001870:	d045      	beq.n	80018fe <__sflush_r+0xae>
 8001872:	2300      	movs	r3, #0
 8001874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001878:	682f      	ldr	r7, [r5, #0]
 800187a:	6a21      	ldr	r1, [r4, #32]
 800187c:	602b      	str	r3, [r5, #0]
 800187e:	d030      	beq.n	80018e2 <__sflush_r+0x92>
 8001880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001882:	89a3      	ldrh	r3, [r4, #12]
 8001884:	0759      	lsls	r1, r3, #29
 8001886:	d505      	bpl.n	8001894 <__sflush_r+0x44>
 8001888:	6863      	ldr	r3, [r4, #4]
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800188e:	b10b      	cbz	r3, 8001894 <__sflush_r+0x44>
 8001890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001892:	1ad2      	subs	r2, r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001898:	6a21      	ldr	r1, [r4, #32]
 800189a:	4628      	mov	r0, r5
 800189c:	47b0      	blx	r6
 800189e:	1c43      	adds	r3, r0, #1
 80018a0:	89a3      	ldrh	r3, [r4, #12]
 80018a2:	d106      	bne.n	80018b2 <__sflush_r+0x62>
 80018a4:	6829      	ldr	r1, [r5, #0]
 80018a6:	291d      	cmp	r1, #29
 80018a8:	d82b      	bhi.n	8001902 <__sflush_r+0xb2>
 80018aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <__sflush_r+0x104>)
 80018ac:	410a      	asrs	r2, r1
 80018ae:	07d6      	lsls	r6, r2, #31
 80018b0:	d427      	bmi.n	8001902 <__sflush_r+0xb2>
 80018b2:	2200      	movs	r2, #0
 80018b4:	6062      	str	r2, [r4, #4]
 80018b6:	04d9      	lsls	r1, r3, #19
 80018b8:	6922      	ldr	r2, [r4, #16]
 80018ba:	6022      	str	r2, [r4, #0]
 80018bc:	d504      	bpl.n	80018c8 <__sflush_r+0x78>
 80018be:	1c42      	adds	r2, r0, #1
 80018c0:	d101      	bne.n	80018c6 <__sflush_r+0x76>
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	b903      	cbnz	r3, 80018c8 <__sflush_r+0x78>
 80018c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80018c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018ca:	602f      	str	r7, [r5, #0]
 80018cc:	b1b9      	cbz	r1, 80018fe <__sflush_r+0xae>
 80018ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018d2:	4299      	cmp	r1, r3
 80018d4:	d002      	beq.n	80018dc <__sflush_r+0x8c>
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fca0 	bl	800121c <_free_r>
 80018dc:	2300      	movs	r3, #0
 80018de:	6363      	str	r3, [r4, #52]	@ 0x34
 80018e0:	e00d      	b.n	80018fe <__sflush_r+0xae>
 80018e2:	2301      	movs	r3, #1
 80018e4:	4628      	mov	r0, r5
 80018e6:	47b0      	blx	r6
 80018e8:	4602      	mov	r2, r0
 80018ea:	1c50      	adds	r0, r2, #1
 80018ec:	d1c9      	bne.n	8001882 <__sflush_r+0x32>
 80018ee:	682b      	ldr	r3, [r5, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0c6      	beq.n	8001882 <__sflush_r+0x32>
 80018f4:	2b1d      	cmp	r3, #29
 80018f6:	d001      	beq.n	80018fc <__sflush_r+0xac>
 80018f8:	2b16      	cmp	r3, #22
 80018fa:	d11e      	bne.n	800193a <__sflush_r+0xea>
 80018fc:	602f      	str	r7, [r5, #0]
 80018fe:	2000      	movs	r0, #0
 8001900:	e022      	b.n	8001948 <__sflush_r+0xf8>
 8001902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001906:	b21b      	sxth	r3, r3
 8001908:	e01b      	b.n	8001942 <__sflush_r+0xf2>
 800190a:	690f      	ldr	r7, [r1, #16]
 800190c:	2f00      	cmp	r7, #0
 800190e:	d0f6      	beq.n	80018fe <__sflush_r+0xae>
 8001910:	0793      	lsls	r3, r2, #30
 8001912:	680e      	ldr	r6, [r1, #0]
 8001914:	bf08      	it	eq
 8001916:	694b      	ldreq	r3, [r1, #20]
 8001918:	600f      	str	r7, [r1, #0]
 800191a:	bf18      	it	ne
 800191c:	2300      	movne	r3, #0
 800191e:	eba6 0807 	sub.w	r8, r6, r7
 8001922:	608b      	str	r3, [r1, #8]
 8001924:	f1b8 0f00 	cmp.w	r8, #0
 8001928:	dde9      	ble.n	80018fe <__sflush_r+0xae>
 800192a:	6a21      	ldr	r1, [r4, #32]
 800192c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800192e:	4643      	mov	r3, r8
 8001930:	463a      	mov	r2, r7
 8001932:	4628      	mov	r0, r5
 8001934:	47b0      	blx	r6
 8001936:	2800      	cmp	r0, #0
 8001938:	dc08      	bgt.n	800194c <__sflush_r+0xfc>
 800193a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800193e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001942:	81a3      	strh	r3, [r4, #12]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800194c:	4407      	add	r7, r0
 800194e:	eba8 0800 	sub.w	r8, r8, r0
 8001952:	e7e7      	b.n	8001924 <__sflush_r+0xd4>
 8001954:	dfbffffe 	.word	0xdfbffffe

08001958 <_fflush_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	690b      	ldr	r3, [r1, #16]
 800195c:	4605      	mov	r5, r0
 800195e:	460c      	mov	r4, r1
 8001960:	b913      	cbnz	r3, 8001968 <_fflush_r+0x10>
 8001962:	2500      	movs	r5, #0
 8001964:	4628      	mov	r0, r5
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	b118      	cbz	r0, 8001972 <_fflush_r+0x1a>
 800196a:	6a03      	ldr	r3, [r0, #32]
 800196c:	b90b      	cbnz	r3, 8001972 <_fflush_r+0x1a>
 800196e:	f7ff fa2d 	bl	8000dcc <__sinit>
 8001972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f3      	beq.n	8001962 <_fflush_r+0xa>
 800197a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800197c:	07d0      	lsls	r0, r2, #31
 800197e:	d404      	bmi.n	800198a <_fflush_r+0x32>
 8001980:	0599      	lsls	r1, r3, #22
 8001982:	d402      	bmi.n	800198a <_fflush_r+0x32>
 8001984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001986:	f7ff fc28 	bl	80011da <__retarget_lock_acquire_recursive>
 800198a:	4628      	mov	r0, r5
 800198c:	4621      	mov	r1, r4
 800198e:	f7ff ff5f 	bl	8001850 <__sflush_r>
 8001992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001994:	07da      	lsls	r2, r3, #31
 8001996:	4605      	mov	r5, r0
 8001998:	d4e4      	bmi.n	8001964 <_fflush_r+0xc>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	059b      	lsls	r3, r3, #22
 800199e:	d4e1      	bmi.n	8001964 <_fflush_r+0xc>
 80019a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019a2:	f7ff fc1b 	bl	80011dc <__retarget_lock_release_recursive>
 80019a6:	e7dd      	b.n	8001964 <_fflush_r+0xc>

080019a8 <fiprintf>:
 80019a8:	b40e      	push	{r1, r2, r3}
 80019aa:	b503      	push	{r0, r1, lr}
 80019ac:	4601      	mov	r1, r0
 80019ae:	ab03      	add	r3, sp, #12
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <fiprintf+0x20>)
 80019b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	f7ff fca3 	bl	8001304 <_vfiprintf_r>
 80019be:	b002      	add	sp, #8
 80019c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80019c4:	b003      	add	sp, #12
 80019c6:	4770      	bx	lr
 80019c8:	2000000c 	.word	0x2000000c

080019cc <__swhatbuf_r>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	460c      	mov	r4, r1
 80019d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d4:	2900      	cmp	r1, #0
 80019d6:	b096      	sub	sp, #88	@ 0x58
 80019d8:	4615      	mov	r5, r2
 80019da:	461e      	mov	r6, r3
 80019dc:	da0d      	bge.n	80019fa <__swhatbuf_r+0x2e>
 80019de:	89a3      	ldrh	r3, [r4, #12]
 80019e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	bf14      	ite	ne
 80019ea:	2340      	movne	r3, #64	@ 0x40
 80019ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80019f0:	2000      	movs	r0, #0
 80019f2:	6031      	str	r1, [r6, #0]
 80019f4:	602b      	str	r3, [r5, #0]
 80019f6:	b016      	add	sp, #88	@ 0x58
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
 80019fa:	466a      	mov	r2, sp
 80019fc:	f000 f848 	bl	8001a90 <_fstat_r>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	dbec      	blt.n	80019de <__swhatbuf_r+0x12>
 8001a04:	9901      	ldr	r1, [sp, #4]
 8001a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a0e:	4259      	negs	r1, r3
 8001a10:	4159      	adcs	r1, r3
 8001a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a16:	e7eb      	b.n	80019f0 <__swhatbuf_r+0x24>

08001a18 <__smakebuf_r>:
 8001a18:	898b      	ldrh	r3, [r1, #12]
 8001a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a1c:	079d      	lsls	r5, r3, #30
 8001a1e:	4606      	mov	r6, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	d507      	bpl.n	8001a34 <__smakebuf_r+0x1c>
 8001a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	6123      	str	r3, [r4, #16]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	6163      	str	r3, [r4, #20]
 8001a30:	b003      	add	sp, #12
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a34:	ab01      	add	r3, sp, #4
 8001a36:	466a      	mov	r2, sp
 8001a38:	f7ff ffc8 	bl	80019cc <__swhatbuf_r>
 8001a3c:	9f00      	ldr	r7, [sp, #0]
 8001a3e:	4605      	mov	r5, r0
 8001a40:	4639      	mov	r1, r7
 8001a42:	4630      	mov	r0, r6
 8001a44:	f7ff f86c 	bl	8000b20 <_malloc_r>
 8001a48:	b948      	cbnz	r0, 8001a5e <__smakebuf_r+0x46>
 8001a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a4e:	059a      	lsls	r2, r3, #22
 8001a50:	d4ee      	bmi.n	8001a30 <__smakebuf_r+0x18>
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	81a3      	strh	r3, [r4, #12]
 8001a5c:	e7e2      	b.n	8001a24 <__smakebuf_r+0xc>
 8001a5e:	89a3      	ldrh	r3, [r4, #12]
 8001a60:	6020      	str	r0, [r4, #0]
 8001a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a66:	81a3      	strh	r3, [r4, #12]
 8001a68:	9b01      	ldr	r3, [sp, #4]
 8001a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001a6e:	b15b      	cbz	r3, 8001a88 <__smakebuf_r+0x70>
 8001a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a74:	4630      	mov	r0, r6
 8001a76:	f000 f81d 	bl	8001ab4 <_isatty_r>
 8001a7a:	b128      	cbz	r0, 8001a88 <__smakebuf_r+0x70>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	81a3      	strh	r3, [r4, #12]
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	431d      	orrs	r5, r3
 8001a8c:	81a5      	strh	r5, [r4, #12]
 8001a8e:	e7cf      	b.n	8001a30 <__smakebuf_r+0x18>

08001a90 <_fstat_r>:
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	4d07      	ldr	r5, [pc, #28]	@ (8001ab0 <_fstat_r+0x20>)
 8001a94:	2300      	movs	r3, #0
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	602b      	str	r3, [r5, #0]
 8001a9e:	f7fe feef 	bl	8000880 <_fstat>
 8001aa2:	1c43      	adds	r3, r0, #1
 8001aa4:	d102      	bne.n	8001aac <_fstat_r+0x1c>
 8001aa6:	682b      	ldr	r3, [r5, #0]
 8001aa8:	b103      	cbz	r3, 8001aac <_fstat_r+0x1c>
 8001aaa:	6023      	str	r3, [r4, #0]
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
 8001aae:	bf00      	nop
 8001ab0:	200001c0 	.word	0x200001c0

08001ab4 <_isatty_r>:
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	4d06      	ldr	r5, [pc, #24]	@ (8001ad0 <_isatty_r+0x1c>)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	602b      	str	r3, [r5, #0]
 8001ac0:	f7fe feee 	bl	80008a0 <_isatty>
 8001ac4:	1c43      	adds	r3, r0, #1
 8001ac6:	d102      	bne.n	8001ace <_isatty_r+0x1a>
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	b103      	cbz	r3, 8001ace <_isatty_r+0x1a>
 8001acc:	6023      	str	r3, [r4, #0]
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	200001c0 	.word	0x200001c0

08001ad4 <abort>:
 8001ad4:	b508      	push	{r3, lr}
 8001ad6:	2006      	movs	r0, #6
 8001ad8:	f000 f82c 	bl	8001b34 <raise>
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7fe fe7f 	bl	80007e0 <_exit>

08001ae2 <_raise_r>:
 8001ae2:	291f      	cmp	r1, #31
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	4605      	mov	r5, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	d904      	bls.n	8001af6 <_raise_r+0x14>
 8001aec:	2316      	movs	r3, #22
 8001aee:	6003      	str	r3, [r0, #0]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
 8001af6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001af8:	b112      	cbz	r2, 8001b00 <_raise_r+0x1e>
 8001afa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001afe:	b94b      	cbnz	r3, 8001b14 <_raise_r+0x32>
 8001b00:	4628      	mov	r0, r5
 8001b02:	f000 f831 	bl	8001b68 <_getpid_r>
 8001b06:	4622      	mov	r2, r4
 8001b08:	4601      	mov	r1, r0
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b10:	f000 b818 	b.w	8001b44 <_kill_r>
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d00a      	beq.n	8001b2e <_raise_r+0x4c>
 8001b18:	1c59      	adds	r1, r3, #1
 8001b1a:	d103      	bne.n	8001b24 <_raise_r+0x42>
 8001b1c:	2316      	movs	r3, #22
 8001b1e:	6003      	str	r3, [r0, #0]
 8001b20:	2001      	movs	r0, #1
 8001b22:	e7e7      	b.n	8001af4 <_raise_r+0x12>
 8001b24:	2100      	movs	r1, #0
 8001b26:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4798      	blx	r3
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7e0      	b.n	8001af4 <_raise_r+0x12>
	...

08001b34 <raise>:
 8001b34:	4b02      	ldr	r3, [pc, #8]	@ (8001b40 <raise+0xc>)
 8001b36:	4601      	mov	r1, r0
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f7ff bfd2 	b.w	8001ae2 <_raise_r>
 8001b3e:	bf00      	nop
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <_kill_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4d07      	ldr	r5, [pc, #28]	@ (8001b64 <_kill_r+0x20>)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	602b      	str	r3, [r5, #0]
 8001b52:	f7fe fe35 	bl	80007c0 <_kill>
 8001b56:	1c43      	adds	r3, r0, #1
 8001b58:	d102      	bne.n	8001b60 <_kill_r+0x1c>
 8001b5a:	682b      	ldr	r3, [r5, #0]
 8001b5c:	b103      	cbz	r3, 8001b60 <_kill_r+0x1c>
 8001b5e:	6023      	str	r3, [r4, #0]
 8001b60:	bd38      	pop	{r3, r4, r5, pc}
 8001b62:	bf00      	nop
 8001b64:	200001c0 	.word	0x200001c0

08001b68 <_getpid_r>:
 8001b68:	f7fe be22 	b.w	80007b0 <_getpid>

08001b6c <_init>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr

08001b78 <_fini>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr
