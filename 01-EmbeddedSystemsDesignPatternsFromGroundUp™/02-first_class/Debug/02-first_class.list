
02-first_class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001658  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08001828  08001828  00002828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001980  08001980  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001980  08001980  00002980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001988  08001988  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001988  08001988  00002988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800198c  0800198c  0000298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001990  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  080019ec  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080019ec  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012f2  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000676  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  000049f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011d  00000000  00000000  00004b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abc0  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023b3  00000000  00000000  0001f875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000911ad  00000000  00000000  00021c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d40  00000000  00000000  000b2e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000b3b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001810 	.word	0x08001810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001810 	.word	0x08001810

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <createDevice>:
	deviceID_T uuid;
};

uint32_t noOfdevices = 0;

DevicePtr createDevice(const char * name, const Address* address) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]

	DevicePtr device = calloc(sizeof(DevicePtr), sizeof(DevicePtr));
 80002ba:	2104      	movs	r1, #4
 80002bc:	2004      	movs	r0, #4
 80002be:	f000 fafd 	bl	80008bc <calloc>
 80002c2:	4603      	mov	r3, r0
 80002c4:	60fb      	str	r3, [r7, #12]

	if(device){
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d078      	beq.n	80003be <createDevice+0x10e>
		device->name = name;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	601a      	str	r2, [r3, #0]
		noOfdevices++;
 80002d2:	4b3f      	ldr	r3, [pc, #252]	@ (80003d0 <createDevice+0x120>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	4a3d      	ldr	r2, [pc, #244]	@ (80003d0 <createDevice+0x120>)
 80002da:	6013      	str	r3, [r2, #0]
		device->address.Port = address->Port;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	605a      	str	r2, [r3, #4]
		device->address.Pin  = address->Pin;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	609a      	str	r2, [r3, #8]
		device->uuid = noOfdevices;
 80002ec:	4b38      	ldr	r3, [pc, #224]	@ (80003d0 <createDevice+0x120>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	60da      	str	r2, [r3, #12]

		/*Enable clock access to device port*/
		switch((int)device->address.Port){
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a36      	ldr	r2, [pc, #216]	@ (80003d4 <createDevice+0x124>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d058      	beq.n	80003b0 <createDevice+0x100>
 80002fe:	4a35      	ldr	r2, [pc, #212]	@ (80003d4 <createDevice+0x124>)
 8000300:	4293      	cmp	r3, r2
 8000302:	dc5f      	bgt.n	80003c4 <createDevice+0x114>
 8000304:	4a34      	ldr	r2, [pc, #208]	@ (80003d8 <createDevice+0x128>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d04b      	beq.n	80003a2 <createDevice+0xf2>
 800030a:	4a33      	ldr	r2, [pc, #204]	@ (80003d8 <createDevice+0x128>)
 800030c:	4293      	cmp	r3, r2
 800030e:	dc59      	bgt.n	80003c4 <createDevice+0x114>
 8000310:	4a32      	ldr	r2, [pc, #200]	@ (80003dc <createDevice+0x12c>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d03e      	beq.n	8000394 <createDevice+0xe4>
 8000316:	4a31      	ldr	r2, [pc, #196]	@ (80003dc <createDevice+0x12c>)
 8000318:	4293      	cmp	r3, r2
 800031a:	dc53      	bgt.n	80003c4 <createDevice+0x114>
 800031c:	4a30      	ldr	r2, [pc, #192]	@ (80003e0 <createDevice+0x130>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d031      	beq.n	8000386 <createDevice+0xd6>
 8000322:	4a2f      	ldr	r2, [pc, #188]	@ (80003e0 <createDevice+0x130>)
 8000324:	4293      	cmp	r3, r2
 8000326:	dc4d      	bgt.n	80003c4 <createDevice+0x114>
 8000328:	4a2e      	ldr	r2, [pc, #184]	@ (80003e4 <createDevice+0x134>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d024      	beq.n	8000378 <createDevice+0xc8>
 800032e:	4a2d      	ldr	r2, [pc, #180]	@ (80003e4 <createDevice+0x134>)
 8000330:	4293      	cmp	r3, r2
 8000332:	dc47      	bgt.n	80003c4 <createDevice+0x114>
 8000334:	4a2c      	ldr	r2, [pc, #176]	@ (80003e8 <createDevice+0x138>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d017      	beq.n	800036a <createDevice+0xba>
 800033a:	4a2b      	ldr	r2, [pc, #172]	@ (80003e8 <createDevice+0x138>)
 800033c:	4293      	cmp	r3, r2
 800033e:	dc41      	bgt.n	80003c4 <createDevice+0x114>
 8000340:	4a2a      	ldr	r2, [pc, #168]	@ (80003ec <createDevice+0x13c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d003      	beq.n	800034e <createDevice+0x9e>
 8000346:	4a2a      	ldr	r2, [pc, #168]	@ (80003f0 <createDevice+0x140>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d007      	beq.n	800035c <createDevice+0xac>
 800034c:	e03a      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOA : RCC_AHB1ENR |= GPIOA_EN; break;
 800034e:	4b29      	ldr	r3, [pc, #164]	@ (80003f4 <createDevice+0x144>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a28      	ldr	r2, [pc, #160]	@ (80003f4 <createDevice+0x144>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	e033      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOB : RCC_AHB1ENR |= GPIOB_EN; break;
 800035c:	4b25      	ldr	r3, [pc, #148]	@ (80003f4 <createDevice+0x144>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a24      	ldr	r2, [pc, #144]	@ (80003f4 <createDevice+0x144>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	6013      	str	r3, [r2, #0]
 8000368:	e02c      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOC : RCC_AHB1ENR |= GPIOC_EN; break;
 800036a:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <createDevice+0x144>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a21      	ldr	r2, [pc, #132]	@ (80003f4 <createDevice+0x144>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6013      	str	r3, [r2, #0]
 8000376:	e025      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOD : RCC_AHB1ENR |= GPIOD_EN; break;
 8000378:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <createDevice+0x144>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1d      	ldr	r2, [pc, #116]	@ (80003f4 <createDevice+0x144>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	e01e      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOE : RCC_AHB1ENR |= GPIOE_EN; break;
 8000386:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <createDevice+0x144>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a1a      	ldr	r2, [pc, #104]	@ (80003f4 <createDevice+0x144>)
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	e017      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOF : RCC_AHB1ENR |= GPIOF_EN; break;
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <createDevice+0x144>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <createDevice+0x144>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	e010      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOG : RCC_AHB1ENR |= GPIOG_EN; break;
 80003a2:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <createDevice+0x144>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a13      	ldr	r2, [pc, #76]	@ (80003f4 <createDevice+0x144>)
 80003a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ac:	6013      	str	r3, [r2, #0]
 80003ae:	e009      	b.n	80003c4 <createDevice+0x114>
			case (int)GPIOH : RCC_AHB1ENR |= GPIOH_EN; break;
 80003b0:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <createDevice+0x144>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0f      	ldr	r2, [pc, #60]	@ (80003f4 <createDevice+0x144>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ba:	6013      	str	r3, [r2, #0]
 80003bc:	e002      	b.n	80003c4 <createDevice+0x114>

		}
	}
	else{
		printf("Low memory,cannot create device\r\n");
 80003be:	480e      	ldr	r0, [pc, #56]	@ (80003f8 <createDevice+0x148>)
 80003c0:	f000 fc70 	bl	8000ca4 <puts>
	}

	return device;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000078 	.word	0x20000078
 80003d4:	40021c00 	.word	0x40021c00
 80003d8:	40021800 	.word	0x40021800
 80003dc:	40021400 	.word	0x40021400
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40020c00 	.word	0x40020c00
 80003e8:	40020800 	.word	0x40020800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40020400 	.word	0x40020400
 80003f4:	40023830 	.word	0x40023830
 80003f8:	08001828 	.word	0x08001828

080003fc <turnOnDevice>:

void turnOnDevice(DevicePtr device){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]

	/*1. configure device as an output device*/
	uint16_t _pin = device->address.Pin;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	81fb      	strh	r3, [r7, #14]
	device->address.Port->MODER |= (1U<<(_pin*2));
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	2201      	movs	r2, #1
 8000416:	409a      	lsls	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	430a      	orrs	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
	device->address.Port->MODER |= (0U<<((_pin*2)+1));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	6812      	ldr	r2, [r2, #0]
 800042a:	601a      	str	r2, [r3, #0]

	/*2. Turn on device*/
	device->address.Port->ODR |= (1U<<_pin);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	6959      	ldr	r1, [r3, #20]
 8000432:	89fb      	ldrh	r3, [r7, #14]
 8000434:	2201      	movs	r2, #1
 8000436:	409a      	lsls	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
	printf(" %s is on \n\r",device->name);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	4803      	ldr	r0, [pc, #12]	@ (8000454 <turnOnDevice+0x58>)
 8000448:	f000 fbc4 	bl	8000bd4 <iprintf>
}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	0800184c 	.word	0x0800184c

08000458 <turnOffDevice>:

void turnOffDevice(DevicePtr device){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	uint16_t _pin = device->address.Pin;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	81fb      	strh	r3, [r7, #14]

	/*1. Turn off device*/
	device->address.Port->ODR &= ~(1U<<_pin);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	6959      	ldr	r1, [r3, #20]
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	2201      	movs	r2, #1
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	43da      	mvns	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	400a      	ands	r2, r1
 800047c:	615a      	str	r2, [r3, #20]
	printf(" %s is off \n\r",device->name);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4619      	mov	r1, r3
 8000484:	4803      	ldr	r0, [pc, #12]	@ (8000494 <turnOffDevice+0x3c>)
 8000486:	f000 fba5 	bl	8000bd4 <iprintf>

}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	0800185c 	.word	0x0800185c

08000498 <readDevice>:
	/*1. Toggle device*/
	device->address.Port->ODR ^=(1U<<_pin);
	printf(" %s is toggled \n\r",device->name);
}

State_T readDevice(DevicePtr device){
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]

	State_T bitStatus;

	/*1. configure device as an input device*/
	uint16_t _pin = device->address.Pin;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	81bb      	strh	r3, [r7, #12]
	device->address.Port->MODER |= (0U<<(_pin*2));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	601a      	str	r2, [r3, #0]
	device->address.Port->MODER |= (0U<<((_pin*2)+1));
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685a      	ldr	r2, [r3, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	6812      	ldr	r2, [r2, #0]
 80004bc:	601a      	str	r2, [r3, #0]

	/*2. Read device*/
	if(device->address.Port->IDR & (1U<<_pin)){
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	691a      	ldr	r2, [r3, #16]
 80004c4:	89bb      	ldrh	r3, [r7, #12]
 80004c6:	2101      	movs	r1, #1
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	4013      	ands	r3, r2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d002      	beq.n	80004d8 <readDevice+0x40>
		bitStatus = 1;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	e001      	b.n	80004dc <readDevice+0x44>
	}else{
		bitStatus = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]
	}

	return bitStatus;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <displayDeviceInfo>:

	printf("*** %s destroyed***\n\r",device->name);
	free(device);
}

void displayDeviceInfo(DevicePtr device){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	const char* type;
	uint32_t _pin = device->address.Pin;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	60bb      	str	r3, [r7, #8]

	if((device->address.Port->MODER & (1U<<(2*_pin))) != 0){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	4013      	ands	r3, r2
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <displayDeviceInfo+0x2a>
		type = "Output device";
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <displayDeviceInfo+0x64>)
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e001      	b.n	800051a <displayDeviceInfo+0x2e>
	}else{
		type = "Input device";
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <displayDeviceInfo+0x68>)
 8000518:	60fb      	str	r3, [r7, #12]
	}

	printf("**************************************\n\r");
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <displayDeviceInfo+0x6c>)
 800051c:	f000 fb5a 	bl	8000bd4 <iprintf>

	printf("Device name : %s\n\r",device->name);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	480d      	ldr	r0, [pc, #52]	@ (800055c <displayDeviceInfo+0x70>)
 8000528:	f000 fb54 	bl	8000bd4 <iprintf>
	printf("Device type: %s\n\r",type);
 800052c:	68f9      	ldr	r1, [r7, #12]
 800052e:	480c      	ldr	r0, [pc, #48]	@ (8000560 <displayDeviceInfo+0x74>)
 8000530:	f000 fb50 	bl	8000bd4 <iprintf>
	printf("The device uuid is %d\n\r",device->uuid);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4619      	mov	r1, r3
 800053a:	480a      	ldr	r0, [pc, #40]	@ (8000564 <displayDeviceInfo+0x78>)
 800053c:	f000 fb4a 	bl	8000bd4 <iprintf>

	printf("**************************************\n\r");
 8000540:	4805      	ldr	r0, [pc, #20]	@ (8000558 <displayDeviceInfo+0x6c>)
 8000542:	f000 fb47 	bl	8000bd4 <iprintf>

}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08001898 	.word	0x08001898
 8000554:	080018a8 	.word	0x080018a8
 8000558:	080018b8 	.word	0x080018b8
 800055c:	080018e4 	.word	0x080018e4
 8000560:	080018f8 	.word	0x080018f8
 8000564:	0800190c 	.word	0x0800190c

08000568 <main>:
#include "device.h"

State_T btn;

int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0


	debug_uart_init();
 800056e:	f000 f8f1 	bl	8000754 <debug_uart_init>

	DevicePtr device1;
	DevicePtr device2;

	const char* name1 = "Front LED";
 8000572:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <main+0x78>)
 8000574:	61fb      	str	r3, [r7, #28]
	Address addr1 = {GPIOA, 5};
 8000576:	4a1b      	ldr	r2, [pc, #108]	@ (80005e4 <main+0x7c>)
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	e883 0003 	stmia.w	r3, {r0, r1}

	const char* name2 = "Push Button";
 8000584:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <main+0x80>)
 8000586:	61bb      	str	r3, [r7, #24]
	Address addr2 = {GPIOC, 13};
 8000588:	4a18      	ldr	r2, [pc, #96]	@ (80005ec <main+0x84>)
 800058a:	463b      	mov	r3, r7
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}

	device1 = createDevice(name1, &addr1);
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4619      	mov	r1, r3
 800059a:	69f8      	ldr	r0, [r7, #28]
 800059c:	f7ff fe88 	bl	80002b0 <createDevice>
 80005a0:	6178      	str	r0, [r7, #20]
	device2 = createDevice(name2, &addr2);
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	69b8      	ldr	r0, [r7, #24]
 80005a8:	f7ff fe82 	bl	80002b0 <createDevice>
 80005ac:	6138      	str	r0, [r7, #16]

	turnOnDevice(device1);
 80005ae:	6978      	ldr	r0, [r7, #20]
 80005b0:	f7ff ff24 	bl	80003fc <turnOnDevice>
	displayDeviceInfo(device1);
 80005b4:	6978      	ldr	r0, [r7, #20]
 80005b6:	f7ff ff99 	bl	80004ec <displayDeviceInfo>

    while(1)
    {
    	btn = readDevice(device2);
 80005ba:	6938      	ldr	r0, [r7, #16]
 80005bc:	f7ff ff6c 	bl	8000498 <readDevice>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <main+0x88>)
 80005c6:	701a      	strb	r2, [r3, #0]

    	if(btn){
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <main+0x88>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <main+0x70>
    		turnOffDevice(device1);
 80005d0:	6978      	ldr	r0, [r7, #20]
 80005d2:	f7ff ff41 	bl	8000458 <turnOffDevice>
 80005d6:	e7f0      	b.n	80005ba <main+0x52>
    	}
    	else{
    		turnOnDevice(device1);
 80005d8:	6978      	ldr	r0, [r7, #20]
 80005da:	f7ff ff0f 	bl	80003fc <turnOnDevice>
    	btn = readDevice(device2);
 80005de:	e7ec      	b.n	80005ba <main+0x52>
 80005e0:	08001924 	.word	0x08001924
 80005e4:	0800193c 	.word	0x0800193c
 80005e8:	08001930 	.word	0x08001930
 80005ec:	08001944 	.word	0x08001944
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e00a      	b.n	800061c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000606:	f3af 8000 	nop.w
 800060a:	4601      	mov	r1, r0
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	b2ca      	uxtb	r2, r1
 8000614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf0      	blt.n	8000606 <_read+0x12>
  }

  return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f877 	bl	800073c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x12>
  }
  return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_close>:

int _close(int file)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800068e:	605a      	str	r2, [r3, #4]
  return 0;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <_isatty>:

int _isatty(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d8:	4a14      	ldr	r2, [pc, #80]	@ (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000700:	f000 fc0e 	bl	8000f20 <__errno>
 8000704:	4603      	mov	r3, r0
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20020000 	.word	0x20020000
 8000730:	00000400 	.word	0x00000400
 8000734:	20000080 	.word	0x20000080
 8000738:	200001d0 	.word	0x200001d0

0800073c <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f84f 	bl	80007e8 <uart_write>
	return ch;
 800074a:	687b      	ldr	r3, [r7, #4]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <debug_uart_init>:

void debug_uart_init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <debug_uart_init+0x84>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a1e      	ldr	r2, [pc, #120]	@ (80007d8 <debug_uart_init+0x84>)
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <debug_uart_init+0x88>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <debug_uart_init+0x88>)
 800076a:	f023 0310 	bic.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <debug_uart_init+0x88>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <debug_uart_init+0x88>)
 8000776:	f043 0320 	orr.w	r3, r3, #32
 800077a:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <debug_uart_init+0x88>)
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <debug_uart_init+0x88>)
 8000782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000786:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <debug_uart_init+0x88>)
 800078a:	6a1b      	ldr	r3, [r3, #32]
 800078c:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <debug_uart_init+0x88>)
 800078e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000792:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <debug_uart_init+0x88>)
 8000796:	6a1b      	ldr	r3, [r3, #32]
 8000798:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <debug_uart_init+0x88>)
 800079a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800079e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <debug_uart_init+0x88>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <debug_uart_init+0x88>)
 80007a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80007aa:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <debug_uart_init+0x84>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a09      	ldr	r2, [pc, #36]	@ (80007d8 <debug_uart_init+0x84>)
 80007b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 80007b8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <debug_uart_init+0x8c>)
 80007be:	f000 f83f 	bl	8000840 <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <debug_uart_init+0x90>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <debug_uart_init+0x90>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <debug_uart_init+0x90>)
 80007ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	00f42400 	.word	0x00f42400
 80007e4:	40004400 	.word	0x40004400

080007e8 <uart_write>:

static void uart_write(int ch)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 80007f0:	bf00      	nop
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <uart_write+0x2c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <uart_write+0x2c>)
 8000802:	b2db      	uxtb	r3, r3
 8000804:	6053      	str	r3, [r2, #4]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400

08000818 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	085a      	lsrs	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	441a      	add	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000830:	b29b      	uxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 800084a:	6839      	ldr	r1, [r7, #0]
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffe3 	bl	8000818 <compute_uart_bd>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <uart_set_baudrate+0x24>)
 8000858:	609a      	str	r2, [r3, #8]
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400

08000868 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800086a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopForever+0xe>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopForever+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000896:	f000 fb49 	bl	8000f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fe65 	bl	8000568 <main>

0800089e <LoopForever>:

LoopForever:
  b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   r0, =_estack
 80008a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008ac:	08001990 	.word	0x08001990
  ldr r2, =_sbss
 80008b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008b4:	200001d0 	.word	0x200001d0

080008b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <calloc>:
 80008bc:	4b02      	ldr	r3, [pc, #8]	@ (80008c8 <calloc+0xc>)
 80008be:	460a      	mov	r2, r1
 80008c0:	4601      	mov	r1, r0
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	f000 b802 	b.w	80008cc <_calloc_r>
 80008c8:	2000000c 	.word	0x2000000c

080008cc <_calloc_r>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	fba1 5402 	umull	r5, r4, r1, r2
 80008d2:	b93c      	cbnz	r4, 80008e4 <_calloc_r+0x18>
 80008d4:	4629      	mov	r1, r5
 80008d6:	f000 f82f 	bl	8000938 <_malloc_r>
 80008da:	4606      	mov	r6, r0
 80008dc:	b928      	cbnz	r0, 80008ea <_calloc_r+0x1e>
 80008de:	2600      	movs	r6, #0
 80008e0:	4630      	mov	r0, r6
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	220c      	movs	r2, #12
 80008e6:	6002      	str	r2, [r0, #0]
 80008e8:	e7f9      	b.n	80008de <_calloc_r+0x12>
 80008ea:	462a      	mov	r2, r5
 80008ec:	4621      	mov	r1, r4
 80008ee:	f000 fab9 	bl	8000e64 <memset>
 80008f2:	e7f5      	b.n	80008e0 <_calloc_r+0x14>

080008f4 <sbrk_aligned>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4e0f      	ldr	r6, [pc, #60]	@ (8000934 <sbrk_aligned+0x40>)
 80008f8:	460c      	mov	r4, r1
 80008fa:	6831      	ldr	r1, [r6, #0]
 80008fc:	4605      	mov	r5, r0
 80008fe:	b911      	cbnz	r1, 8000906 <sbrk_aligned+0x12>
 8000900:	f000 faec 	bl	8000edc <_sbrk_r>
 8000904:	6030      	str	r0, [r6, #0]
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 fae7 	bl	8000edc <_sbrk_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	d103      	bne.n	800091a <sbrk_aligned+0x26>
 8000912:	f04f 34ff 	mov.w	r4, #4294967295
 8000916:	4620      	mov	r0, r4
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	1cc4      	adds	r4, r0, #3
 800091c:	f024 0403 	bic.w	r4, r4, #3
 8000920:	42a0      	cmp	r0, r4
 8000922:	d0f8      	beq.n	8000916 <sbrk_aligned+0x22>
 8000924:	1a21      	subs	r1, r4, r0
 8000926:	4628      	mov	r0, r5
 8000928:	f000 fad8 	bl	8000edc <_sbrk_r>
 800092c:	3001      	adds	r0, #1
 800092e:	d1f2      	bne.n	8000916 <sbrk_aligned+0x22>
 8000930:	e7ef      	b.n	8000912 <sbrk_aligned+0x1e>
 8000932:	bf00      	nop
 8000934:	20000084 	.word	0x20000084

08000938 <_malloc_r>:
 8000938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800093c:	1ccd      	adds	r5, r1, #3
 800093e:	f025 0503 	bic.w	r5, r5, #3
 8000942:	3508      	adds	r5, #8
 8000944:	2d0c      	cmp	r5, #12
 8000946:	bf38      	it	cc
 8000948:	250c      	movcc	r5, #12
 800094a:	2d00      	cmp	r5, #0
 800094c:	4606      	mov	r6, r0
 800094e:	db01      	blt.n	8000954 <_malloc_r+0x1c>
 8000950:	42a9      	cmp	r1, r5
 8000952:	d904      	bls.n	800095e <_malloc_r+0x26>
 8000954:	230c      	movs	r3, #12
 8000956:	6033      	str	r3, [r6, #0]
 8000958:	2000      	movs	r0, #0
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a34 <_malloc_r+0xfc>
 8000962:	f000 f869 	bl	8000a38 <__malloc_lock>
 8000966:	f8d8 3000 	ldr.w	r3, [r8]
 800096a:	461c      	mov	r4, r3
 800096c:	bb44      	cbnz	r4, 80009c0 <_malloc_r+0x88>
 800096e:	4629      	mov	r1, r5
 8000970:	4630      	mov	r0, r6
 8000972:	f7ff ffbf 	bl	80008f4 <sbrk_aligned>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	4604      	mov	r4, r0
 800097a:	d158      	bne.n	8000a2e <_malloc_r+0xf6>
 800097c:	f8d8 4000 	ldr.w	r4, [r8]
 8000980:	4627      	mov	r7, r4
 8000982:	2f00      	cmp	r7, #0
 8000984:	d143      	bne.n	8000a0e <_malloc_r+0xd6>
 8000986:	2c00      	cmp	r4, #0
 8000988:	d04b      	beq.n	8000a22 <_malloc_r+0xea>
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	4639      	mov	r1, r7
 800098e:	4630      	mov	r0, r6
 8000990:	eb04 0903 	add.w	r9, r4, r3
 8000994:	f000 faa2 	bl	8000edc <_sbrk_r>
 8000998:	4581      	cmp	r9, r0
 800099a:	d142      	bne.n	8000a22 <_malloc_r+0xea>
 800099c:	6821      	ldr	r1, [r4, #0]
 800099e:	1a6d      	subs	r5, r5, r1
 80009a0:	4629      	mov	r1, r5
 80009a2:	4630      	mov	r0, r6
 80009a4:	f7ff ffa6 	bl	80008f4 <sbrk_aligned>
 80009a8:	3001      	adds	r0, #1
 80009aa:	d03a      	beq.n	8000a22 <_malloc_r+0xea>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	442b      	add	r3, r5
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	f8d8 3000 	ldr.w	r3, [r8]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	bb62      	cbnz	r2, 8000a14 <_malloc_r+0xdc>
 80009ba:	f8c8 7000 	str.w	r7, [r8]
 80009be:	e00f      	b.n	80009e0 <_malloc_r+0xa8>
 80009c0:	6822      	ldr	r2, [r4, #0]
 80009c2:	1b52      	subs	r2, r2, r5
 80009c4:	d420      	bmi.n	8000a08 <_malloc_r+0xd0>
 80009c6:	2a0b      	cmp	r2, #11
 80009c8:	d917      	bls.n	80009fa <_malloc_r+0xc2>
 80009ca:	1961      	adds	r1, r4, r5
 80009cc:	42a3      	cmp	r3, r4
 80009ce:	6025      	str	r5, [r4, #0]
 80009d0:	bf18      	it	ne
 80009d2:	6059      	strne	r1, [r3, #4]
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	bf08      	it	eq
 80009d8:	f8c8 1000 	streq.w	r1, [r8]
 80009dc:	5162      	str	r2, [r4, r5]
 80009de:	604b      	str	r3, [r1, #4]
 80009e0:	4630      	mov	r0, r6
 80009e2:	f000 f82f 	bl	8000a44 <__malloc_unlock>
 80009e6:	f104 000b 	add.w	r0, r4, #11
 80009ea:	1d23      	adds	r3, r4, #4
 80009ec:	f020 0007 	bic.w	r0, r0, #7
 80009f0:	1ac2      	subs	r2, r0, r3
 80009f2:	bf1c      	itt	ne
 80009f4:	1a1b      	subne	r3, r3, r0
 80009f6:	50a3      	strne	r3, [r4, r2]
 80009f8:	e7af      	b.n	800095a <_malloc_r+0x22>
 80009fa:	6862      	ldr	r2, [r4, #4]
 80009fc:	42a3      	cmp	r3, r4
 80009fe:	bf0c      	ite	eq
 8000a00:	f8c8 2000 	streq.w	r2, [r8]
 8000a04:	605a      	strne	r2, [r3, #4]
 8000a06:	e7eb      	b.n	80009e0 <_malloc_r+0xa8>
 8000a08:	4623      	mov	r3, r4
 8000a0a:	6864      	ldr	r4, [r4, #4]
 8000a0c:	e7ae      	b.n	800096c <_malloc_r+0x34>
 8000a0e:	463c      	mov	r4, r7
 8000a10:	687f      	ldr	r7, [r7, #4]
 8000a12:	e7b6      	b.n	8000982 <_malloc_r+0x4a>
 8000a14:	461a      	mov	r2, r3
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d1fb      	bne.n	8000a14 <_malloc_r+0xdc>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6053      	str	r3, [r2, #4]
 8000a20:	e7de      	b.n	80009e0 <_malloc_r+0xa8>
 8000a22:	230c      	movs	r3, #12
 8000a24:	6033      	str	r3, [r6, #0]
 8000a26:	4630      	mov	r0, r6
 8000a28:	f000 f80c 	bl	8000a44 <__malloc_unlock>
 8000a2c:	e794      	b.n	8000958 <_malloc_r+0x20>
 8000a2e:	6005      	str	r5, [r0, #0]
 8000a30:	e7d6      	b.n	80009e0 <_malloc_r+0xa8>
 8000a32:	bf00      	nop
 8000a34:	20000088 	.word	0x20000088

08000a38 <__malloc_lock>:
 8000a38:	4801      	ldr	r0, [pc, #4]	@ (8000a40 <__malloc_lock+0x8>)
 8000a3a:	f000 ba9c 	b.w	8000f76 <__retarget_lock_acquire_recursive>
 8000a3e:	bf00      	nop
 8000a40:	200001cc 	.word	0x200001cc

08000a44 <__malloc_unlock>:
 8000a44:	4801      	ldr	r0, [pc, #4]	@ (8000a4c <__malloc_unlock+0x8>)
 8000a46:	f000 ba97 	b.w	8000f78 <__retarget_lock_release_recursive>
 8000a4a:	bf00      	nop
 8000a4c:	200001cc 	.word	0x200001cc

08000a50 <std>:
 8000a50:	2300      	movs	r3, #0
 8000a52:	b510      	push	{r4, lr}
 8000a54:	4604      	mov	r4, r0
 8000a56:	e9c0 3300 	strd	r3, r3, [r0]
 8000a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a5e:	6083      	str	r3, [r0, #8]
 8000a60:	8181      	strh	r1, [r0, #12]
 8000a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8000a64:	81c2      	strh	r2, [r0, #14]
 8000a66:	6183      	str	r3, [r0, #24]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	305c      	adds	r0, #92	@ 0x5c
 8000a6e:	f000 f9f9 	bl	8000e64 <memset>
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <std+0x58>)
 8000a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <std+0x5c>)
 8000a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <std+0x60>)
 8000a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <std+0x64>)
 8000a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <std+0x68>)
 8000a84:	6224      	str	r4, [r4, #32]
 8000a86:	429c      	cmp	r4, r3
 8000a88:	d006      	beq.n	8000a98 <std+0x48>
 8000a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a8e:	4294      	cmp	r4, r2
 8000a90:	d002      	beq.n	8000a98 <std+0x48>
 8000a92:	33d0      	adds	r3, #208	@ 0xd0
 8000a94:	429c      	cmp	r4, r3
 8000a96:	d105      	bne.n	8000aa4 <std+0x54>
 8000a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa0:	f000 ba68 	b.w	8000f74 <__retarget_lock_init_recursive>
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08000cb5 	.word	0x08000cb5
 8000aac:	08000cd7 	.word	0x08000cd7
 8000ab0:	08000d0f 	.word	0x08000d0f
 8000ab4:	08000d33 	.word	0x08000d33
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <stdio_exit_handler>:
 8000abc:	4a02      	ldr	r2, [pc, #8]	@ (8000ac8 <stdio_exit_handler+0xc>)
 8000abe:	4903      	ldr	r1, [pc, #12]	@ (8000acc <stdio_exit_handler+0x10>)
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <stdio_exit_handler+0x14>)
 8000ac2:	f000 b869 	b.w	8000b98 <_fwalk_sglue>
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	080016b9 	.word	0x080016b9
 8000ad0:	20000010 	.word	0x20000010

08000ad4 <cleanup_stdio>:
 8000ad4:	6841      	ldr	r1, [r0, #4]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <cleanup_stdio+0x34>)
 8000ad8:	4299      	cmp	r1, r3
 8000ada:	b510      	push	{r4, lr}
 8000adc:	4604      	mov	r4, r0
 8000ade:	d001      	beq.n	8000ae4 <cleanup_stdio+0x10>
 8000ae0:	f000 fdea 	bl	80016b8 <_fflush_r>
 8000ae4:	68a1      	ldr	r1, [r4, #8]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <cleanup_stdio+0x38>)
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d002      	beq.n	8000af2 <cleanup_stdio+0x1e>
 8000aec:	4620      	mov	r0, r4
 8000aee:	f000 fde3 	bl	80016b8 <_fflush_r>
 8000af2:	68e1      	ldr	r1, [r4, #12]
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <cleanup_stdio+0x3c>)
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d004      	beq.n	8000b04 <cleanup_stdio+0x30>
 8000afa:	4620      	mov	r0, r4
 8000afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b00:	f000 bdda 	b.w	80016b8 <_fflush_r>
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	bf00      	nop
 8000b08:	2000008c 	.word	0x2000008c
 8000b0c:	200000f4 	.word	0x200000f4
 8000b10:	2000015c 	.word	0x2000015c

08000b14 <global_stdio_init.part.0>:
 8000b14:	b510      	push	{r4, lr}
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <global_stdio_init.part.0+0x30>)
 8000b18:	4c0b      	ldr	r4, [pc, #44]	@ (8000b48 <global_stdio_init.part.0+0x34>)
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <global_stdio_init.part.0+0x38>)
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	4620      	mov	r0, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	2104      	movs	r1, #4
 8000b24:	f7ff ff94 	bl	8000a50 <std>
 8000b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2109      	movs	r1, #9
 8000b30:	f7ff ff8e 	bl	8000a50 <std>
 8000b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000b38:	2202      	movs	r2, #2
 8000b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b3e:	2112      	movs	r1, #18
 8000b40:	f7ff bf86 	b.w	8000a50 <std>
 8000b44:	200001c4 	.word	0x200001c4
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	08000abd 	.word	0x08000abd

08000b50 <__sfp_lock_acquire>:
 8000b50:	4801      	ldr	r0, [pc, #4]	@ (8000b58 <__sfp_lock_acquire+0x8>)
 8000b52:	f000 ba10 	b.w	8000f76 <__retarget_lock_acquire_recursive>
 8000b56:	bf00      	nop
 8000b58:	200001cd 	.word	0x200001cd

08000b5c <__sfp_lock_release>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	@ (8000b64 <__sfp_lock_release+0x8>)
 8000b5e:	f000 ba0b 	b.w	8000f78 <__retarget_lock_release_recursive>
 8000b62:	bf00      	nop
 8000b64:	200001cd 	.word	0x200001cd

08000b68 <__sinit>:
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	f7ff fff0 	bl	8000b50 <__sfp_lock_acquire>
 8000b70:	6a23      	ldr	r3, [r4, #32]
 8000b72:	b11b      	cbz	r3, 8000b7c <__sinit+0x14>
 8000b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b78:	f7ff bff0 	b.w	8000b5c <__sfp_lock_release>
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <__sinit+0x28>)
 8000b7e:	6223      	str	r3, [r4, #32]
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__sinit+0x2c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f5      	bne.n	8000b74 <__sinit+0xc>
 8000b88:	f7ff ffc4 	bl	8000b14 <global_stdio_init.part.0>
 8000b8c:	e7f2      	b.n	8000b74 <__sinit+0xc>
 8000b8e:	bf00      	nop
 8000b90:	08000ad5 	.word	0x08000ad5
 8000b94:	200001c4 	.word	0x200001c4

08000b98 <_fwalk_sglue>:
 8000b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	4607      	mov	r7, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	4614      	mov	r4, r2
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8000bac:	d505      	bpl.n	8000bba <_fwalk_sglue+0x22>
 8000bae:	6824      	ldr	r4, [r4, #0]
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d1f7      	bne.n	8000ba4 <_fwalk_sglue+0xc>
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bba:	89ab      	ldrh	r3, [r5, #12]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d907      	bls.n	8000bd0 <_fwalk_sglue+0x38>
 8000bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	d003      	beq.n	8000bd0 <_fwalk_sglue+0x38>
 8000bc8:	4629      	mov	r1, r5
 8000bca:	4638      	mov	r0, r7
 8000bcc:	47c0      	blx	r8
 8000bce:	4306      	orrs	r6, r0
 8000bd0:	3568      	adds	r5, #104	@ 0x68
 8000bd2:	e7e9      	b.n	8000ba8 <_fwalk_sglue+0x10>

08000bd4 <iprintf>:
 8000bd4:	b40f      	push	{r0, r1, r2, r3}
 8000bd6:	b507      	push	{r0, r1, r2, lr}
 8000bd8:	4906      	ldr	r1, [pc, #24]	@ (8000bf4 <iprintf+0x20>)
 8000bda:	ab04      	add	r3, sp, #16
 8000bdc:	6808      	ldr	r0, [r1, #0]
 8000bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8000be2:	6881      	ldr	r1, [r0, #8]
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	f000 fa3d 	bl	8001064 <_vfiprintf_r>
 8000bea:	b003      	add	sp, #12
 8000bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <_puts_r>:
 8000bf8:	6a03      	ldr	r3, [r0, #32]
 8000bfa:	b570      	push	{r4, r5, r6, lr}
 8000bfc:	6884      	ldr	r4, [r0, #8]
 8000bfe:	4605      	mov	r5, r0
 8000c00:	460e      	mov	r6, r1
 8000c02:	b90b      	cbnz	r3, 8000c08 <_puts_r+0x10>
 8000c04:	f7ff ffb0 	bl	8000b68 <__sinit>
 8000c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c0a:	07db      	lsls	r3, r3, #31
 8000c0c:	d405      	bmi.n	8000c1a <_puts_r+0x22>
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	0598      	lsls	r0, r3, #22
 8000c12:	d402      	bmi.n	8000c1a <_puts_r+0x22>
 8000c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c16:	f000 f9ae 	bl	8000f76 <__retarget_lock_acquire_recursive>
 8000c1a:	89a3      	ldrh	r3, [r4, #12]
 8000c1c:	0719      	lsls	r1, r3, #28
 8000c1e:	d502      	bpl.n	8000c26 <_puts_r+0x2e>
 8000c20:	6923      	ldr	r3, [r4, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d135      	bne.n	8000c92 <_puts_r+0x9a>
 8000c26:	4621      	mov	r1, r4
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f000 f8c5 	bl	8000db8 <__swsetup_r>
 8000c2e:	b380      	cbz	r0, 8000c92 <_puts_r+0x9a>
 8000c30:	f04f 35ff 	mov.w	r5, #4294967295
 8000c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c36:	07da      	lsls	r2, r3, #31
 8000c38:	d405      	bmi.n	8000c46 <_puts_r+0x4e>
 8000c3a:	89a3      	ldrh	r3, [r4, #12]
 8000c3c:	059b      	lsls	r3, r3, #22
 8000c3e:	d402      	bmi.n	8000c46 <_puts_r+0x4e>
 8000c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c42:	f000 f999 	bl	8000f78 <__retarget_lock_release_recursive>
 8000c46:	4628      	mov	r0, r5
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da04      	bge.n	8000c58 <_puts_r+0x60>
 8000c4e:	69a2      	ldr	r2, [r4, #24]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dc17      	bgt.n	8000c84 <_puts_r+0x8c>
 8000c54:	290a      	cmp	r1, #10
 8000c56:	d015      	beq.n	8000c84 <_puts_r+0x8c>
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	6022      	str	r2, [r4, #0]
 8000c5e:	7019      	strb	r1, [r3, #0]
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60a3      	str	r3, [r4, #8]
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d1ed      	bne.n	8000c4a <_puts_r+0x52>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da11      	bge.n	8000c96 <_puts_r+0x9e>
 8000c72:	4622      	mov	r2, r4
 8000c74:	210a      	movs	r1, #10
 8000c76:	4628      	mov	r0, r5
 8000c78:	f000 f85f 	bl	8000d3a <__swbuf_r>
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d0d7      	beq.n	8000c30 <_puts_r+0x38>
 8000c80:	250a      	movs	r5, #10
 8000c82:	e7d7      	b.n	8000c34 <_puts_r+0x3c>
 8000c84:	4622      	mov	r2, r4
 8000c86:	4628      	mov	r0, r5
 8000c88:	f000 f857 	bl	8000d3a <__swbuf_r>
 8000c8c:	3001      	adds	r0, #1
 8000c8e:	d1e7      	bne.n	8000c60 <_puts_r+0x68>
 8000c90:	e7ce      	b.n	8000c30 <_puts_r+0x38>
 8000c92:	3e01      	subs	r6, #1
 8000c94:	e7e4      	b.n	8000c60 <_puts_r+0x68>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	6022      	str	r2, [r4, #0]
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e7ee      	b.n	8000c80 <_puts_r+0x88>
	...

08000ca4 <puts>:
 8000ca4:	4b02      	ldr	r3, [pc, #8]	@ (8000cb0 <puts+0xc>)
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	f7ff bfa5 	b.w	8000bf8 <_puts_r>
 8000cae:	bf00      	nop
 8000cb0:	2000000c 	.word	0x2000000c

08000cb4 <__sread>:
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cbc:	f000 f8fc 	bl	8000eb8 <_read_r>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	bfab      	itete	ge
 8000cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8000cc8:	181b      	addge	r3, r3, r0
 8000cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000cce:	bfac      	ite	ge
 8000cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000cd2:	81a3      	strhlt	r3, [r4, #12]
 8000cd4:	bd10      	pop	{r4, pc}

08000cd6 <__swrite>:
 8000cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cda:	461f      	mov	r7, r3
 8000cdc:	898b      	ldrh	r3, [r1, #12]
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	4616      	mov	r6, r2
 8000ce6:	d505      	bpl.n	8000cf4 <__swrite+0x1e>
 8000ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cec:	2302      	movs	r3, #2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f000 f8d0 	bl	8000e94 <_lseek_r>
 8000cf4:	89a3      	ldrh	r3, [r4, #12]
 8000cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	4632      	mov	r2, r6
 8000d02:	463b      	mov	r3, r7
 8000d04:	4628      	mov	r0, r5
 8000d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d0a:	f000 b8f7 	b.w	8000efc <_write_r>

08000d0e <__sseek>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	460c      	mov	r4, r1
 8000d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d16:	f000 f8bd 	bl	8000e94 <_lseek_r>
 8000d1a:	1c43      	adds	r3, r0, #1
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	bf15      	itete	ne
 8000d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d2a:	81a3      	strheq	r3, [r4, #12]
 8000d2c:	bf18      	it	ne
 8000d2e:	81a3      	strhne	r3, [r4, #12]
 8000d30:	bd10      	pop	{r4, pc}

08000d32 <__sclose>:
 8000d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d36:	f000 b89d 	b.w	8000e74 <_close_r>

08000d3a <__swbuf_r>:
 8000d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3c:	460e      	mov	r6, r1
 8000d3e:	4614      	mov	r4, r2
 8000d40:	4605      	mov	r5, r0
 8000d42:	b118      	cbz	r0, 8000d4c <__swbuf_r+0x12>
 8000d44:	6a03      	ldr	r3, [r0, #32]
 8000d46:	b90b      	cbnz	r3, 8000d4c <__swbuf_r+0x12>
 8000d48:	f7ff ff0e 	bl	8000b68 <__sinit>
 8000d4c:	69a3      	ldr	r3, [r4, #24]
 8000d4e:	60a3      	str	r3, [r4, #8]
 8000d50:	89a3      	ldrh	r3, [r4, #12]
 8000d52:	071a      	lsls	r2, r3, #28
 8000d54:	d501      	bpl.n	8000d5a <__swbuf_r+0x20>
 8000d56:	6923      	ldr	r3, [r4, #16]
 8000d58:	b943      	cbnz	r3, 8000d6c <__swbuf_r+0x32>
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f000 f82b 	bl	8000db8 <__swsetup_r>
 8000d62:	b118      	cbz	r0, 8000d6c <__swbuf_r+0x32>
 8000d64:	f04f 37ff 	mov.w	r7, #4294967295
 8000d68:	4638      	mov	r0, r7
 8000d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	6922      	ldr	r2, [r4, #16]
 8000d70:	1a98      	subs	r0, r3, r2
 8000d72:	6963      	ldr	r3, [r4, #20]
 8000d74:	b2f6      	uxtb	r6, r6
 8000d76:	4283      	cmp	r3, r0
 8000d78:	4637      	mov	r7, r6
 8000d7a:	dc05      	bgt.n	8000d88 <__swbuf_r+0x4e>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f000 fc9a 	bl	80016b8 <_fflush_r>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d1ed      	bne.n	8000d64 <__swbuf_r+0x2a>
 8000d88:	68a3      	ldr	r3, [r4, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	60a3      	str	r3, [r4, #8]
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	6022      	str	r2, [r4, #0]
 8000d94:	701e      	strb	r6, [r3, #0]
 8000d96:	6962      	ldr	r2, [r4, #20]
 8000d98:	1c43      	adds	r3, r0, #1
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__swbuf_r+0x6e>
 8000d9e:	89a3      	ldrh	r3, [r4, #12]
 8000da0:	07db      	lsls	r3, r3, #31
 8000da2:	d5e1      	bpl.n	8000d68 <__swbuf_r+0x2e>
 8000da4:	2e0a      	cmp	r6, #10
 8000da6:	d1df      	bne.n	8000d68 <__swbuf_r+0x2e>
 8000da8:	4621      	mov	r1, r4
 8000daa:	4628      	mov	r0, r5
 8000dac:	f000 fc84 	bl	80016b8 <_fflush_r>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d0d9      	beq.n	8000d68 <__swbuf_r+0x2e>
 8000db4:	e7d6      	b.n	8000d64 <__swbuf_r+0x2a>
	...

08000db8 <__swsetup_r>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <__swsetup_r+0xa8>)
 8000dbc:	4605      	mov	r5, r0
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	b118      	cbz	r0, 8000dcc <__swsetup_r+0x14>
 8000dc4:	6a03      	ldr	r3, [r0, #32]
 8000dc6:	b90b      	cbnz	r3, 8000dcc <__swsetup_r+0x14>
 8000dc8:	f7ff fece 	bl	8000b68 <__sinit>
 8000dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dd0:	0719      	lsls	r1, r3, #28
 8000dd2:	d422      	bmi.n	8000e1a <__swsetup_r+0x62>
 8000dd4:	06da      	lsls	r2, r3, #27
 8000dd6:	d407      	bmi.n	8000de8 <__swsetup_r+0x30>
 8000dd8:	2209      	movs	r2, #9
 8000dda:	602a      	str	r2, [r5, #0]
 8000ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de0:	81a3      	strh	r3, [r4, #12]
 8000de2:	f04f 30ff 	mov.w	r0, #4294967295
 8000de6:	e033      	b.n	8000e50 <__swsetup_r+0x98>
 8000de8:	0758      	lsls	r0, r3, #29
 8000dea:	d512      	bpl.n	8000e12 <__swsetup_r+0x5a>
 8000dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000dee:	b141      	cbz	r1, 8000e02 <__swsetup_r+0x4a>
 8000df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d002      	beq.n	8000dfe <__swsetup_r+0x46>
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f000 f8bf 	bl	8000f7c <_free_r>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e02:	89a3      	ldrh	r3, [r4, #12]
 8000e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e08:	81a3      	strh	r3, [r4, #12]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	6063      	str	r3, [r4, #4]
 8000e0e:	6923      	ldr	r3, [r4, #16]
 8000e10:	6023      	str	r3, [r4, #0]
 8000e12:	89a3      	ldrh	r3, [r4, #12]
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	81a3      	strh	r3, [r4, #12]
 8000e1a:	6923      	ldr	r3, [r4, #16]
 8000e1c:	b94b      	cbnz	r3, 8000e32 <__swsetup_r+0x7a>
 8000e1e:	89a3      	ldrh	r3, [r4, #12]
 8000e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e28:	d003      	beq.n	8000e32 <__swsetup_r+0x7a>
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f000 fc91 	bl	8001754 <__smakebuf_r>
 8000e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e36:	f013 0201 	ands.w	r2, r3, #1
 8000e3a:	d00a      	beq.n	8000e52 <__swsetup_r+0x9a>
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60a2      	str	r2, [r4, #8]
 8000e40:	6962      	ldr	r2, [r4, #20]
 8000e42:	4252      	negs	r2, r2
 8000e44:	61a2      	str	r2, [r4, #24]
 8000e46:	6922      	ldr	r2, [r4, #16]
 8000e48:	b942      	cbnz	r2, 8000e5c <__swsetup_r+0xa4>
 8000e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000e4e:	d1c5      	bne.n	8000ddc <__swsetup_r+0x24>
 8000e50:	bd38      	pop	{r3, r4, r5, pc}
 8000e52:	0799      	lsls	r1, r3, #30
 8000e54:	bf58      	it	pl
 8000e56:	6962      	ldrpl	r2, [r4, #20]
 8000e58:	60a2      	str	r2, [r4, #8]
 8000e5a:	e7f4      	b.n	8000e46 <__swsetup_r+0x8e>
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	e7f7      	b.n	8000e50 <__swsetup_r+0x98>
 8000e60:	2000000c 	.word	0x2000000c

08000e64 <memset>:
 8000e64:	4402      	add	r2, r0
 8000e66:	4603      	mov	r3, r0
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d100      	bne.n	8000e6e <memset+0xa>
 8000e6c:	4770      	bx	lr
 8000e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8000e72:	e7f9      	b.n	8000e68 <memset+0x4>

08000e74 <_close_r>:
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	4d06      	ldr	r5, [pc, #24]	@ (8000e90 <_close_r+0x1c>)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	602b      	str	r3, [r5, #0]
 8000e80:	f7ff fbf1 	bl	8000666 <_close>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	d102      	bne.n	8000e8e <_close_r+0x1a>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	b103      	cbz	r3, 8000e8e <_close_r+0x1a>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
 8000e90:	200001c8 	.word	0x200001c8

08000e94 <_lseek_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4d07      	ldr	r5, [pc, #28]	@ (8000eb4 <_lseek_r+0x20>)
 8000e98:	4604      	mov	r4, r0
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	602a      	str	r2, [r5, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f7ff fc06 	bl	80006b4 <_lseek>
 8000ea8:	1c43      	adds	r3, r0, #1
 8000eaa:	d102      	bne.n	8000eb2 <_lseek_r+0x1e>
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	b103      	cbz	r3, 8000eb2 <_lseek_r+0x1e>
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	bd38      	pop	{r3, r4, r5, pc}
 8000eb4:	200001c8 	.word	0x200001c8

08000eb8 <_read_r>:
 8000eb8:	b538      	push	{r3, r4, r5, lr}
 8000eba:	4d07      	ldr	r5, [pc, #28]	@ (8000ed8 <_read_r+0x20>)
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	602a      	str	r2, [r5, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f7ff fb94 	bl	80005f4 <_read>
 8000ecc:	1c43      	adds	r3, r0, #1
 8000ece:	d102      	bne.n	8000ed6 <_read_r+0x1e>
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	b103      	cbz	r3, 8000ed6 <_read_r+0x1e>
 8000ed4:	6023      	str	r3, [r4, #0]
 8000ed6:	bd38      	pop	{r3, r4, r5, pc}
 8000ed8:	200001c8 	.word	0x200001c8

08000edc <_sbrk_r>:
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4d06      	ldr	r5, [pc, #24]	@ (8000ef8 <_sbrk_r+0x1c>)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	602b      	str	r3, [r5, #0]
 8000ee8:	f7ff fbf2 	bl	80006d0 <_sbrk>
 8000eec:	1c43      	adds	r3, r0, #1
 8000eee:	d102      	bne.n	8000ef6 <_sbrk_r+0x1a>
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	b103      	cbz	r3, 8000ef6 <_sbrk_r+0x1a>
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
 8000ef8:	200001c8 	.word	0x200001c8

08000efc <_write_r>:
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4d07      	ldr	r5, [pc, #28]	@ (8000f1c <_write_r+0x20>)
 8000f00:	4604      	mov	r4, r0
 8000f02:	4608      	mov	r0, r1
 8000f04:	4611      	mov	r1, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	602a      	str	r2, [r5, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f7ff fb8f 	bl	800062e <_write>
 8000f10:	1c43      	adds	r3, r0, #1
 8000f12:	d102      	bne.n	8000f1a <_write_r+0x1e>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	b103      	cbz	r3, 8000f1a <_write_r+0x1e>
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	200001c8 	.word	0x200001c8

08000f20 <__errno>:
 8000f20:	4b01      	ldr	r3, [pc, #4]	@ (8000f28 <__errno+0x8>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000000c 	.word	0x2000000c

08000f2c <__libc_init_array>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8000f64 <__libc_init_array+0x38>)
 8000f30:	4c0d      	ldr	r4, [pc, #52]	@ (8000f68 <__libc_init_array+0x3c>)
 8000f32:	1b64      	subs	r4, r4, r5
 8000f34:	10a4      	asrs	r4, r4, #2
 8000f36:	2600      	movs	r6, #0
 8000f38:	42a6      	cmp	r6, r4
 8000f3a:	d109      	bne.n	8000f50 <__libc_init_array+0x24>
 8000f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8000f6c <__libc_init_array+0x40>)
 8000f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8000f70 <__libc_init_array+0x44>)
 8000f40:	f000 fc66 	bl	8001810 <_init>
 8000f44:	1b64      	subs	r4, r4, r5
 8000f46:	10a4      	asrs	r4, r4, #2
 8000f48:	2600      	movs	r6, #0
 8000f4a:	42a6      	cmp	r6, r4
 8000f4c:	d105      	bne.n	8000f5a <__libc_init_array+0x2e>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f54:	4798      	blx	r3
 8000f56:	3601      	adds	r6, #1
 8000f58:	e7ee      	b.n	8000f38 <__libc_init_array+0xc>
 8000f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f5e:	4798      	blx	r3
 8000f60:	3601      	adds	r6, #1
 8000f62:	e7f2      	b.n	8000f4a <__libc_init_array+0x1e>
 8000f64:	08001988 	.word	0x08001988
 8000f68:	08001988 	.word	0x08001988
 8000f6c:	08001988 	.word	0x08001988
 8000f70:	0800198c 	.word	0x0800198c

08000f74 <__retarget_lock_init_recursive>:
 8000f74:	4770      	bx	lr

08000f76 <__retarget_lock_acquire_recursive>:
 8000f76:	4770      	bx	lr

08000f78 <__retarget_lock_release_recursive>:
 8000f78:	4770      	bx	lr
	...

08000f7c <_free_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4605      	mov	r5, r0
 8000f80:	2900      	cmp	r1, #0
 8000f82:	d041      	beq.n	8001008 <_free_r+0x8c>
 8000f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f88:	1f0c      	subs	r4, r1, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bfb8      	it	lt
 8000f8e:	18e4      	addlt	r4, r4, r3
 8000f90:	f7ff fd52 	bl	8000a38 <__malloc_lock>
 8000f94:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <_free_r+0x90>)
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	b933      	cbnz	r3, 8000fa8 <_free_r+0x2c>
 8000f9a:	6063      	str	r3, [r4, #4]
 8000f9c:	6014      	str	r4, [r2, #0]
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa4:	f7ff bd4e 	b.w	8000a44 <__malloc_unlock>
 8000fa8:	42a3      	cmp	r3, r4
 8000faa:	d908      	bls.n	8000fbe <_free_r+0x42>
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	1821      	adds	r1, r4, r0
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	bf01      	itttt	eq
 8000fb4:	6819      	ldreq	r1, [r3, #0]
 8000fb6:	685b      	ldreq	r3, [r3, #4]
 8000fb8:	1809      	addeq	r1, r1, r0
 8000fba:	6021      	streq	r1, [r4, #0]
 8000fbc:	e7ed      	b.n	8000f9a <_free_r+0x1e>
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	b10b      	cbz	r3, 8000fc8 <_free_r+0x4c>
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d9fa      	bls.n	8000fbe <_free_r+0x42>
 8000fc8:	6811      	ldr	r1, [r2, #0]
 8000fca:	1850      	adds	r0, r2, r1
 8000fcc:	42a0      	cmp	r0, r4
 8000fce:	d10b      	bne.n	8000fe8 <_free_r+0x6c>
 8000fd0:	6820      	ldr	r0, [r4, #0]
 8000fd2:	4401      	add	r1, r0
 8000fd4:	1850      	adds	r0, r2, r1
 8000fd6:	4283      	cmp	r3, r0
 8000fd8:	6011      	str	r1, [r2, #0]
 8000fda:	d1e0      	bne.n	8000f9e <_free_r+0x22>
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	6053      	str	r3, [r2, #4]
 8000fe2:	4408      	add	r0, r1
 8000fe4:	6010      	str	r0, [r2, #0]
 8000fe6:	e7da      	b.n	8000f9e <_free_r+0x22>
 8000fe8:	d902      	bls.n	8000ff0 <_free_r+0x74>
 8000fea:	230c      	movs	r3, #12
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	e7d6      	b.n	8000f9e <_free_r+0x22>
 8000ff0:	6820      	ldr	r0, [r4, #0]
 8000ff2:	1821      	adds	r1, r4, r0
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf04      	itt	eq
 8000ff8:	6819      	ldreq	r1, [r3, #0]
 8000ffa:	685b      	ldreq	r3, [r3, #4]
 8000ffc:	6063      	str	r3, [r4, #4]
 8000ffe:	bf04      	itt	eq
 8001000:	1809      	addeq	r1, r1, r0
 8001002:	6021      	streq	r1, [r4, #0]
 8001004:	6054      	str	r4, [r2, #4]
 8001006:	e7ca      	b.n	8000f9e <_free_r+0x22>
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	bf00      	nop
 800100c:	20000088 	.word	0x20000088

08001010 <__sfputc_r>:
 8001010:	6893      	ldr	r3, [r2, #8]
 8001012:	3b01      	subs	r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	b410      	push	{r4}
 8001018:	6093      	str	r3, [r2, #8]
 800101a:	da08      	bge.n	800102e <__sfputc_r+0x1e>
 800101c:	6994      	ldr	r4, [r2, #24]
 800101e:	42a3      	cmp	r3, r4
 8001020:	db01      	blt.n	8001026 <__sfputc_r+0x16>
 8001022:	290a      	cmp	r1, #10
 8001024:	d103      	bne.n	800102e <__sfputc_r+0x1e>
 8001026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800102a:	f7ff be86 	b.w	8000d3a <__swbuf_r>
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	1c58      	adds	r0, r3, #1
 8001032:	6010      	str	r0, [r2, #0]
 8001034:	7019      	strb	r1, [r3, #0]
 8001036:	4608      	mov	r0, r1
 8001038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800103c:	4770      	bx	lr

0800103e <__sfputs_r>:
 800103e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001040:	4606      	mov	r6, r0
 8001042:	460f      	mov	r7, r1
 8001044:	4614      	mov	r4, r2
 8001046:	18d5      	adds	r5, r2, r3
 8001048:	42ac      	cmp	r4, r5
 800104a:	d101      	bne.n	8001050 <__sfputs_r+0x12>
 800104c:	2000      	movs	r0, #0
 800104e:	e007      	b.n	8001060 <__sfputs_r+0x22>
 8001050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001054:	463a      	mov	r2, r7
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff ffda 	bl	8001010 <__sfputc_r>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d1f3      	bne.n	8001048 <__sfputs_r+0xa>
 8001060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001064 <_vfiprintf_r>:
 8001064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001068:	460d      	mov	r5, r1
 800106a:	b09d      	sub	sp, #116	@ 0x74
 800106c:	4614      	mov	r4, r2
 800106e:	4698      	mov	r8, r3
 8001070:	4606      	mov	r6, r0
 8001072:	b118      	cbz	r0, 800107c <_vfiprintf_r+0x18>
 8001074:	6a03      	ldr	r3, [r0, #32]
 8001076:	b90b      	cbnz	r3, 800107c <_vfiprintf_r+0x18>
 8001078:	f7ff fd76 	bl	8000b68 <__sinit>
 800107c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800107e:	07d9      	lsls	r1, r3, #31
 8001080:	d405      	bmi.n	800108e <_vfiprintf_r+0x2a>
 8001082:	89ab      	ldrh	r3, [r5, #12]
 8001084:	059a      	lsls	r2, r3, #22
 8001086:	d402      	bmi.n	800108e <_vfiprintf_r+0x2a>
 8001088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800108a:	f7ff ff74 	bl	8000f76 <__retarget_lock_acquire_recursive>
 800108e:	89ab      	ldrh	r3, [r5, #12]
 8001090:	071b      	lsls	r3, r3, #28
 8001092:	d501      	bpl.n	8001098 <_vfiprintf_r+0x34>
 8001094:	692b      	ldr	r3, [r5, #16]
 8001096:	b99b      	cbnz	r3, 80010c0 <_vfiprintf_r+0x5c>
 8001098:	4629      	mov	r1, r5
 800109a:	4630      	mov	r0, r6
 800109c:	f7ff fe8c 	bl	8000db8 <__swsetup_r>
 80010a0:	b170      	cbz	r0, 80010c0 <_vfiprintf_r+0x5c>
 80010a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010a4:	07dc      	lsls	r4, r3, #31
 80010a6:	d504      	bpl.n	80010b2 <_vfiprintf_r+0x4e>
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	b01d      	add	sp, #116	@ 0x74
 80010ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b2:	89ab      	ldrh	r3, [r5, #12]
 80010b4:	0598      	lsls	r0, r3, #22
 80010b6:	d4f7      	bmi.n	80010a8 <_vfiprintf_r+0x44>
 80010b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010ba:	f7ff ff5d 	bl	8000f78 <__retarget_lock_release_recursive>
 80010be:	e7f3      	b.n	80010a8 <_vfiprintf_r+0x44>
 80010c0:	2300      	movs	r3, #0
 80010c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80010c4:	2320      	movs	r3, #32
 80010c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80010ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ce:	2330      	movs	r3, #48	@ 0x30
 80010d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001280 <_vfiprintf_r+0x21c>
 80010d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80010d8:	f04f 0901 	mov.w	r9, #1
 80010dc:	4623      	mov	r3, r4
 80010de:	469a      	mov	sl, r3
 80010e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010e4:	b10a      	cbz	r2, 80010ea <_vfiprintf_r+0x86>
 80010e6:	2a25      	cmp	r2, #37	@ 0x25
 80010e8:	d1f9      	bne.n	80010de <_vfiprintf_r+0x7a>
 80010ea:	ebba 0b04 	subs.w	fp, sl, r4
 80010ee:	d00b      	beq.n	8001108 <_vfiprintf_r+0xa4>
 80010f0:	465b      	mov	r3, fp
 80010f2:	4622      	mov	r2, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	4630      	mov	r0, r6
 80010f8:	f7ff ffa1 	bl	800103e <__sfputs_r>
 80010fc:	3001      	adds	r0, #1
 80010fe:	f000 80a7 	beq.w	8001250 <_vfiprintf_r+0x1ec>
 8001102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001104:	445a      	add	r2, fp
 8001106:	9209      	str	r2, [sp, #36]	@ 0x24
 8001108:	f89a 3000 	ldrb.w	r3, [sl]
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 809f 	beq.w	8001250 <_vfiprintf_r+0x1ec>
 8001112:	2300      	movs	r3, #0
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800111c:	f10a 0a01 	add.w	sl, sl, #1
 8001120:	9304      	str	r3, [sp, #16]
 8001122:	9307      	str	r3, [sp, #28]
 8001124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001128:	931a      	str	r3, [sp, #104]	@ 0x68
 800112a:	4654      	mov	r4, sl
 800112c:	2205      	movs	r2, #5
 800112e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001132:	4853      	ldr	r0, [pc, #332]	@ (8001280 <_vfiprintf_r+0x21c>)
 8001134:	f7ff f86c 	bl	8000210 <memchr>
 8001138:	9a04      	ldr	r2, [sp, #16]
 800113a:	b9d8      	cbnz	r0, 8001174 <_vfiprintf_r+0x110>
 800113c:	06d1      	lsls	r1, r2, #27
 800113e:	bf44      	itt	mi
 8001140:	2320      	movmi	r3, #32
 8001142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001146:	0713      	lsls	r3, r2, #28
 8001148:	bf44      	itt	mi
 800114a:	232b      	movmi	r3, #43	@ 0x2b
 800114c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001150:	f89a 3000 	ldrb.w	r3, [sl]
 8001154:	2b2a      	cmp	r3, #42	@ 0x2a
 8001156:	d015      	beq.n	8001184 <_vfiprintf_r+0x120>
 8001158:	9a07      	ldr	r2, [sp, #28]
 800115a:	4654      	mov	r4, sl
 800115c:	2000      	movs	r0, #0
 800115e:	f04f 0c0a 	mov.w	ip, #10
 8001162:	4621      	mov	r1, r4
 8001164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001168:	3b30      	subs	r3, #48	@ 0x30
 800116a:	2b09      	cmp	r3, #9
 800116c:	d94b      	bls.n	8001206 <_vfiprintf_r+0x1a2>
 800116e:	b1b0      	cbz	r0, 800119e <_vfiprintf_r+0x13a>
 8001170:	9207      	str	r2, [sp, #28]
 8001172:	e014      	b.n	800119e <_vfiprintf_r+0x13a>
 8001174:	eba0 0308 	sub.w	r3, r0, r8
 8001178:	fa09 f303 	lsl.w	r3, r9, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	9304      	str	r3, [sp, #16]
 8001180:	46a2      	mov	sl, r4
 8001182:	e7d2      	b.n	800112a <_vfiprintf_r+0xc6>
 8001184:	9b03      	ldr	r3, [sp, #12]
 8001186:	1d19      	adds	r1, r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	9103      	str	r1, [sp, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfbb      	ittet	lt
 8001190:	425b      	neglt	r3, r3
 8001192:	f042 0202 	orrlt.w	r2, r2, #2
 8001196:	9307      	strge	r3, [sp, #28]
 8001198:	9307      	strlt	r3, [sp, #28]
 800119a:	bfb8      	it	lt
 800119c:	9204      	strlt	r2, [sp, #16]
 800119e:	7823      	ldrb	r3, [r4, #0]
 80011a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80011a2:	d10a      	bne.n	80011ba <_vfiprintf_r+0x156>
 80011a4:	7863      	ldrb	r3, [r4, #1]
 80011a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80011a8:	d132      	bne.n	8001210 <_vfiprintf_r+0x1ac>
 80011aa:	9b03      	ldr	r3, [sp, #12]
 80011ac:	1d1a      	adds	r2, r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	9203      	str	r2, [sp, #12]
 80011b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80011b6:	3402      	adds	r4, #2
 80011b8:	9305      	str	r3, [sp, #20]
 80011ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001290 <_vfiprintf_r+0x22c>
 80011be:	7821      	ldrb	r1, [r4, #0]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4650      	mov	r0, sl
 80011c4:	f7ff f824 	bl	8000210 <memchr>
 80011c8:	b138      	cbz	r0, 80011da <_vfiprintf_r+0x176>
 80011ca:	9b04      	ldr	r3, [sp, #16]
 80011cc:	eba0 000a 	sub.w	r0, r0, sl
 80011d0:	2240      	movs	r2, #64	@ 0x40
 80011d2:	4082      	lsls	r2, r0
 80011d4:	4313      	orrs	r3, r2
 80011d6:	3401      	adds	r4, #1
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011de:	4829      	ldr	r0, [pc, #164]	@ (8001284 <_vfiprintf_r+0x220>)
 80011e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80011e4:	2206      	movs	r2, #6
 80011e6:	f7ff f813 	bl	8000210 <memchr>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d03f      	beq.n	800126e <_vfiprintf_r+0x20a>
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <_vfiprintf_r+0x224>)
 80011f0:	bb1b      	cbnz	r3, 800123a <_vfiprintf_r+0x1d6>
 80011f2:	9b03      	ldr	r3, [sp, #12]
 80011f4:	3307      	adds	r3, #7
 80011f6:	f023 0307 	bic.w	r3, r3, #7
 80011fa:	3308      	adds	r3, #8
 80011fc:	9303      	str	r3, [sp, #12]
 80011fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001200:	443b      	add	r3, r7
 8001202:	9309      	str	r3, [sp, #36]	@ 0x24
 8001204:	e76a      	b.n	80010dc <_vfiprintf_r+0x78>
 8001206:	fb0c 3202 	mla	r2, ip, r2, r3
 800120a:	460c      	mov	r4, r1
 800120c:	2001      	movs	r0, #1
 800120e:	e7a8      	b.n	8001162 <_vfiprintf_r+0xfe>
 8001210:	2300      	movs	r3, #0
 8001212:	3401      	adds	r4, #1
 8001214:	9305      	str	r3, [sp, #20]
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0c0a 	mov.w	ip, #10
 800121c:	4620      	mov	r0, r4
 800121e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001222:	3a30      	subs	r2, #48	@ 0x30
 8001224:	2a09      	cmp	r2, #9
 8001226:	d903      	bls.n	8001230 <_vfiprintf_r+0x1cc>
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0c6      	beq.n	80011ba <_vfiprintf_r+0x156>
 800122c:	9105      	str	r1, [sp, #20]
 800122e:	e7c4      	b.n	80011ba <_vfiprintf_r+0x156>
 8001230:	fb0c 2101 	mla	r1, ip, r1, r2
 8001234:	4604      	mov	r4, r0
 8001236:	2301      	movs	r3, #1
 8001238:	e7f0      	b.n	800121c <_vfiprintf_r+0x1b8>
 800123a:	ab03      	add	r3, sp, #12
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	462a      	mov	r2, r5
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <_vfiprintf_r+0x228>)
 8001242:	a904      	add	r1, sp, #16
 8001244:	4630      	mov	r0, r6
 8001246:	f3af 8000 	nop.w
 800124a:	4607      	mov	r7, r0
 800124c:	1c78      	adds	r0, r7, #1
 800124e:	d1d6      	bne.n	80011fe <_vfiprintf_r+0x19a>
 8001250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001252:	07d9      	lsls	r1, r3, #31
 8001254:	d405      	bmi.n	8001262 <_vfiprintf_r+0x1fe>
 8001256:	89ab      	ldrh	r3, [r5, #12]
 8001258:	059a      	lsls	r2, r3, #22
 800125a:	d402      	bmi.n	8001262 <_vfiprintf_r+0x1fe>
 800125c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800125e:	f7ff fe8b 	bl	8000f78 <__retarget_lock_release_recursive>
 8001262:	89ab      	ldrh	r3, [r5, #12]
 8001264:	065b      	lsls	r3, r3, #25
 8001266:	f53f af1f 	bmi.w	80010a8 <_vfiprintf_r+0x44>
 800126a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800126c:	e71e      	b.n	80010ac <_vfiprintf_r+0x48>
 800126e:	ab03      	add	r3, sp, #12
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	462a      	mov	r2, r5
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <_vfiprintf_r+0x228>)
 8001276:	a904      	add	r1, sp, #16
 8001278:	4630      	mov	r0, r6
 800127a:	f000 f879 	bl	8001370 <_printf_i>
 800127e:	e7e4      	b.n	800124a <_vfiprintf_r+0x1e6>
 8001280:	0800194c 	.word	0x0800194c
 8001284:	08001956 	.word	0x08001956
 8001288:	00000000 	.word	0x00000000
 800128c:	0800103f 	.word	0x0800103f
 8001290:	08001952 	.word	0x08001952

08001294 <_printf_common>:
 8001294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001298:	4616      	mov	r6, r2
 800129a:	4698      	mov	r8, r3
 800129c:	688a      	ldr	r2, [r1, #8]
 800129e:	690b      	ldr	r3, [r1, #16]
 80012a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bfb8      	it	lt
 80012a8:	4613      	movlt	r3, r2
 80012aa:	6033      	str	r3, [r6, #0]
 80012ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80012b0:	4607      	mov	r7, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	b10a      	cbz	r2, 80012ba <_printf_common+0x26>
 80012b6:	3301      	adds	r3, #1
 80012b8:	6033      	str	r3, [r6, #0]
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	0699      	lsls	r1, r3, #26
 80012be:	bf42      	ittt	mi
 80012c0:	6833      	ldrmi	r3, [r6, #0]
 80012c2:	3302      	addmi	r3, #2
 80012c4:	6033      	strmi	r3, [r6, #0]
 80012c6:	6825      	ldr	r5, [r4, #0]
 80012c8:	f015 0506 	ands.w	r5, r5, #6
 80012cc:	d106      	bne.n	80012dc <_printf_common+0x48>
 80012ce:	f104 0a19 	add.w	sl, r4, #25
 80012d2:	68e3      	ldr	r3, [r4, #12]
 80012d4:	6832      	ldr	r2, [r6, #0]
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	42ab      	cmp	r3, r5
 80012da:	dc26      	bgt.n	800132a <_printf_common+0x96>
 80012dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	3b00      	subs	r3, #0
 80012e4:	bf18      	it	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	0692      	lsls	r2, r2, #26
 80012ea:	d42b      	bmi.n	8001344 <_printf_common+0xb0>
 80012ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80012f0:	4641      	mov	r1, r8
 80012f2:	4638      	mov	r0, r7
 80012f4:	47c8      	blx	r9
 80012f6:	3001      	adds	r0, #1
 80012f8:	d01e      	beq.n	8001338 <_printf_common+0xa4>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	6922      	ldr	r2, [r4, #16]
 80012fe:	f003 0306 	and.w	r3, r3, #6
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf02      	ittt	eq
 8001306:	68e5      	ldreq	r5, [r4, #12]
 8001308:	6833      	ldreq	r3, [r6, #0]
 800130a:	1aed      	subeq	r5, r5, r3
 800130c:	68a3      	ldr	r3, [r4, #8]
 800130e:	bf0c      	ite	eq
 8001310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001314:	2500      	movne	r5, #0
 8001316:	4293      	cmp	r3, r2
 8001318:	bfc4      	itt	gt
 800131a:	1a9b      	subgt	r3, r3, r2
 800131c:	18ed      	addgt	r5, r5, r3
 800131e:	2600      	movs	r6, #0
 8001320:	341a      	adds	r4, #26
 8001322:	42b5      	cmp	r5, r6
 8001324:	d11a      	bne.n	800135c <_printf_common+0xc8>
 8001326:	2000      	movs	r0, #0
 8001328:	e008      	b.n	800133c <_printf_common+0xa8>
 800132a:	2301      	movs	r3, #1
 800132c:	4652      	mov	r2, sl
 800132e:	4641      	mov	r1, r8
 8001330:	4638      	mov	r0, r7
 8001332:	47c8      	blx	r9
 8001334:	3001      	adds	r0, #1
 8001336:	d103      	bne.n	8001340 <_printf_common+0xac>
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001340:	3501      	adds	r5, #1
 8001342:	e7c6      	b.n	80012d2 <_printf_common+0x3e>
 8001344:	18e1      	adds	r1, r4, r3
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	2030      	movs	r0, #48	@ 0x30
 800134a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800134e:	4422      	add	r2, r4
 8001350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001358:	3302      	adds	r3, #2
 800135a:	e7c7      	b.n	80012ec <_printf_common+0x58>
 800135c:	2301      	movs	r3, #1
 800135e:	4622      	mov	r2, r4
 8001360:	4641      	mov	r1, r8
 8001362:	4638      	mov	r0, r7
 8001364:	47c8      	blx	r9
 8001366:	3001      	adds	r0, #1
 8001368:	d0e6      	beq.n	8001338 <_printf_common+0xa4>
 800136a:	3601      	adds	r6, #1
 800136c:	e7d9      	b.n	8001322 <_printf_common+0x8e>
	...

08001370 <_printf_i>:
 8001370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001374:	7e0f      	ldrb	r7, [r1, #24]
 8001376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001378:	2f78      	cmp	r7, #120	@ 0x78
 800137a:	4691      	mov	r9, r2
 800137c:	4680      	mov	r8, r0
 800137e:	460c      	mov	r4, r1
 8001380:	469a      	mov	sl, r3
 8001382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001386:	d807      	bhi.n	8001398 <_printf_i+0x28>
 8001388:	2f62      	cmp	r7, #98	@ 0x62
 800138a:	d80a      	bhi.n	80013a2 <_printf_i+0x32>
 800138c:	2f00      	cmp	r7, #0
 800138e:	f000 80d2 	beq.w	8001536 <_printf_i+0x1c6>
 8001392:	2f58      	cmp	r7, #88	@ 0x58
 8001394:	f000 80b9 	beq.w	800150a <_printf_i+0x19a>
 8001398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800139c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80013a0:	e03a      	b.n	8001418 <_printf_i+0xa8>
 80013a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80013a6:	2b15      	cmp	r3, #21
 80013a8:	d8f6      	bhi.n	8001398 <_printf_i+0x28>
 80013aa:	a101      	add	r1, pc, #4	@ (adr r1, 80013b0 <_printf_i+0x40>)
 80013ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013b0:	08001409 	.word	0x08001409
 80013b4:	0800141d 	.word	0x0800141d
 80013b8:	08001399 	.word	0x08001399
 80013bc:	08001399 	.word	0x08001399
 80013c0:	08001399 	.word	0x08001399
 80013c4:	08001399 	.word	0x08001399
 80013c8:	0800141d 	.word	0x0800141d
 80013cc:	08001399 	.word	0x08001399
 80013d0:	08001399 	.word	0x08001399
 80013d4:	08001399 	.word	0x08001399
 80013d8:	08001399 	.word	0x08001399
 80013dc:	0800151d 	.word	0x0800151d
 80013e0:	08001447 	.word	0x08001447
 80013e4:	080014d7 	.word	0x080014d7
 80013e8:	08001399 	.word	0x08001399
 80013ec:	08001399 	.word	0x08001399
 80013f0:	0800153f 	.word	0x0800153f
 80013f4:	08001399 	.word	0x08001399
 80013f8:	08001447 	.word	0x08001447
 80013fc:	08001399 	.word	0x08001399
 8001400:	08001399 	.word	0x08001399
 8001404:	080014df 	.word	0x080014df
 8001408:	6833      	ldr	r3, [r6, #0]
 800140a:	1d1a      	adds	r2, r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6032      	str	r2, [r6, #0]
 8001410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001418:	2301      	movs	r3, #1
 800141a:	e09d      	b.n	8001558 <_printf_i+0x1e8>
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	1d19      	adds	r1, r3, #4
 8001422:	6031      	str	r1, [r6, #0]
 8001424:	0606      	lsls	r6, r0, #24
 8001426:	d501      	bpl.n	800142c <_printf_i+0xbc>
 8001428:	681d      	ldr	r5, [r3, #0]
 800142a:	e003      	b.n	8001434 <_printf_i+0xc4>
 800142c:	0645      	lsls	r5, r0, #25
 800142e:	d5fb      	bpl.n	8001428 <_printf_i+0xb8>
 8001430:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001434:	2d00      	cmp	r5, #0
 8001436:	da03      	bge.n	8001440 <_printf_i+0xd0>
 8001438:	232d      	movs	r3, #45	@ 0x2d
 800143a:	426d      	negs	r5, r5
 800143c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001440:	4859      	ldr	r0, [pc, #356]	@ (80015a8 <_printf_i+0x238>)
 8001442:	230a      	movs	r3, #10
 8001444:	e011      	b.n	800146a <_printf_i+0xfa>
 8001446:	6821      	ldr	r1, [r4, #0]
 8001448:	6833      	ldr	r3, [r6, #0]
 800144a:	0608      	lsls	r0, r1, #24
 800144c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001450:	d402      	bmi.n	8001458 <_printf_i+0xe8>
 8001452:	0649      	lsls	r1, r1, #25
 8001454:	bf48      	it	mi
 8001456:	b2ad      	uxthmi	r5, r5
 8001458:	2f6f      	cmp	r7, #111	@ 0x6f
 800145a:	4853      	ldr	r0, [pc, #332]	@ (80015a8 <_printf_i+0x238>)
 800145c:	6033      	str	r3, [r6, #0]
 800145e:	bf14      	ite	ne
 8001460:	230a      	movne	r3, #10
 8001462:	2308      	moveq	r3, #8
 8001464:	2100      	movs	r1, #0
 8001466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800146a:	6866      	ldr	r6, [r4, #4]
 800146c:	60a6      	str	r6, [r4, #8]
 800146e:	2e00      	cmp	r6, #0
 8001470:	bfa2      	ittt	ge
 8001472:	6821      	ldrge	r1, [r4, #0]
 8001474:	f021 0104 	bicge.w	r1, r1, #4
 8001478:	6021      	strge	r1, [r4, #0]
 800147a:	b90d      	cbnz	r5, 8001480 <_printf_i+0x110>
 800147c:	2e00      	cmp	r6, #0
 800147e:	d04b      	beq.n	8001518 <_printf_i+0x1a8>
 8001480:	4616      	mov	r6, r2
 8001482:	fbb5 f1f3 	udiv	r1, r5, r3
 8001486:	fb03 5711 	mls	r7, r3, r1, r5
 800148a:	5dc7      	ldrb	r7, [r0, r7]
 800148c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001490:	462f      	mov	r7, r5
 8001492:	42bb      	cmp	r3, r7
 8001494:	460d      	mov	r5, r1
 8001496:	d9f4      	bls.n	8001482 <_printf_i+0x112>
 8001498:	2b08      	cmp	r3, #8
 800149a:	d10b      	bne.n	80014b4 <_printf_i+0x144>
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	07df      	lsls	r7, r3, #31
 80014a0:	d508      	bpl.n	80014b4 <_printf_i+0x144>
 80014a2:	6923      	ldr	r3, [r4, #16]
 80014a4:	6861      	ldr	r1, [r4, #4]
 80014a6:	4299      	cmp	r1, r3
 80014a8:	bfde      	ittt	le
 80014aa:	2330      	movle	r3, #48	@ 0x30
 80014ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014b4:	1b92      	subs	r2, r2, r6
 80014b6:	6122      	str	r2, [r4, #16]
 80014b8:	f8cd a000 	str.w	sl, [sp]
 80014bc:	464b      	mov	r3, r9
 80014be:	aa03      	add	r2, sp, #12
 80014c0:	4621      	mov	r1, r4
 80014c2:	4640      	mov	r0, r8
 80014c4:	f7ff fee6 	bl	8001294 <_printf_common>
 80014c8:	3001      	adds	r0, #1
 80014ca:	d14a      	bne.n	8001562 <_printf_i+0x1f2>
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	b004      	add	sp, #16
 80014d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	4833      	ldr	r0, [pc, #204]	@ (80015ac <_printf_i+0x23c>)
 80014e0:	2778      	movs	r7, #120	@ 0x78
 80014e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	6831      	ldr	r1, [r6, #0]
 80014ea:	061f      	lsls	r7, r3, #24
 80014ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80014f0:	d402      	bmi.n	80014f8 <_printf_i+0x188>
 80014f2:	065f      	lsls	r7, r3, #25
 80014f4:	bf48      	it	mi
 80014f6:	b2ad      	uxthmi	r5, r5
 80014f8:	6031      	str	r1, [r6, #0]
 80014fa:	07d9      	lsls	r1, r3, #31
 80014fc:	bf44      	itt	mi
 80014fe:	f043 0320 	orrmi.w	r3, r3, #32
 8001502:	6023      	strmi	r3, [r4, #0]
 8001504:	b11d      	cbz	r5, 800150e <_printf_i+0x19e>
 8001506:	2310      	movs	r3, #16
 8001508:	e7ac      	b.n	8001464 <_printf_i+0xf4>
 800150a:	4827      	ldr	r0, [pc, #156]	@ (80015a8 <_printf_i+0x238>)
 800150c:	e7e9      	b.n	80014e2 <_printf_i+0x172>
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	f023 0320 	bic.w	r3, r3, #32
 8001514:	6023      	str	r3, [r4, #0]
 8001516:	e7f6      	b.n	8001506 <_printf_i+0x196>
 8001518:	4616      	mov	r6, r2
 800151a:	e7bd      	b.n	8001498 <_printf_i+0x128>
 800151c:	6833      	ldr	r3, [r6, #0]
 800151e:	6825      	ldr	r5, [r4, #0]
 8001520:	6961      	ldr	r1, [r4, #20]
 8001522:	1d18      	adds	r0, r3, #4
 8001524:	6030      	str	r0, [r6, #0]
 8001526:	062e      	lsls	r6, r5, #24
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	d501      	bpl.n	8001530 <_printf_i+0x1c0>
 800152c:	6019      	str	r1, [r3, #0]
 800152e:	e002      	b.n	8001536 <_printf_i+0x1c6>
 8001530:	0668      	lsls	r0, r5, #25
 8001532:	d5fb      	bpl.n	800152c <_printf_i+0x1bc>
 8001534:	8019      	strh	r1, [r3, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	6123      	str	r3, [r4, #16]
 800153a:	4616      	mov	r6, r2
 800153c:	e7bc      	b.n	80014b8 <_printf_i+0x148>
 800153e:	6833      	ldr	r3, [r6, #0]
 8001540:	1d1a      	adds	r2, r3, #4
 8001542:	6032      	str	r2, [r6, #0]
 8001544:	681e      	ldr	r6, [r3, #0]
 8001546:	6862      	ldr	r2, [r4, #4]
 8001548:	2100      	movs	r1, #0
 800154a:	4630      	mov	r0, r6
 800154c:	f7fe fe60 	bl	8000210 <memchr>
 8001550:	b108      	cbz	r0, 8001556 <_printf_i+0x1e6>
 8001552:	1b80      	subs	r0, r0, r6
 8001554:	6060      	str	r0, [r4, #4]
 8001556:	6863      	ldr	r3, [r4, #4]
 8001558:	6123      	str	r3, [r4, #16]
 800155a:	2300      	movs	r3, #0
 800155c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001560:	e7aa      	b.n	80014b8 <_printf_i+0x148>
 8001562:	6923      	ldr	r3, [r4, #16]
 8001564:	4632      	mov	r2, r6
 8001566:	4649      	mov	r1, r9
 8001568:	4640      	mov	r0, r8
 800156a:	47d0      	blx	sl
 800156c:	3001      	adds	r0, #1
 800156e:	d0ad      	beq.n	80014cc <_printf_i+0x15c>
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	079b      	lsls	r3, r3, #30
 8001574:	d413      	bmi.n	800159e <_printf_i+0x22e>
 8001576:	68e0      	ldr	r0, [r4, #12]
 8001578:	9b03      	ldr	r3, [sp, #12]
 800157a:	4298      	cmp	r0, r3
 800157c:	bfb8      	it	lt
 800157e:	4618      	movlt	r0, r3
 8001580:	e7a6      	b.n	80014d0 <_printf_i+0x160>
 8001582:	2301      	movs	r3, #1
 8001584:	4632      	mov	r2, r6
 8001586:	4649      	mov	r1, r9
 8001588:	4640      	mov	r0, r8
 800158a:	47d0      	blx	sl
 800158c:	3001      	adds	r0, #1
 800158e:	d09d      	beq.n	80014cc <_printf_i+0x15c>
 8001590:	3501      	adds	r5, #1
 8001592:	68e3      	ldr	r3, [r4, #12]
 8001594:	9903      	ldr	r1, [sp, #12]
 8001596:	1a5b      	subs	r3, r3, r1
 8001598:	42ab      	cmp	r3, r5
 800159a:	dcf2      	bgt.n	8001582 <_printf_i+0x212>
 800159c:	e7eb      	b.n	8001576 <_printf_i+0x206>
 800159e:	2500      	movs	r5, #0
 80015a0:	f104 0619 	add.w	r6, r4, #25
 80015a4:	e7f5      	b.n	8001592 <_printf_i+0x222>
 80015a6:	bf00      	nop
 80015a8:	0800195d 	.word	0x0800195d
 80015ac:	0800196e 	.word	0x0800196e

080015b0 <__sflush_r>:
 80015b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80015b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b8:	0716      	lsls	r6, r2, #28
 80015ba:	4605      	mov	r5, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	d454      	bmi.n	800166a <__sflush_r+0xba>
 80015c0:	684b      	ldr	r3, [r1, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dc02      	bgt.n	80015cc <__sflush_r+0x1c>
 80015c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd48      	ble.n	800165e <__sflush_r+0xae>
 80015cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d045      	beq.n	800165e <__sflush_r+0xae>
 80015d2:	2300      	movs	r3, #0
 80015d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80015d8:	682f      	ldr	r7, [r5, #0]
 80015da:	6a21      	ldr	r1, [r4, #32]
 80015dc:	602b      	str	r3, [r5, #0]
 80015de:	d030      	beq.n	8001642 <__sflush_r+0x92>
 80015e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80015e2:	89a3      	ldrh	r3, [r4, #12]
 80015e4:	0759      	lsls	r1, r3, #29
 80015e6:	d505      	bpl.n	80015f4 <__sflush_r+0x44>
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80015ee:	b10b      	cbz	r3, 80015f4 <__sflush_r+0x44>
 80015f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	2300      	movs	r3, #0
 80015f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015f8:	6a21      	ldr	r1, [r4, #32]
 80015fa:	4628      	mov	r0, r5
 80015fc:	47b0      	blx	r6
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	d106      	bne.n	8001612 <__sflush_r+0x62>
 8001604:	6829      	ldr	r1, [r5, #0]
 8001606:	291d      	cmp	r1, #29
 8001608:	d82b      	bhi.n	8001662 <__sflush_r+0xb2>
 800160a:	4a2a      	ldr	r2, [pc, #168]	@ (80016b4 <__sflush_r+0x104>)
 800160c:	410a      	asrs	r2, r1
 800160e:	07d6      	lsls	r6, r2, #31
 8001610:	d427      	bmi.n	8001662 <__sflush_r+0xb2>
 8001612:	2200      	movs	r2, #0
 8001614:	6062      	str	r2, [r4, #4]
 8001616:	04d9      	lsls	r1, r3, #19
 8001618:	6922      	ldr	r2, [r4, #16]
 800161a:	6022      	str	r2, [r4, #0]
 800161c:	d504      	bpl.n	8001628 <__sflush_r+0x78>
 800161e:	1c42      	adds	r2, r0, #1
 8001620:	d101      	bne.n	8001626 <__sflush_r+0x76>
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	b903      	cbnz	r3, 8001628 <__sflush_r+0x78>
 8001626:	6560      	str	r0, [r4, #84]	@ 0x54
 8001628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800162a:	602f      	str	r7, [r5, #0]
 800162c:	b1b9      	cbz	r1, 800165e <__sflush_r+0xae>
 800162e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001632:	4299      	cmp	r1, r3
 8001634:	d002      	beq.n	800163c <__sflush_r+0x8c>
 8001636:	4628      	mov	r0, r5
 8001638:	f7ff fca0 	bl	8000f7c <_free_r>
 800163c:	2300      	movs	r3, #0
 800163e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001640:	e00d      	b.n	800165e <__sflush_r+0xae>
 8001642:	2301      	movs	r3, #1
 8001644:	4628      	mov	r0, r5
 8001646:	47b0      	blx	r6
 8001648:	4602      	mov	r2, r0
 800164a:	1c50      	adds	r0, r2, #1
 800164c:	d1c9      	bne.n	80015e2 <__sflush_r+0x32>
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0c6      	beq.n	80015e2 <__sflush_r+0x32>
 8001654:	2b1d      	cmp	r3, #29
 8001656:	d001      	beq.n	800165c <__sflush_r+0xac>
 8001658:	2b16      	cmp	r3, #22
 800165a:	d11e      	bne.n	800169a <__sflush_r+0xea>
 800165c:	602f      	str	r7, [r5, #0]
 800165e:	2000      	movs	r0, #0
 8001660:	e022      	b.n	80016a8 <__sflush_r+0xf8>
 8001662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001666:	b21b      	sxth	r3, r3
 8001668:	e01b      	b.n	80016a2 <__sflush_r+0xf2>
 800166a:	690f      	ldr	r7, [r1, #16]
 800166c:	2f00      	cmp	r7, #0
 800166e:	d0f6      	beq.n	800165e <__sflush_r+0xae>
 8001670:	0793      	lsls	r3, r2, #30
 8001672:	680e      	ldr	r6, [r1, #0]
 8001674:	bf08      	it	eq
 8001676:	694b      	ldreq	r3, [r1, #20]
 8001678:	600f      	str	r7, [r1, #0]
 800167a:	bf18      	it	ne
 800167c:	2300      	movne	r3, #0
 800167e:	eba6 0807 	sub.w	r8, r6, r7
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	f1b8 0f00 	cmp.w	r8, #0
 8001688:	dde9      	ble.n	800165e <__sflush_r+0xae>
 800168a:	6a21      	ldr	r1, [r4, #32]
 800168c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800168e:	4643      	mov	r3, r8
 8001690:	463a      	mov	r2, r7
 8001692:	4628      	mov	r0, r5
 8001694:	47b0      	blx	r6
 8001696:	2800      	cmp	r0, #0
 8001698:	dc08      	bgt.n	80016ac <__sflush_r+0xfc>
 800169a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800169e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ac:	4407      	add	r7, r0
 80016ae:	eba8 0800 	sub.w	r8, r8, r0
 80016b2:	e7e7      	b.n	8001684 <__sflush_r+0xd4>
 80016b4:	dfbffffe 	.word	0xdfbffffe

080016b8 <_fflush_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	690b      	ldr	r3, [r1, #16]
 80016bc:	4605      	mov	r5, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	b913      	cbnz	r3, 80016c8 <_fflush_r+0x10>
 80016c2:	2500      	movs	r5, #0
 80016c4:	4628      	mov	r0, r5
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
 80016c8:	b118      	cbz	r0, 80016d2 <_fflush_r+0x1a>
 80016ca:	6a03      	ldr	r3, [r0, #32]
 80016cc:	b90b      	cbnz	r3, 80016d2 <_fflush_r+0x1a>
 80016ce:	f7ff fa4b 	bl	8000b68 <__sinit>
 80016d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f3      	beq.n	80016c2 <_fflush_r+0xa>
 80016da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80016dc:	07d0      	lsls	r0, r2, #31
 80016de:	d404      	bmi.n	80016ea <_fflush_r+0x32>
 80016e0:	0599      	lsls	r1, r3, #22
 80016e2:	d402      	bmi.n	80016ea <_fflush_r+0x32>
 80016e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016e6:	f7ff fc46 	bl	8000f76 <__retarget_lock_acquire_recursive>
 80016ea:	4628      	mov	r0, r5
 80016ec:	4621      	mov	r1, r4
 80016ee:	f7ff ff5f 	bl	80015b0 <__sflush_r>
 80016f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016f4:	07da      	lsls	r2, r3, #31
 80016f6:	4605      	mov	r5, r0
 80016f8:	d4e4      	bmi.n	80016c4 <_fflush_r+0xc>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	059b      	lsls	r3, r3, #22
 80016fe:	d4e1      	bmi.n	80016c4 <_fflush_r+0xc>
 8001700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001702:	f7ff fc39 	bl	8000f78 <__retarget_lock_release_recursive>
 8001706:	e7dd      	b.n	80016c4 <_fflush_r+0xc>

08001708 <__swhatbuf_r>:
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	460c      	mov	r4, r1
 800170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001710:	2900      	cmp	r1, #0
 8001712:	b096      	sub	sp, #88	@ 0x58
 8001714:	4615      	mov	r5, r2
 8001716:	461e      	mov	r6, r3
 8001718:	da0d      	bge.n	8001736 <__swhatbuf_r+0x2e>
 800171a:	89a3      	ldrh	r3, [r4, #12]
 800171c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	bf14      	ite	ne
 8001726:	2340      	movne	r3, #64	@ 0x40
 8001728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800172c:	2000      	movs	r0, #0
 800172e:	6031      	str	r1, [r6, #0]
 8001730:	602b      	str	r3, [r5, #0]
 8001732:	b016      	add	sp, #88	@ 0x58
 8001734:	bd70      	pop	{r4, r5, r6, pc}
 8001736:	466a      	mov	r2, sp
 8001738:	f000 f848 	bl	80017cc <_fstat_r>
 800173c:	2800      	cmp	r0, #0
 800173e:	dbec      	blt.n	800171a <__swhatbuf_r+0x12>
 8001740:	9901      	ldr	r1, [sp, #4]
 8001742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800174a:	4259      	negs	r1, r3
 800174c:	4159      	adcs	r1, r3
 800174e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001752:	e7eb      	b.n	800172c <__swhatbuf_r+0x24>

08001754 <__smakebuf_r>:
 8001754:	898b      	ldrh	r3, [r1, #12]
 8001756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001758:	079d      	lsls	r5, r3, #30
 800175a:	4606      	mov	r6, r0
 800175c:	460c      	mov	r4, r1
 800175e:	d507      	bpl.n	8001770 <__smakebuf_r+0x1c>
 8001760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001764:	6023      	str	r3, [r4, #0]
 8001766:	6123      	str	r3, [r4, #16]
 8001768:	2301      	movs	r3, #1
 800176a:	6163      	str	r3, [r4, #20]
 800176c:	b003      	add	sp, #12
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001770:	ab01      	add	r3, sp, #4
 8001772:	466a      	mov	r2, sp
 8001774:	f7ff ffc8 	bl	8001708 <__swhatbuf_r>
 8001778:	9f00      	ldr	r7, [sp, #0]
 800177a:	4605      	mov	r5, r0
 800177c:	4639      	mov	r1, r7
 800177e:	4630      	mov	r0, r6
 8001780:	f7ff f8da 	bl	8000938 <_malloc_r>
 8001784:	b948      	cbnz	r0, 800179a <__smakebuf_r+0x46>
 8001786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800178a:	059a      	lsls	r2, r3, #22
 800178c:	d4ee      	bmi.n	800176c <__smakebuf_r+0x18>
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	81a3      	strh	r3, [r4, #12]
 8001798:	e7e2      	b.n	8001760 <__smakebuf_r+0xc>
 800179a:	89a3      	ldrh	r3, [r4, #12]
 800179c:	6020      	str	r0, [r4, #0]
 800179e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a2:	81a3      	strh	r3, [r4, #12]
 80017a4:	9b01      	ldr	r3, [sp, #4]
 80017a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80017aa:	b15b      	cbz	r3, 80017c4 <__smakebuf_r+0x70>
 80017ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 f81d 	bl	80017f0 <_isatty_r>
 80017b6:	b128      	cbz	r0, 80017c4 <__smakebuf_r+0x70>
 80017b8:	89a3      	ldrh	r3, [r4, #12]
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	81a3      	strh	r3, [r4, #12]
 80017c4:	89a3      	ldrh	r3, [r4, #12]
 80017c6:	431d      	orrs	r5, r3
 80017c8:	81a5      	strh	r5, [r4, #12]
 80017ca:	e7cf      	b.n	800176c <__smakebuf_r+0x18>

080017cc <_fstat_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4d07      	ldr	r5, [pc, #28]	@ (80017ec <_fstat_r+0x20>)
 80017d0:	2300      	movs	r3, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	602b      	str	r3, [r5, #0]
 80017da:	f7fe ff50 	bl	800067e <_fstat>
 80017de:	1c43      	adds	r3, r0, #1
 80017e0:	d102      	bne.n	80017e8 <_fstat_r+0x1c>
 80017e2:	682b      	ldr	r3, [r5, #0]
 80017e4:	b103      	cbz	r3, 80017e8 <_fstat_r+0x1c>
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	bd38      	pop	{r3, r4, r5, pc}
 80017ea:	bf00      	nop
 80017ec:	200001c8 	.word	0x200001c8

080017f0 <_isatty_r>:
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	4d06      	ldr	r5, [pc, #24]	@ (800180c <_isatty_r+0x1c>)
 80017f4:	2300      	movs	r3, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	602b      	str	r3, [r5, #0]
 80017fc:	f7fe ff4f 	bl	800069e <_isatty>
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	d102      	bne.n	800180a <_isatty_r+0x1a>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	b103      	cbz	r3, 800180a <_isatty_r+0x1a>
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	200001c8 	.word	0x200001c8

08001810 <_init>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr

0800181c <_fini>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr
