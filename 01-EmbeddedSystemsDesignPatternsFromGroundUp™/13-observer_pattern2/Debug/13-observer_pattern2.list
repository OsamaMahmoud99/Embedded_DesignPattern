
13-observer_pattern2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000221c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080023ec  080023ec  000033ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002500  08002500  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002500  08002500  00003500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002508  08002508  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002508  08002508  00003508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800250c  0800250c  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002510  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800256c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800256c  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021de  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b86  00000000  00000000  0000626a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00006df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b9  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af50  00000000  00000000  00007231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c6d  00000000  00000000  00022181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091241  00000000  00000000  00025dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b702f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f8  00000000  00000000  000b7074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  000b816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080023d4 	.word	0x080023d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080023d4 	.word	0x080023d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <pa1_analog_init>:
#include "adc_driver.h"
#include "stm32f4xx.h"                  // Device header


void pa1_analog_init(void){
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
 
	  RCC->AHB1ENR |=(1U<<0); //Enable clock to GPIOA
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <pa1_analog_init+0x58>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <pa1_analog_init+0x58>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6313      	str	r3, [r2, #48]	@ 0x30
	 
	  //Set PA1 as analog
	 GPIOA->MODER  |=(1U<<2);
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <pa1_analog_init+0x5c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a11      	ldr	r2, [pc, #68]	@ (8000ae8 <pa1_analog_init+0x5c>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER  |=(1U<<3);
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <pa1_analog_init+0x5c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <pa1_analog_init+0x5c>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6013      	str	r3, [r2, #0]
	
	  //Setup ADC1
	 RCC->APB2ENR |=(1U<<8); //Enable clock access to ADC1
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <pa1_analog_init+0x58>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <pa1_analog_init+0x58>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000abe:	6453      	str	r3, [r2, #68]	@ 0x44
	 ADC1->CR2 = 0; //SW trigger, Disable ADC
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <pa1_analog_init+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
	 ADC1->SQR3  =1;  // Conversion sequence starts at CH1
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <pa1_analog_init+0x60>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	635a      	str	r2, [r3, #52]	@ 0x34
	 ADC1->SQR1 = 0;  // Conversion sequence length is 1
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <pa1_analog_init+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
	 ADC1 ->CR2 = (1U<<0); //Enable ADC	 
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <pa1_analog_init+0x60>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	609a      	str	r2, [r3, #8]

}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40012000 	.word	0x40012000

08000af0 <pa1_analog_read>:

uint32_t pa1_analog_read(void){
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  ADC1->CR2 |=(1U<<30); // Start a conversion
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <pa1_analog_read+0x2c>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <pa1_analog_read+0x2c>)
 8000afa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000afe:	6093      	str	r3, [r2, #8]
	
	 while(!(ADC1->SR &(1U<<1))){} // Wait for conversion completion
 8000b00:	bf00      	nop
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <pa1_analog_read+0x2c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f9      	beq.n	8000b02 <pa1_analog_read+0x12>
		 
	return ADC1->DR; 
 8000b0e:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <pa1_analog_read+0x2c>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	 
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40012000 	.word	0x40012000

08000b20 <temp_sensor_init>:
//Configure TIM2 to generate 1hz output
//to trigger on_chip temperature_sensor adc_conversion
//Sysclock = TIM2 clock source  = 16MHz  = 16 000 000 cycls/second
//16 000 000  / 16 00 = 10 000
//10000 /10000 =1
void temp_sensor_init(void){
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

	 //Setup TIM2
		RCC->APB1ENR |= (1U<<0);  //Enable clock to TIM2
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <temp_sensor_init+0xa0>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	4a25      	ldr	r2, [pc, #148]	@ (8000bc0 <temp_sensor_init+0xa0>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM2->PSC =  1600 -1 ; //clock divided by 1600
 8000b30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b34:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM2->ARR  =  10000-1;  // divide by 10000 , sample at 1hz
 8000b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b3e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM2->CNT = 0;
 8000b44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
	  TIM2->CCMR1=  0x00006800; // pwm1 mode, preload enable
 8000b4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b50:	f44f 42d0 	mov.w	r2, #26624	@ 0x6800
 8000b54:	619a      	str	r2, [r3, #24]
		TIM2->CCER  = 0x10;    //Enable CH2
 8000b56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	621a      	str	r2, [r3, #32]
		TIM2->CCR2  = 50 -1;   // High campture/compare 2
 8000b5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b62:	2231      	movs	r2, #49	@ 0x31
 8000b64:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM2->CR1 =  1;       // Enable TIM2
 8000b66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]


	//Setup ADC1
	RCC->APB2ENR |=(1U<<8); //Enable clock access to ADC1
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <temp_sensor_init+0xa0>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a13      	ldr	r2, [pc, #76]	@ (8000bc0 <temp_sensor_init+0xa0>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
	//turn on the temp sensor
	ADC->CCR |=0x800000;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <temp_sensor_init+0xa4>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <temp_sensor_init+0xa4>)
 8000b80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b84:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~0x400000;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <temp_sensor_init+0xa4>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <temp_sensor_init+0xa4>)
 8000b8c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000b90:	6053      	str	r3, [r2, #4]
	ADC1->SMPR1  =  0x4000000;  //Sampliny time minimum to 10us
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <temp_sensor_init+0xa8>)
 8000b94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b98:	60da      	str	r2, [r3, #12]
	ADC1->SQR3 = 18;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <temp_sensor_init+0xa8>)
 8000b9c:	2212      	movs	r2, #18
 8000b9e:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC1->CR2  = 0x13000000 ; //trigger :  External, rising edge, extsel3  = tim2.2
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <temp_sensor_init+0xa8>)
 8000ba2:	f04f 5298 	mov.w	r2, #318767104	@ 0x13000000
 8000ba6:	609a      	str	r2, [r3, #8]
	ADC1->CR2  |=1;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <temp_sensor_init+0xa8>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <temp_sensor_init+0xa8>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6093      	str	r3, [r2, #8]

}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40012300 	.word	0x40012300
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <read_chip_temperature>:

double read_chip_temperature(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0

  uint32_t data;
	double volt, temp;

	while(!(ADC1->SR &(1U<<1))){} // Wait for conversion completion
 8000bd6:	bf00      	nop
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c88 <read_chip_temperature+0xb8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f9      	beq.n	8000bd8 <read_chip_temperature+0x8>

	 data =  ADC1->DR;
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <read_chip_temperature+0xb8>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be8:	617b      	str	r3, [r7, #20]
	volt  = (double)data/4095*3.3; //Convert the adc output to voltage
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff fca2 	bl	8000534 <__aeabi_ui2d>
 8000bf0:	a31d      	add	r3, pc, #116	@ (adr r3, 8000c68 <read_chip_temperature+0x98>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fe41 	bl	800087c <__aeabi_ddiv>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	a31b      	add	r3, pc, #108	@ (adr r3, 8000c70 <read_chip_temperature+0xa0>)
 8000c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c08:	f7ff fd0e 	bl	8000628 <__aeabi_dmul>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	e9c7 2302 	strd	r2, r3, [r7, #8]
  temp = (volt - 0.76)/0.0025 + 25; 	//convert voltage to temperature in Celsius
 8000c14:	a318      	add	r3, pc, #96	@ (adr r3, 8000c78 <read_chip_temperature+0xa8>)
 8000c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c1e:	f7ff fb4b 	bl	80002b8 <__aeabi_dsub>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	a315      	add	r3, pc, #84	@ (adr r3, 8000c80 <read_chip_temperature+0xb0>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	f7ff fe24 	bl	800087c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4610      	mov	r0, r2
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <read_chip_temperature+0xbc>)
 8000c42:	f7ff fb3b 	bl	80002bc <__adddf3>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	e9c7 2300 	strd	r2, r3, [r7]

	return temp;
 8000c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c52:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c56:	eeb0 0a47 	vmov.f32	s0, s14
 8000c5a:	eef0 0a67 	vmov.f32	s1, s15
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	f3af 8000 	nop.w
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	40affe00 	.word	0x40affe00
 8000c70:	66666666 	.word	0x66666666
 8000c74:	400a6666 	.word	0x400a6666
 8000c78:	851eb852 	.word	0x851eb852
 8000c7c:	3fe851eb 	.word	0x3fe851eb
 8000c80:	47ae147b 	.word	0x47ae147b
 8000c84:	3f647ae1 	.word	0x3f647ae1
 8000c88:	40012000 	.word	0x40012000
 8000c8c:	40390000 	.word	0x40390000

08000c90 <display_client_init>:

#include "env_display_client.h"
#include <stdlib.h>
#include "uart.h"

void display_client_init(display_client_t * const me){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	me->fn_handler = display_client_handle_new_data;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <display_client_init+0x1c>)
 8000c9c:	60da      	str	r2, [r3, #12]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	08000cd9 	.word	0x08000cd9

08000cb0 <display_client_create>:
display_client_t * display_client_create(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

display_client_t * me   = (display_client_t *)malloc(sizeof(display_client_t));
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f000 fbee 	bl	8001498 <malloc>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	607b      	str	r3, [r7, #4]

	if( me!=NULL){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <display_client_create+0x1c>

	  display_client_init(me);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffe2 	bl	8000c90 <display_client_init>
	}

	return me;
 8000ccc:	687b      	ldr	r3, [r7, #4]

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <display_client_handle_new_data>:

void display_client_handle_new_data(void * me, env_data_t data){
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

   ((display_client_t *)me)->data =  data;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	461c      	mov	r4, r3
 8000cea:	463b      	mov	r3, r7
 8000cec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  /*Process data*/
	  //Do somthing..
	  printf("display_module : \t New data :  %d %d %d \n\r",
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6819      	ldr	r1, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	685a      	ldr	r2, [r3, #4]
						((display_client_t *)me)->data.temperature,
						((display_client_t *)me)->data.humidity,
						((display_client_t *)me)->data.sprayed);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
	  printf("display_module : \t New data :  %d %d %d \n\r",
 8000d00:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <display_client_handle_new_data+0x38>)
 8000d02:	f000 fd49 	bl	8001798 <iprintf>

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	080023ec 	.word	0x080023ec

08000d14 <display_client_subscribe>:


void display_client_subscribe(display_client_t * const me, env_sensor_t * const server){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]

	  for(int i=0;i<MAX_CLIENT;i++){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e044      	b.n	8000dae <display_client_subscribe+0x9a>

		  //Check if client is already subscribed
			  if(server->clients[i].pObject ==  me){
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3202      	adds	r2, #2
 8000d2a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d040      	beq.n	8000db6 <display_client_subscribe+0xa2>
				  return;
				}
				//Add new client
				if(server->clients[i].pObject == NULL){
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	3202      	adds	r2, #2
 8000d3a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d132      	bne.n	8000da8 <display_client_subscribe+0x94>

				   server->n_client++;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	60da      	str	r2, [r3, #12]
					 server->clients[i].pObject =  me;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3202      	adds	r2, #2
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					 server->clients[i].fn_handler = me->fn_handler;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3302      	adds	r3, #2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	605a      	str	r2, [r3, #4]

					 //Remove duplicate
					for(int j= i+1; j<MAX_CLIENT;j++){
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	e017      	b.n	8000da0 <display_client_subscribe+0x8c>
					   if(server->clients[j].pObject == me){
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	3202      	adds	r2, #2
 8000d76:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d10c      	bne.n	8000d9a <display_client_subscribe+0x86>
						    server->clients[j].pObject = NULL;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	3202      	adds	r2, #2
 8000d86:	2100      	movs	r1, #0
 8000d88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
							   server->clients[j].fn_handler =  NULL;
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	3302      	adds	r3, #2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	4413      	add	r3, r2
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
					for(int j= i+1; j<MAX_CLIENT;j++){
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2b09      	cmp	r3, #9
 8000da4:	dde4      	ble.n	8000d70 <display_client_subscribe+0x5c>
						 }
					}
					return;
 8000da6:	e007      	b.n	8000db8 <display_client_subscribe+0xa4>
	  for(int i=0;i<MAX_CLIENT;i++){
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	ddb7      	ble.n	8000d24 <display_client_subscribe+0x10>
 8000db4:	e000      	b.n	8000db8 <display_client_subscribe+0xa4>
				  return;
 8000db6:	bf00      	nop
				}
		}


}
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <display_client_unsubscribe>:

void display_client_unsubscribe(display_client_t * const me, env_sensor_t * const server){
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]

    for(int i =0;i<MAX_CLIENT;++i){
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e01d      	b.n	8000e0e <display_client_unsubscribe+0x4c>

		   if(server->clients[i].pObject ==  me){
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	3202      	adds	r2, #2
 8000dd8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d112      	bne.n	8000e08 <display_client_unsubscribe+0x46>
			     server->clients[i].pObject = NULL;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	3202      	adds	r2, #2
 8000de8:	2100      	movs	r1, #0
 8000dea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				   server->clients[i].fn_handler =  NULL;
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3302      	adds	r3, #2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4413      	add	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
				   server->n_client--;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	60da      	str	r2, [r3, #12]
				   return;
 8000e06:	e005      	b.n	8000e14 <display_client_unsubscribe+0x52>
    for(int i =0;i<MAX_CLIENT;++i){
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	ddde      	ble.n	8000dd2 <display_client_unsubscribe+0x10>
			 }
		}

}
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <display_client_destroy>:


void display_client_destroy(display_client_t * const me){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  printf("Client destroyed...\r\n");
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <display_client_destroy+0x1c>)
 8000e2a:	f000 fd1d 	bl	8001868 <puts>
	free(me);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fb3a 	bl	80014a8 <free>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08002418 	.word	0x08002418

08000e40 <env_sensor_init>:
#include <stdlib.h>
#include "uart.h"
#include "adc_driver.h"
#include "gpio_driver.h"

void env_sensor_init(env_sensor_t * const me){
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
   for(int i=0;i<MAX_CLIENT;i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e00f      	b.n	8000e6e <env_sensor_init+0x2e>
		 me->clients[i].pObject=NULL;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	3202      	adds	r2, #2
 8000e54:	2100      	movs	r1, #0
 8000e56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		 me->clients[i].fn_handler =NULL;
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3302      	adds	r3, #2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
   for(int i=0;i<MAX_CLIENT;i++){
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	ddec      	ble.n	8000e4e <env_sensor_init+0xe>
	 }

}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <env_sensor_create>:
env_sensor_t * env_sensor_create(void){
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
  env_sensor_t * me = (env_sensor_t *)malloc(sizeof(env_sensor_t));
 8000e88:	2060      	movs	r0, #96	@ 0x60
 8000e8a:	f000 fb05 	bl	8001498 <malloc>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	607b      	str	r3, [r7, #4]
	if( me !=NULL){
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <env_sensor_create+0x1c>
	  env_sensor_init(me);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ffd1 	bl	8000e40 <env_sensor_init>
	}
  return me;
 8000e9e:	687b      	ldr	r3, [r7, #4]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <env_sensor_get_data>:
void env_sensor_get_data(env_sensor_t * const me){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	temp_sensor_init();
 8000eb0:	f7ff fe36 	bl	8000b20 <temp_sensor_init>

   me->data.temperature = read_chip_temperature();
 8000eb4:	f7ff fe8c 	bl	8000bd0 <read_chip_temperature>
 8000eb8:	ec53 2b10 	vmov	r2, r3, d0
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fdc4 	bl	8000a4c <__aeabi_d2uiz>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
   pa1_analog_init();
 8000eca:	f7ff fddf 	bl	8000a8c <pa1_analog_init>

	 me->data.humidity    =  pa1_analog_read();
 8000ece:	f7ff fe0f 	bl	8000af0 <pa1_analog_read>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	605a      	str	r2, [r3, #4]

	 p13_button_init();
 8000ed8:	f000 f91e 	bl	8001118 <p13_button_init>
	 me->data.sprayed     = get_p13_button_state();
 8000edc:	f000 f936 	bl	800114c <get_p13_button_state>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	721a      	strb	r2, [r3, #8]

	//Notify all clients
	 env_sensor_notify(me);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f804 	bl	8000ef6 <env_sensor_notify>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <env_sensor_notify>:


void env_sensor_notify(env_sensor_t * const me){
 8000ef6:	b590      	push	{r4, r7, lr}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]

	for(int i=0;i<MAX_CLIENT;i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e01f      	b.n	8000f44 <env_sensor_notify+0x4e>
	   if(me->clients[i].pObject !=NULL && me->clients[i].fn_handler !=NULL){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	3202      	adds	r2, #2
 8000f0a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d015      	beq.n	8000f3e <env_sensor_notify+0x48>
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3302      	adds	r3, #2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00d      	beq.n	8000f3e <env_sensor_notify+0x48>
		   me->clients[i].fn_handler(me->clients[i].pObject,me->data);
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3302      	adds	r3, #2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	685c      	ldr	r4, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	3202      	adds	r2, #2
 8000f34:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3c:	47a0      	blx	r4
	for(int i=0;i<MAX_CLIENT;i++){
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b09      	cmp	r3, #9
 8000f48:	dddc      	ble.n	8000f04 <env_sensor_notify+0xe>
		 }
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd90      	pop	{r4, r7, pc}

08000f54 <env_sensor_dumplist>:


void env_sensor_dumplist(env_sensor_t * const me){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	 printf("Dumplist :  \t number of clients: %d\n\r",me->n_client);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <env_sensor_dumplist+0x70>)
 8000f64:	f000 fc18 	bl	8001798 <iprintf>

	for(int i=0;i<MAX_CLIENT;i++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e021      	b.n	8000fb2 <env_sensor_dumplist+0x5e>
	  if(me->clients[i].pObject !=NULL && me->clients[i].fn_handler !=NULL){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	3202      	adds	r2, #2
 8000f74:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d017      	beq.n	8000fac <env_sensor_dumplist+0x58>
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3302      	adds	r3, #2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4413      	add	r3, r2
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00f      	beq.n	8000fac <env_sensor_dumplist+0x58>
		   printf("\t pObect:   0x%X \t fn_handler: 0x%X\n\r",(uint32_t)me->clients[i].pObject,(uint32_t)me->clients[i].fn_handler);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	3202      	adds	r2, #2
 8000f92:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000f96:	4619      	mov	r1, r3
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <env_sensor_dumplist+0x74>)
 8000fa8:	f000 fbf6 	bl	8001798 <iprintf>
	for(int i=0;i<MAX_CLIENT;i++){
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	ddda      	ble.n	8000f6e <env_sensor_dumplist+0x1a>
			}

	}

}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08002430 	.word	0x08002430
 8000fc8:	08002458 	.word	0x08002458

08000fcc <env_sensor_destroy>:


void env_sensor_destroy(env_sensor_t * const me){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

	  //Do somthing..
	  free(me);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fa67 	bl	80014a8 <free>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <fertilizer_mixer_client_init>:

#include "fertilizer_mixer_client.h"
#include <stdlib.h>
#include "uart.h"

void fertilizer_mixer_client_init(fertilizer_mixer_client_t * const me){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	me->fn_handler = fertilizer_mixer_client_handle_new_data;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <fertilizer_mixer_client_init+0x1c>)
 8000ff0:	60da      	str	r2, [r3, #12]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	0800102d 	.word	0x0800102d

08001004 <fertilizer_mixer_client_create>:
fertilizer_mixer_client_t * fertilizer_mixer_client_create(void){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

fertilizer_mixer_client_t * me   = (fertilizer_mixer_client_t *)malloc(sizeof(fertilizer_mixer_client_t));
 800100a:	2010      	movs	r0, #16
 800100c:	f000 fa44 	bl	8001498 <malloc>
 8001010:	4603      	mov	r3, r0
 8001012:	607b      	str	r3, [r7, #4]

	if( me!=NULL){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <fertilizer_mixer_client_create+0x1c>

	  fertilizer_mixer_client_init(me);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffe2 	bl	8000fe4 <fertilizer_mixer_client_init>
	}

	return me;
 8001020:	687b      	ldr	r3, [r7, #4]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <fertilizer_mixer_client_handle_new_data>:

void fertilizer_mixer_client_handle_new_data(void * me, env_data_t data){
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	4638      	mov	r0, r7
 8001036:	e880 000e 	stmia.w	r0, {r1, r2, r3}

   ((fertilizer_mixer_client_t *)me)->data =  data;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	461c      	mov	r4, r3
 800103e:	463b      	mov	r3, r7
 8001040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001044:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  /*Process data*/
	  //Do somthing..
	  printf("fertilizer_mixer_module : \t New data :  %d %d %d \n\r",
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685a      	ldr	r2, [r3, #4]
						((fertilizer_mixer_client_t *)me)->data.temperature,
						((fertilizer_mixer_client_t *)me)->data.humidity,
						((fertilizer_mixer_client_t *)me)->data.sprayed);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7a1b      	ldrb	r3, [r3, #8]
	  printf("fertilizer_mixer_module : \t New data :  %d %d %d \n\r",
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <fertilizer_mixer_client_handle_new_data+0x38>)
 8001056:	f000 fb9f 	bl	8001798 <iprintf>

}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	bf00      	nop
 8001064:	08002480 	.word	0x08002480

08001068 <fertilizer_mixer_client_subscribe>:


void fertilizer_mixer_client_subscribe(fertilizer_mixer_client_t * const me, env_sensor_t * const server){
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]

	  for(int i=0;i<MAX_CLIENT;i++){
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e044      	b.n	8001102 <fertilizer_mixer_client_subscribe+0x9a>

		  //Check if client is already subscribed
			  if(server->clients[i].pObject ==  me){
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	3202      	adds	r2, #2
 800107e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d040      	beq.n	800110a <fertilizer_mixer_client_subscribe+0xa2>
				  return;
				}
				//Add new client
				if(server->clients[i].pObject == NULL){
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	3202      	adds	r2, #2
 800108e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d132      	bne.n	80010fc <fertilizer_mixer_client_subscribe+0x94>

				   server->n_client++;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	60da      	str	r2, [r3, #12]
					 server->clients[i].pObject =  me;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	3202      	adds	r2, #2
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
					 server->clients[i].fn_handler = me->fn_handler;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3302      	adds	r3, #2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	605a      	str	r2, [r3, #4]

					 //Remove duplicate
					for(int j= i+1; j<MAX_CLIENT;j++){
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e017      	b.n	80010f4 <fertilizer_mixer_client_subscribe+0x8c>
					   if(server->clients[j].pObject == me){
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	3202      	adds	r2, #2
 80010ca:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d10c      	bne.n	80010ee <fertilizer_mixer_client_subscribe+0x86>
						    server->clients[j].pObject = NULL;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	3202      	adds	r2, #2
 80010da:	2100      	movs	r1, #0
 80010dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
							   server->clients[j].fn_handler =  NULL;
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3302      	adds	r3, #2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
					for(int j= i+1; j<MAX_CLIENT;j++){
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	dde4      	ble.n	80010c4 <fertilizer_mixer_client_subscribe+0x5c>
						 }
					}
					return;
 80010fa:	e007      	b.n	800110c <fertilizer_mixer_client_subscribe+0xa4>
	  for(int i=0;i<MAX_CLIENT;i++){
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b09      	cmp	r3, #9
 8001106:	ddb7      	ble.n	8001078 <fertilizer_mixer_client_subscribe+0x10>
 8001108:	e000      	b.n	800110c <fertilizer_mixer_client_subscribe+0xa4>
				  return;
 800110a:	bf00      	nop
				}
		}


}
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <p13_button_init>:
#include "gpio_driver.h"
#include "stm32f4xx.h"                  // Device header

void p13_button_init(void){
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

   RCC->AHB1ENR |=(1U<<2); //Enable clock to PORTC
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <p13_button_init+0x2c>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <p13_button_init+0x2c>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6313      	str	r3, [r2, #48]	@ 0x30
	
	//Set P13 as input
	GPIOC->MODER  &= ~(0U<<26);
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <p13_button_init+0x30>)
 800112a:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <p13_button_init+0x30>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  &= ~(0U<<27);
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <p13_button_init+0x30>)
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <p13_button_init+0x30>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6013      	str	r3, [r2, #0]

}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020800 	.word	0x40020800

0800114c <get_p13_button_state>:

bool get_p13_button_state(void){
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	
	return (GPIOC->IDR & (1U<<13));
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <get_p13_button_state+0x20>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3


}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40020800 	.word	0x40020800

08001170 <main>:
#include "env_display_client.h"
#include "fertilizer_mixer_client.h"


int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0


	debug_uart_init();
 8001176:	f000 f8db 	bl	8001330 <debug_uart_init>

	//Setup server
		 env_sensor_t * sensor = env_sensor_create();
 800117a:	f7ff fe82 	bl	8000e82 <env_sensor_create>
 800117e:	60f8      	str	r0, [r7, #12]

		 //Setup CLIENT 1
		display_client_t * lcd_display = display_client_create();
 8001180:	f7ff fd96 	bl	8000cb0 <display_client_create>
 8001184:	60b8      	str	r0, [r7, #8]
	  //Subscribe to server
		display_client_subscribe(lcd_display,sensor);
 8001186:	68f9      	ldr	r1, [r7, #12]
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff fdc3 	bl	8000d14 <display_client_subscribe>

			 //Setup CLIENT 2

		 fertilizer_mixer_client_t  * fertilizer_mixer =  fertilizer_mixer_client_create();
 800118e:	f7ff ff39 	bl	8001004 <fertilizer_mixer_client_create>
 8001192:	6078      	str	r0, [r7, #4]
		 //Subscribe to server
		 fertilizer_mixer_client_subscribe(fertilizer_mixer,sensor);
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff66 	bl	8001068 <fertilizer_mixer_client_subscribe>

		 env_sensor_get_data(sensor);
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fe83 	bl	8000ea8 <env_sensor_get_data>
		 env_sensor_get_data(sensor);
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f7ff fe80 	bl	8000ea8 <env_sensor_get_data>

		  //Test 2
			display_client_unsubscribe(lcd_display,sensor);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f7ff fe09 	bl	8000dc2 <display_client_unsubscribe>
			env_sensor_get_data(sensor);
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff fe79 	bl	8000ea8 <env_sensor_get_data>
		  env_sensor_get_data(sensor);
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fe76 	bl	8000ea8 <env_sensor_get_data>

			//Test3
			 env_sensor_dumplist(sensor);
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff fec9 	bl	8000f54 <env_sensor_dumplist>

			 //Test 4
			  env_sensor_destroy(sensor);
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff ff02 	bl	8000fcc <env_sensor_destroy>
				 display_client_destroy(lcd_display);
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f7ff fe29 	bl	8000e20 <display_client_destroy>
		while(1){
 80011ce:	bf00      	nop
 80011d0:	e7fd      	b.n	80011ce <main+0x5e>

080011d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e00a      	b.n	80011fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011e4:	f3af 8000 	nop.w
 80011e8:	4601      	mov	r1, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	60ba      	str	r2, [r7, #8]
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbf0      	blt.n	80011e4 <_read+0x12>
  }

  return len;
 8001202:	687b      	ldr	r3, [r7, #4]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e009      	b.n	8001232 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	60ba      	str	r2, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f876 	bl	8001318 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbf1      	blt.n	800121e <_write+0x12>
  }
  return len;
 800123a:	687b      	ldr	r3, [r7, #4]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_close>:

int _close(int file)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800126c:	605a      	str	r2, [r3, #4]
  return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_isatty>:

int _isatty(int file)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f000 fc02 	bl	8001ae4 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20020000 	.word	0x20020000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000078 	.word	0x20000078
 8001314:	200001c8 	.word	0x200001c8

08001318 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f84f 	bl	80013c4 <uart_write>
	return ch;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <debug_uart_init>:

void debug_uart_init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <debug_uart_init+0x84>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a1e      	ldr	r2, [pc, #120]	@ (80013b4 <debug_uart_init+0x84>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <debug_uart_init+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <debug_uart_init+0x88>)
 8001346:	f023 0310 	bic.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <debug_uart_init+0x88>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <debug_uart_init+0x88>)
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	6013      	str	r3, [r2, #0]

	/*set alternate function type tp AF7(UART2_TX)*/
	GPIOA->AFR[0] |= (1U<<8);
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <debug_uart_init+0x88>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a16      	ldr	r2, [pc, #88]	@ (80013b8 <debug_uart_init+0x88>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001362:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <debug_uart_init+0x88>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <debug_uart_init+0x88>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800136e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <debug_uart_init+0x88>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <debug_uart_init+0x88>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800137a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <debug_uart_init+0x88>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <debug_uart_init+0x88>)
 8001382:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001386:	6213      	str	r3, [r2, #32]

	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <debug_uart_init+0x84>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <debug_uart_init+0x84>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40

	/*configure uart baudrate*/
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 8001394:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001398:	4808      	ldr	r0, [pc, #32]	@ (80013bc <debug_uart_init+0x8c>)
 800139a:	f000 f83f 	bl	800141c <uart_set_baudrate>

	/*configure transfer direction*/
	USART2->CR1 = CR1_TE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <debug_uart_init+0x90>)
 80013a0:	2208      	movs	r2, #8
 80013a2:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <debug_uart_init+0x90>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <debug_uart_init+0x90>)
 80013aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	00f42400 	.word	0x00f42400
 80013c0:	40004400 	.word	0x40004400

080013c4 <uart_write>:

static void uart_write(int ch)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE));
 80013cc:	bf00      	nop
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <uart_write+0x2c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f9      	beq.n	80013ce <uart_write+0xa>

	/*write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <uart_write+0x2c>)
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	6053      	str	r3, [r2, #4]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40004400 	.word	0x40004400

080013f4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	085a      	lsrs	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	441a      	add	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	b29b      	uxth	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffe3 	bl	80013f4 <compute_uart_bd>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <uart_set_baudrate+0x24>)
 8001434:	609a      	str	r2, [r3, #8]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40004400 	.word	0x40004400

08001444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001472:	f000 fb3d 	bl	8001af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff fe7b 	bl	8001170 <main>

0800147a <LoopForever>:

LoopForever:
  b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   r0, =_estack
 800147c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001488:	08002510 	.word	0x08002510
  ldr r2, =_sbss
 800148c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001490:	200001c8 	.word	0x200001c8

08001494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <malloc>:
 8001498:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <malloc+0xc>)
 800149a:	4601      	mov	r1, r0
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f000 b82d 	b.w	80014fc <_malloc_r>
 80014a2:	bf00      	nop
 80014a4:	2000000c 	.word	0x2000000c

080014a8 <free>:
 80014a8:	4b02      	ldr	r3, [pc, #8]	@ (80014b4 <free+0xc>)
 80014aa:	4601      	mov	r1, r0
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f000 bb47 	b.w	8001b40 <_free_r>
 80014b2:	bf00      	nop
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <sbrk_aligned>:
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	4e0f      	ldr	r6, [pc, #60]	@ (80014f8 <sbrk_aligned+0x40>)
 80014bc:	460c      	mov	r4, r1
 80014be:	6831      	ldr	r1, [r6, #0]
 80014c0:	4605      	mov	r5, r0
 80014c2:	b911      	cbnz	r1, 80014ca <sbrk_aligned+0x12>
 80014c4:	f000 faec 	bl	8001aa0 <_sbrk_r>
 80014c8:	6030      	str	r0, [r6, #0]
 80014ca:	4621      	mov	r1, r4
 80014cc:	4628      	mov	r0, r5
 80014ce:	f000 fae7 	bl	8001aa0 <_sbrk_r>
 80014d2:	1c43      	adds	r3, r0, #1
 80014d4:	d103      	bne.n	80014de <sbrk_aligned+0x26>
 80014d6:	f04f 34ff 	mov.w	r4, #4294967295
 80014da:	4620      	mov	r0, r4
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
 80014de:	1cc4      	adds	r4, r0, #3
 80014e0:	f024 0403 	bic.w	r4, r4, #3
 80014e4:	42a0      	cmp	r0, r4
 80014e6:	d0f8      	beq.n	80014da <sbrk_aligned+0x22>
 80014e8:	1a21      	subs	r1, r4, r0
 80014ea:	4628      	mov	r0, r5
 80014ec:	f000 fad8 	bl	8001aa0 <_sbrk_r>
 80014f0:	3001      	adds	r0, #1
 80014f2:	d1f2      	bne.n	80014da <sbrk_aligned+0x22>
 80014f4:	e7ef      	b.n	80014d6 <sbrk_aligned+0x1e>
 80014f6:	bf00      	nop
 80014f8:	2000007c 	.word	0x2000007c

080014fc <_malloc_r>:
 80014fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001500:	1ccd      	adds	r5, r1, #3
 8001502:	f025 0503 	bic.w	r5, r5, #3
 8001506:	3508      	adds	r5, #8
 8001508:	2d0c      	cmp	r5, #12
 800150a:	bf38      	it	cc
 800150c:	250c      	movcc	r5, #12
 800150e:	2d00      	cmp	r5, #0
 8001510:	4606      	mov	r6, r0
 8001512:	db01      	blt.n	8001518 <_malloc_r+0x1c>
 8001514:	42a9      	cmp	r1, r5
 8001516:	d904      	bls.n	8001522 <_malloc_r+0x26>
 8001518:	230c      	movs	r3, #12
 800151a:	6033      	str	r3, [r6, #0]
 800151c:	2000      	movs	r0, #0
 800151e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80015f8 <_malloc_r+0xfc>
 8001526:	f000 f869 	bl	80015fc <__malloc_lock>
 800152a:	f8d8 3000 	ldr.w	r3, [r8]
 800152e:	461c      	mov	r4, r3
 8001530:	bb44      	cbnz	r4, 8001584 <_malloc_r+0x88>
 8001532:	4629      	mov	r1, r5
 8001534:	4630      	mov	r0, r6
 8001536:	f7ff ffbf 	bl	80014b8 <sbrk_aligned>
 800153a:	1c43      	adds	r3, r0, #1
 800153c:	4604      	mov	r4, r0
 800153e:	d158      	bne.n	80015f2 <_malloc_r+0xf6>
 8001540:	f8d8 4000 	ldr.w	r4, [r8]
 8001544:	4627      	mov	r7, r4
 8001546:	2f00      	cmp	r7, #0
 8001548:	d143      	bne.n	80015d2 <_malloc_r+0xd6>
 800154a:	2c00      	cmp	r4, #0
 800154c:	d04b      	beq.n	80015e6 <_malloc_r+0xea>
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	4639      	mov	r1, r7
 8001552:	4630      	mov	r0, r6
 8001554:	eb04 0903 	add.w	r9, r4, r3
 8001558:	f000 faa2 	bl	8001aa0 <_sbrk_r>
 800155c:	4581      	cmp	r9, r0
 800155e:	d142      	bne.n	80015e6 <_malloc_r+0xea>
 8001560:	6821      	ldr	r1, [r4, #0]
 8001562:	1a6d      	subs	r5, r5, r1
 8001564:	4629      	mov	r1, r5
 8001566:	4630      	mov	r0, r6
 8001568:	f7ff ffa6 	bl	80014b8 <sbrk_aligned>
 800156c:	3001      	adds	r0, #1
 800156e:	d03a      	beq.n	80015e6 <_malloc_r+0xea>
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	442b      	add	r3, r5
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	f8d8 3000 	ldr.w	r3, [r8]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	bb62      	cbnz	r2, 80015d8 <_malloc_r+0xdc>
 800157e:	f8c8 7000 	str.w	r7, [r8]
 8001582:	e00f      	b.n	80015a4 <_malloc_r+0xa8>
 8001584:	6822      	ldr	r2, [r4, #0]
 8001586:	1b52      	subs	r2, r2, r5
 8001588:	d420      	bmi.n	80015cc <_malloc_r+0xd0>
 800158a:	2a0b      	cmp	r2, #11
 800158c:	d917      	bls.n	80015be <_malloc_r+0xc2>
 800158e:	1961      	adds	r1, r4, r5
 8001590:	42a3      	cmp	r3, r4
 8001592:	6025      	str	r5, [r4, #0]
 8001594:	bf18      	it	ne
 8001596:	6059      	strne	r1, [r3, #4]
 8001598:	6863      	ldr	r3, [r4, #4]
 800159a:	bf08      	it	eq
 800159c:	f8c8 1000 	streq.w	r1, [r8]
 80015a0:	5162      	str	r2, [r4, r5]
 80015a2:	604b      	str	r3, [r1, #4]
 80015a4:	4630      	mov	r0, r6
 80015a6:	f000 f82f 	bl	8001608 <__malloc_unlock>
 80015aa:	f104 000b 	add.w	r0, r4, #11
 80015ae:	1d23      	adds	r3, r4, #4
 80015b0:	f020 0007 	bic.w	r0, r0, #7
 80015b4:	1ac2      	subs	r2, r0, r3
 80015b6:	bf1c      	itt	ne
 80015b8:	1a1b      	subne	r3, r3, r0
 80015ba:	50a3      	strne	r3, [r4, r2]
 80015bc:	e7af      	b.n	800151e <_malloc_r+0x22>
 80015be:	6862      	ldr	r2, [r4, #4]
 80015c0:	42a3      	cmp	r3, r4
 80015c2:	bf0c      	ite	eq
 80015c4:	f8c8 2000 	streq.w	r2, [r8]
 80015c8:	605a      	strne	r2, [r3, #4]
 80015ca:	e7eb      	b.n	80015a4 <_malloc_r+0xa8>
 80015cc:	4623      	mov	r3, r4
 80015ce:	6864      	ldr	r4, [r4, #4]
 80015d0:	e7ae      	b.n	8001530 <_malloc_r+0x34>
 80015d2:	463c      	mov	r4, r7
 80015d4:	687f      	ldr	r7, [r7, #4]
 80015d6:	e7b6      	b.n	8001546 <_malloc_r+0x4a>
 80015d8:	461a      	mov	r2, r3
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	42a3      	cmp	r3, r4
 80015de:	d1fb      	bne.n	80015d8 <_malloc_r+0xdc>
 80015e0:	2300      	movs	r3, #0
 80015e2:	6053      	str	r3, [r2, #4]
 80015e4:	e7de      	b.n	80015a4 <_malloc_r+0xa8>
 80015e6:	230c      	movs	r3, #12
 80015e8:	6033      	str	r3, [r6, #0]
 80015ea:	4630      	mov	r0, r6
 80015ec:	f000 f80c 	bl	8001608 <__malloc_unlock>
 80015f0:	e794      	b.n	800151c <_malloc_r+0x20>
 80015f2:	6005      	str	r5, [r0, #0]
 80015f4:	e7d6      	b.n	80015a4 <_malloc_r+0xa8>
 80015f6:	bf00      	nop
 80015f8:	20000080 	.word	0x20000080

080015fc <__malloc_lock>:
 80015fc:	4801      	ldr	r0, [pc, #4]	@ (8001604 <__malloc_lock+0x8>)
 80015fe:	f000 ba9c 	b.w	8001b3a <__retarget_lock_acquire_recursive>
 8001602:	bf00      	nop
 8001604:	200001c4 	.word	0x200001c4

08001608 <__malloc_unlock>:
 8001608:	4801      	ldr	r0, [pc, #4]	@ (8001610 <__malloc_unlock+0x8>)
 800160a:	f000 ba97 	b.w	8001b3c <__retarget_lock_release_recursive>
 800160e:	bf00      	nop
 8001610:	200001c4 	.word	0x200001c4

08001614 <std>:
 8001614:	2300      	movs	r3, #0
 8001616:	b510      	push	{r4, lr}
 8001618:	4604      	mov	r4, r0
 800161a:	e9c0 3300 	strd	r3, r3, [r0]
 800161e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001622:	6083      	str	r3, [r0, #8]
 8001624:	8181      	strh	r1, [r0, #12]
 8001626:	6643      	str	r3, [r0, #100]	@ 0x64
 8001628:	81c2      	strh	r2, [r0, #14]
 800162a:	6183      	str	r3, [r0, #24]
 800162c:	4619      	mov	r1, r3
 800162e:	2208      	movs	r2, #8
 8001630:	305c      	adds	r0, #92	@ 0x5c
 8001632:	f000 f9f9 	bl	8001a28 <memset>
 8001636:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <std+0x58>)
 8001638:	6263      	str	r3, [r4, #36]	@ 0x24
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <std+0x5c>)
 800163c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <std+0x60>)
 8001640:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <std+0x64>)
 8001644:	6323      	str	r3, [r4, #48]	@ 0x30
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <std+0x68>)
 8001648:	6224      	str	r4, [r4, #32]
 800164a:	429c      	cmp	r4, r3
 800164c:	d006      	beq.n	800165c <std+0x48>
 800164e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001652:	4294      	cmp	r4, r2
 8001654:	d002      	beq.n	800165c <std+0x48>
 8001656:	33d0      	adds	r3, #208	@ 0xd0
 8001658:	429c      	cmp	r4, r3
 800165a:	d105      	bne.n	8001668 <std+0x54>
 800165c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001664:	f000 ba68 	b.w	8001b38 <__retarget_lock_init_recursive>
 8001668:	bd10      	pop	{r4, pc}
 800166a:	bf00      	nop
 800166c:	08001879 	.word	0x08001879
 8001670:	0800189b 	.word	0x0800189b
 8001674:	080018d3 	.word	0x080018d3
 8001678:	080018f7 	.word	0x080018f7
 800167c:	20000084 	.word	0x20000084

08001680 <stdio_exit_handler>:
 8001680:	4a02      	ldr	r2, [pc, #8]	@ (800168c <stdio_exit_handler+0xc>)
 8001682:	4903      	ldr	r1, [pc, #12]	@ (8001690 <stdio_exit_handler+0x10>)
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <stdio_exit_handler+0x14>)
 8001686:	f000 b869 	b.w	800175c <_fwalk_sglue>
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000
 8001690:	0800227d 	.word	0x0800227d
 8001694:	20000010 	.word	0x20000010

08001698 <cleanup_stdio>:
 8001698:	6841      	ldr	r1, [r0, #4]
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <cleanup_stdio+0x34>)
 800169c:	4299      	cmp	r1, r3
 800169e:	b510      	push	{r4, lr}
 80016a0:	4604      	mov	r4, r0
 80016a2:	d001      	beq.n	80016a8 <cleanup_stdio+0x10>
 80016a4:	f000 fdea 	bl	800227c <_fflush_r>
 80016a8:	68a1      	ldr	r1, [r4, #8]
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <cleanup_stdio+0x38>)
 80016ac:	4299      	cmp	r1, r3
 80016ae:	d002      	beq.n	80016b6 <cleanup_stdio+0x1e>
 80016b0:	4620      	mov	r0, r4
 80016b2:	f000 fde3 	bl	800227c <_fflush_r>
 80016b6:	68e1      	ldr	r1, [r4, #12]
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <cleanup_stdio+0x3c>)
 80016ba:	4299      	cmp	r1, r3
 80016bc:	d004      	beq.n	80016c8 <cleanup_stdio+0x30>
 80016be:	4620      	mov	r0, r4
 80016c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016c4:	f000 bdda 	b.w	800227c <_fflush_r>
 80016c8:	bd10      	pop	{r4, pc}
 80016ca:	bf00      	nop
 80016cc:	20000084 	.word	0x20000084
 80016d0:	200000ec 	.word	0x200000ec
 80016d4:	20000154 	.word	0x20000154

080016d8 <global_stdio_init.part.0>:
 80016d8:	b510      	push	{r4, lr}
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <global_stdio_init.part.0+0x30>)
 80016dc:	4c0b      	ldr	r4, [pc, #44]	@ (800170c <global_stdio_init.part.0+0x34>)
 80016de:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <global_stdio_init.part.0+0x38>)
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	4620      	mov	r0, r4
 80016e4:	2200      	movs	r2, #0
 80016e6:	2104      	movs	r1, #4
 80016e8:	f7ff ff94 	bl	8001614 <std>
 80016ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80016f0:	2201      	movs	r2, #1
 80016f2:	2109      	movs	r1, #9
 80016f4:	f7ff ff8e 	bl	8001614 <std>
 80016f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80016fc:	2202      	movs	r2, #2
 80016fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001702:	2112      	movs	r1, #18
 8001704:	f7ff bf86 	b.w	8001614 <std>
 8001708:	200001bc 	.word	0x200001bc
 800170c:	20000084 	.word	0x20000084
 8001710:	08001681 	.word	0x08001681

08001714 <__sfp_lock_acquire>:
 8001714:	4801      	ldr	r0, [pc, #4]	@ (800171c <__sfp_lock_acquire+0x8>)
 8001716:	f000 ba10 	b.w	8001b3a <__retarget_lock_acquire_recursive>
 800171a:	bf00      	nop
 800171c:	200001c5 	.word	0x200001c5

08001720 <__sfp_lock_release>:
 8001720:	4801      	ldr	r0, [pc, #4]	@ (8001728 <__sfp_lock_release+0x8>)
 8001722:	f000 ba0b 	b.w	8001b3c <__retarget_lock_release_recursive>
 8001726:	bf00      	nop
 8001728:	200001c5 	.word	0x200001c5

0800172c <__sinit>:
 800172c:	b510      	push	{r4, lr}
 800172e:	4604      	mov	r4, r0
 8001730:	f7ff fff0 	bl	8001714 <__sfp_lock_acquire>
 8001734:	6a23      	ldr	r3, [r4, #32]
 8001736:	b11b      	cbz	r3, 8001740 <__sinit+0x14>
 8001738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800173c:	f7ff bff0 	b.w	8001720 <__sfp_lock_release>
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <__sinit+0x28>)
 8001742:	6223      	str	r3, [r4, #32]
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__sinit+0x2c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f5      	bne.n	8001738 <__sinit+0xc>
 800174c:	f7ff ffc4 	bl	80016d8 <global_stdio_init.part.0>
 8001750:	e7f2      	b.n	8001738 <__sinit+0xc>
 8001752:	bf00      	nop
 8001754:	08001699 	.word	0x08001699
 8001758:	200001bc 	.word	0x200001bc

0800175c <_fwalk_sglue>:
 800175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001760:	4607      	mov	r7, r0
 8001762:	4688      	mov	r8, r1
 8001764:	4614      	mov	r4, r2
 8001766:	2600      	movs	r6, #0
 8001768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800176c:	f1b9 0901 	subs.w	r9, r9, #1
 8001770:	d505      	bpl.n	800177e <_fwalk_sglue+0x22>
 8001772:	6824      	ldr	r4, [r4, #0]
 8001774:	2c00      	cmp	r4, #0
 8001776:	d1f7      	bne.n	8001768 <_fwalk_sglue+0xc>
 8001778:	4630      	mov	r0, r6
 800177a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800177e:	89ab      	ldrh	r3, [r5, #12]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d907      	bls.n	8001794 <_fwalk_sglue+0x38>
 8001784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001788:	3301      	adds	r3, #1
 800178a:	d003      	beq.n	8001794 <_fwalk_sglue+0x38>
 800178c:	4629      	mov	r1, r5
 800178e:	4638      	mov	r0, r7
 8001790:	47c0      	blx	r8
 8001792:	4306      	orrs	r6, r0
 8001794:	3568      	adds	r5, #104	@ 0x68
 8001796:	e7e9      	b.n	800176c <_fwalk_sglue+0x10>

08001798 <iprintf>:
 8001798:	b40f      	push	{r0, r1, r2, r3}
 800179a:	b507      	push	{r0, r1, r2, lr}
 800179c:	4906      	ldr	r1, [pc, #24]	@ (80017b8 <iprintf+0x20>)
 800179e:	ab04      	add	r3, sp, #16
 80017a0:	6808      	ldr	r0, [r1, #0]
 80017a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80017a6:	6881      	ldr	r1, [r0, #8]
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	f000 fa3d 	bl	8001c28 <_vfiprintf_r>
 80017ae:	b003      	add	sp, #12
 80017b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017b4:	b004      	add	sp, #16
 80017b6:	4770      	bx	lr
 80017b8:	2000000c 	.word	0x2000000c

080017bc <_puts_r>:
 80017bc:	6a03      	ldr	r3, [r0, #32]
 80017be:	b570      	push	{r4, r5, r6, lr}
 80017c0:	6884      	ldr	r4, [r0, #8]
 80017c2:	4605      	mov	r5, r0
 80017c4:	460e      	mov	r6, r1
 80017c6:	b90b      	cbnz	r3, 80017cc <_puts_r+0x10>
 80017c8:	f7ff ffb0 	bl	800172c <__sinit>
 80017cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017ce:	07db      	lsls	r3, r3, #31
 80017d0:	d405      	bmi.n	80017de <_puts_r+0x22>
 80017d2:	89a3      	ldrh	r3, [r4, #12]
 80017d4:	0598      	lsls	r0, r3, #22
 80017d6:	d402      	bmi.n	80017de <_puts_r+0x22>
 80017d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017da:	f000 f9ae 	bl	8001b3a <__retarget_lock_acquire_recursive>
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	0719      	lsls	r1, r3, #28
 80017e2:	d502      	bpl.n	80017ea <_puts_r+0x2e>
 80017e4:	6923      	ldr	r3, [r4, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d135      	bne.n	8001856 <_puts_r+0x9a>
 80017ea:	4621      	mov	r1, r4
 80017ec:	4628      	mov	r0, r5
 80017ee:	f000 f8c5 	bl	800197c <__swsetup_r>
 80017f2:	b380      	cbz	r0, 8001856 <_puts_r+0x9a>
 80017f4:	f04f 35ff 	mov.w	r5, #4294967295
 80017f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017fa:	07da      	lsls	r2, r3, #31
 80017fc:	d405      	bmi.n	800180a <_puts_r+0x4e>
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	059b      	lsls	r3, r3, #22
 8001802:	d402      	bmi.n	800180a <_puts_r+0x4e>
 8001804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001806:	f000 f999 	bl	8001b3c <__retarget_lock_release_recursive>
 800180a:	4628      	mov	r0, r5
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	2b00      	cmp	r3, #0
 8001810:	da04      	bge.n	800181c <_puts_r+0x60>
 8001812:	69a2      	ldr	r2, [r4, #24]
 8001814:	429a      	cmp	r2, r3
 8001816:	dc17      	bgt.n	8001848 <_puts_r+0x8c>
 8001818:	290a      	cmp	r1, #10
 800181a:	d015      	beq.n	8001848 <_puts_r+0x8c>
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	6022      	str	r2, [r4, #0]
 8001822:	7019      	strb	r1, [r3, #0]
 8001824:	68a3      	ldr	r3, [r4, #8]
 8001826:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800182a:	3b01      	subs	r3, #1
 800182c:	60a3      	str	r3, [r4, #8]
 800182e:	2900      	cmp	r1, #0
 8001830:	d1ed      	bne.n	800180e <_puts_r+0x52>
 8001832:	2b00      	cmp	r3, #0
 8001834:	da11      	bge.n	800185a <_puts_r+0x9e>
 8001836:	4622      	mov	r2, r4
 8001838:	210a      	movs	r1, #10
 800183a:	4628      	mov	r0, r5
 800183c:	f000 f85f 	bl	80018fe <__swbuf_r>
 8001840:	3001      	adds	r0, #1
 8001842:	d0d7      	beq.n	80017f4 <_puts_r+0x38>
 8001844:	250a      	movs	r5, #10
 8001846:	e7d7      	b.n	80017f8 <_puts_r+0x3c>
 8001848:	4622      	mov	r2, r4
 800184a:	4628      	mov	r0, r5
 800184c:	f000 f857 	bl	80018fe <__swbuf_r>
 8001850:	3001      	adds	r0, #1
 8001852:	d1e7      	bne.n	8001824 <_puts_r+0x68>
 8001854:	e7ce      	b.n	80017f4 <_puts_r+0x38>
 8001856:	3e01      	subs	r6, #1
 8001858:	e7e4      	b.n	8001824 <_puts_r+0x68>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	6022      	str	r2, [r4, #0]
 8001860:	220a      	movs	r2, #10
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e7ee      	b.n	8001844 <_puts_r+0x88>
	...

08001868 <puts>:
 8001868:	4b02      	ldr	r3, [pc, #8]	@ (8001874 <puts+0xc>)
 800186a:	4601      	mov	r1, r0
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7ff bfa5 	b.w	80017bc <_puts_r>
 8001872:	bf00      	nop
 8001874:	2000000c 	.word	0x2000000c

08001878 <__sread>:
 8001878:	b510      	push	{r4, lr}
 800187a:	460c      	mov	r4, r1
 800187c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001880:	f000 f8fc 	bl	8001a7c <_read_r>
 8001884:	2800      	cmp	r0, #0
 8001886:	bfab      	itete	ge
 8001888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800188a:	89a3      	ldrhlt	r3, [r4, #12]
 800188c:	181b      	addge	r3, r3, r0
 800188e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001892:	bfac      	ite	ge
 8001894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001896:	81a3      	strhlt	r3, [r4, #12]
 8001898:	bd10      	pop	{r4, pc}

0800189a <__swrite>:
 800189a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800189e:	461f      	mov	r7, r3
 80018a0:	898b      	ldrh	r3, [r1, #12]
 80018a2:	05db      	lsls	r3, r3, #23
 80018a4:	4605      	mov	r5, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	4616      	mov	r6, r2
 80018aa:	d505      	bpl.n	80018b8 <__swrite+0x1e>
 80018ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b0:	2302      	movs	r3, #2
 80018b2:	2200      	movs	r2, #0
 80018b4:	f000 f8d0 	bl	8001a58 <_lseek_r>
 80018b8:	89a3      	ldrh	r3, [r4, #12]
 80018ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018c2:	81a3      	strh	r3, [r4, #12]
 80018c4:	4632      	mov	r2, r6
 80018c6:	463b      	mov	r3, r7
 80018c8:	4628      	mov	r0, r5
 80018ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018ce:	f000 b8f7 	b.w	8001ac0 <_write_r>

080018d2 <__sseek>:
 80018d2:	b510      	push	{r4, lr}
 80018d4:	460c      	mov	r4, r1
 80018d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018da:	f000 f8bd 	bl	8001a58 <_lseek_r>
 80018de:	1c43      	adds	r3, r0, #1
 80018e0:	89a3      	ldrh	r3, [r4, #12]
 80018e2:	bf15      	itete	ne
 80018e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018ee:	81a3      	strheq	r3, [r4, #12]
 80018f0:	bf18      	it	ne
 80018f2:	81a3      	strhne	r3, [r4, #12]
 80018f4:	bd10      	pop	{r4, pc}

080018f6 <__sclose>:
 80018f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018fa:	f000 b89d 	b.w	8001a38 <_close_r>

080018fe <__swbuf_r>:
 80018fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001900:	460e      	mov	r6, r1
 8001902:	4614      	mov	r4, r2
 8001904:	4605      	mov	r5, r0
 8001906:	b118      	cbz	r0, 8001910 <__swbuf_r+0x12>
 8001908:	6a03      	ldr	r3, [r0, #32]
 800190a:	b90b      	cbnz	r3, 8001910 <__swbuf_r+0x12>
 800190c:	f7ff ff0e 	bl	800172c <__sinit>
 8001910:	69a3      	ldr	r3, [r4, #24]
 8001912:	60a3      	str	r3, [r4, #8]
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	071a      	lsls	r2, r3, #28
 8001918:	d501      	bpl.n	800191e <__swbuf_r+0x20>
 800191a:	6923      	ldr	r3, [r4, #16]
 800191c:	b943      	cbnz	r3, 8001930 <__swbuf_r+0x32>
 800191e:	4621      	mov	r1, r4
 8001920:	4628      	mov	r0, r5
 8001922:	f000 f82b 	bl	800197c <__swsetup_r>
 8001926:	b118      	cbz	r0, 8001930 <__swbuf_r+0x32>
 8001928:	f04f 37ff 	mov.w	r7, #4294967295
 800192c:	4638      	mov	r0, r7
 800192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	6922      	ldr	r2, [r4, #16]
 8001934:	1a98      	subs	r0, r3, r2
 8001936:	6963      	ldr	r3, [r4, #20]
 8001938:	b2f6      	uxtb	r6, r6
 800193a:	4283      	cmp	r3, r0
 800193c:	4637      	mov	r7, r6
 800193e:	dc05      	bgt.n	800194c <__swbuf_r+0x4e>
 8001940:	4621      	mov	r1, r4
 8001942:	4628      	mov	r0, r5
 8001944:	f000 fc9a 	bl	800227c <_fflush_r>
 8001948:	2800      	cmp	r0, #0
 800194a:	d1ed      	bne.n	8001928 <__swbuf_r+0x2a>
 800194c:	68a3      	ldr	r3, [r4, #8]
 800194e:	3b01      	subs	r3, #1
 8001950:	60a3      	str	r3, [r4, #8]
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	6022      	str	r2, [r4, #0]
 8001958:	701e      	strb	r6, [r3, #0]
 800195a:	6962      	ldr	r2, [r4, #20]
 800195c:	1c43      	adds	r3, r0, #1
 800195e:	429a      	cmp	r2, r3
 8001960:	d004      	beq.n	800196c <__swbuf_r+0x6e>
 8001962:	89a3      	ldrh	r3, [r4, #12]
 8001964:	07db      	lsls	r3, r3, #31
 8001966:	d5e1      	bpl.n	800192c <__swbuf_r+0x2e>
 8001968:	2e0a      	cmp	r6, #10
 800196a:	d1df      	bne.n	800192c <__swbuf_r+0x2e>
 800196c:	4621      	mov	r1, r4
 800196e:	4628      	mov	r0, r5
 8001970:	f000 fc84 	bl	800227c <_fflush_r>
 8001974:	2800      	cmp	r0, #0
 8001976:	d0d9      	beq.n	800192c <__swbuf_r+0x2e>
 8001978:	e7d6      	b.n	8001928 <__swbuf_r+0x2a>
	...

0800197c <__swsetup_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <__swsetup_r+0xa8>)
 8001980:	4605      	mov	r5, r0
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	460c      	mov	r4, r1
 8001986:	b118      	cbz	r0, 8001990 <__swsetup_r+0x14>
 8001988:	6a03      	ldr	r3, [r0, #32]
 800198a:	b90b      	cbnz	r3, 8001990 <__swsetup_r+0x14>
 800198c:	f7ff fece 	bl	800172c <__sinit>
 8001990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001994:	0719      	lsls	r1, r3, #28
 8001996:	d422      	bmi.n	80019de <__swsetup_r+0x62>
 8001998:	06da      	lsls	r2, r3, #27
 800199a:	d407      	bmi.n	80019ac <__swsetup_r+0x30>
 800199c:	2209      	movs	r2, #9
 800199e:	602a      	str	r2, [r5, #0]
 80019a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a4:	81a3      	strh	r3, [r4, #12]
 80019a6:	f04f 30ff 	mov.w	r0, #4294967295
 80019aa:	e033      	b.n	8001a14 <__swsetup_r+0x98>
 80019ac:	0758      	lsls	r0, r3, #29
 80019ae:	d512      	bpl.n	80019d6 <__swsetup_r+0x5a>
 80019b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019b2:	b141      	cbz	r1, 80019c6 <__swsetup_r+0x4a>
 80019b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019b8:	4299      	cmp	r1, r3
 80019ba:	d002      	beq.n	80019c2 <__swsetup_r+0x46>
 80019bc:	4628      	mov	r0, r5
 80019be:	f000 f8bf 	bl	8001b40 <_free_r>
 80019c2:	2300      	movs	r3, #0
 80019c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80019c6:	89a3      	ldrh	r3, [r4, #12]
 80019c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80019cc:	81a3      	strh	r3, [r4, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	6063      	str	r3, [r4, #4]
 80019d2:	6923      	ldr	r3, [r4, #16]
 80019d4:	6023      	str	r3, [r4, #0]
 80019d6:	89a3      	ldrh	r3, [r4, #12]
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	81a3      	strh	r3, [r4, #12]
 80019de:	6923      	ldr	r3, [r4, #16]
 80019e0:	b94b      	cbnz	r3, 80019f6 <__swsetup_r+0x7a>
 80019e2:	89a3      	ldrh	r3, [r4, #12]
 80019e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019ec:	d003      	beq.n	80019f6 <__swsetup_r+0x7a>
 80019ee:	4621      	mov	r1, r4
 80019f0:	4628      	mov	r0, r5
 80019f2:	f000 fc91 	bl	8002318 <__smakebuf_r>
 80019f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019fa:	f013 0201 	ands.w	r2, r3, #1
 80019fe:	d00a      	beq.n	8001a16 <__swsetup_r+0x9a>
 8001a00:	2200      	movs	r2, #0
 8001a02:	60a2      	str	r2, [r4, #8]
 8001a04:	6962      	ldr	r2, [r4, #20]
 8001a06:	4252      	negs	r2, r2
 8001a08:	61a2      	str	r2, [r4, #24]
 8001a0a:	6922      	ldr	r2, [r4, #16]
 8001a0c:	b942      	cbnz	r2, 8001a20 <__swsetup_r+0xa4>
 8001a0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a12:	d1c5      	bne.n	80019a0 <__swsetup_r+0x24>
 8001a14:	bd38      	pop	{r3, r4, r5, pc}
 8001a16:	0799      	lsls	r1, r3, #30
 8001a18:	bf58      	it	pl
 8001a1a:	6962      	ldrpl	r2, [r4, #20]
 8001a1c:	60a2      	str	r2, [r4, #8]
 8001a1e:	e7f4      	b.n	8001a0a <__swsetup_r+0x8e>
 8001a20:	2000      	movs	r0, #0
 8001a22:	e7f7      	b.n	8001a14 <__swsetup_r+0x98>
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <memset>:
 8001a28:	4402      	add	r2, r0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <memset+0xa>
 8001a30:	4770      	bx	lr
 8001a32:	f803 1b01 	strb.w	r1, [r3], #1
 8001a36:	e7f9      	b.n	8001a2c <memset+0x4>

08001a38 <_close_r>:
 8001a38:	b538      	push	{r3, r4, r5, lr}
 8001a3a:	4d06      	ldr	r5, [pc, #24]	@ (8001a54 <_close_r+0x1c>)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4604      	mov	r4, r0
 8001a40:	4608      	mov	r0, r1
 8001a42:	602b      	str	r3, [r5, #0]
 8001a44:	f7ff fbfe 	bl	8001244 <_close>
 8001a48:	1c43      	adds	r3, r0, #1
 8001a4a:	d102      	bne.n	8001a52 <_close_r+0x1a>
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	b103      	cbz	r3, 8001a52 <_close_r+0x1a>
 8001a50:	6023      	str	r3, [r4, #0]
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	200001c0 	.word	0x200001c0

08001a58 <_lseek_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	4d07      	ldr	r5, [pc, #28]	@ (8001a78 <_lseek_r+0x20>)
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	4608      	mov	r0, r1
 8001a60:	4611      	mov	r1, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7ff fc13 	bl	8001292 <_lseek>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d102      	bne.n	8001a76 <_lseek_r+0x1e>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	b103      	cbz	r3, 8001a76 <_lseek_r+0x1e>
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	200001c0 	.word	0x200001c0

08001a7c <_read_r>:
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4d07      	ldr	r5, [pc, #28]	@ (8001a9c <_read_r+0x20>)
 8001a80:	4604      	mov	r4, r0
 8001a82:	4608      	mov	r0, r1
 8001a84:	4611      	mov	r1, r2
 8001a86:	2200      	movs	r2, #0
 8001a88:	602a      	str	r2, [r5, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f7ff fba1 	bl	80011d2 <_read>
 8001a90:	1c43      	adds	r3, r0, #1
 8001a92:	d102      	bne.n	8001a9a <_read_r+0x1e>
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	b103      	cbz	r3, 8001a9a <_read_r+0x1e>
 8001a98:	6023      	str	r3, [r4, #0]
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
 8001a9c:	200001c0 	.word	0x200001c0

08001aa0 <_sbrk_r>:
 8001aa0:	b538      	push	{r3, r4, r5, lr}
 8001aa2:	4d06      	ldr	r5, [pc, #24]	@ (8001abc <_sbrk_r+0x1c>)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	602b      	str	r3, [r5, #0]
 8001aac:	f7ff fbfe 	bl	80012ac <_sbrk>
 8001ab0:	1c43      	adds	r3, r0, #1
 8001ab2:	d102      	bne.n	8001aba <_sbrk_r+0x1a>
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	b103      	cbz	r3, 8001aba <_sbrk_r+0x1a>
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
 8001abc:	200001c0 	.word	0x200001c0

08001ac0 <_write_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4d07      	ldr	r5, [pc, #28]	@ (8001ae0 <_write_r+0x20>)
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4611      	mov	r1, r2
 8001aca:	2200      	movs	r2, #0
 8001acc:	602a      	str	r2, [r5, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f7ff fb9c 	bl	800120c <_write>
 8001ad4:	1c43      	adds	r3, r0, #1
 8001ad6:	d102      	bne.n	8001ade <_write_r+0x1e>
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	b103      	cbz	r3, 8001ade <_write_r+0x1e>
 8001adc:	6023      	str	r3, [r4, #0]
 8001ade:	bd38      	pop	{r3, r4, r5, pc}
 8001ae0:	200001c0 	.word	0x200001c0

08001ae4 <__errno>:
 8001ae4:	4b01      	ldr	r3, [pc, #4]	@ (8001aec <__errno+0x8>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000000c 	.word	0x2000000c

08001af0 <__libc_init_array>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	4d0d      	ldr	r5, [pc, #52]	@ (8001b28 <__libc_init_array+0x38>)
 8001af4:	4c0d      	ldr	r4, [pc, #52]	@ (8001b2c <__libc_init_array+0x3c>)
 8001af6:	1b64      	subs	r4, r4, r5
 8001af8:	10a4      	asrs	r4, r4, #2
 8001afa:	2600      	movs	r6, #0
 8001afc:	42a6      	cmp	r6, r4
 8001afe:	d109      	bne.n	8001b14 <__libc_init_array+0x24>
 8001b00:	4d0b      	ldr	r5, [pc, #44]	@ (8001b30 <__libc_init_array+0x40>)
 8001b02:	4c0c      	ldr	r4, [pc, #48]	@ (8001b34 <__libc_init_array+0x44>)
 8001b04:	f000 fc66 	bl	80023d4 <_init>
 8001b08:	1b64      	subs	r4, r4, r5
 8001b0a:	10a4      	asrs	r4, r4, #2
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	42a6      	cmp	r6, r4
 8001b10:	d105      	bne.n	8001b1e <__libc_init_array+0x2e>
 8001b12:	bd70      	pop	{r4, r5, r6, pc}
 8001b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b18:	4798      	blx	r3
 8001b1a:	3601      	adds	r6, #1
 8001b1c:	e7ee      	b.n	8001afc <__libc_init_array+0xc>
 8001b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b22:	4798      	blx	r3
 8001b24:	3601      	adds	r6, #1
 8001b26:	e7f2      	b.n	8001b0e <__libc_init_array+0x1e>
 8001b28:	08002508 	.word	0x08002508
 8001b2c:	08002508 	.word	0x08002508
 8001b30:	08002508 	.word	0x08002508
 8001b34:	0800250c 	.word	0x0800250c

08001b38 <__retarget_lock_init_recursive>:
 8001b38:	4770      	bx	lr

08001b3a <__retarget_lock_acquire_recursive>:
 8001b3a:	4770      	bx	lr

08001b3c <__retarget_lock_release_recursive>:
 8001b3c:	4770      	bx	lr
	...

08001b40 <_free_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4605      	mov	r5, r0
 8001b44:	2900      	cmp	r1, #0
 8001b46:	d041      	beq.n	8001bcc <_free_r+0x8c>
 8001b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b4c:	1f0c      	subs	r4, r1, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bfb8      	it	lt
 8001b52:	18e4      	addlt	r4, r4, r3
 8001b54:	f7ff fd52 	bl	80015fc <__malloc_lock>
 8001b58:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd0 <_free_r+0x90>)
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	b933      	cbnz	r3, 8001b6c <_free_r+0x2c>
 8001b5e:	6063      	str	r3, [r4, #4]
 8001b60:	6014      	str	r4, [r2, #0]
 8001b62:	4628      	mov	r0, r5
 8001b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b68:	f7ff bd4e 	b.w	8001608 <__malloc_unlock>
 8001b6c:	42a3      	cmp	r3, r4
 8001b6e:	d908      	bls.n	8001b82 <_free_r+0x42>
 8001b70:	6820      	ldr	r0, [r4, #0]
 8001b72:	1821      	adds	r1, r4, r0
 8001b74:	428b      	cmp	r3, r1
 8001b76:	bf01      	itttt	eq
 8001b78:	6819      	ldreq	r1, [r3, #0]
 8001b7a:	685b      	ldreq	r3, [r3, #4]
 8001b7c:	1809      	addeq	r1, r1, r0
 8001b7e:	6021      	streq	r1, [r4, #0]
 8001b80:	e7ed      	b.n	8001b5e <_free_r+0x1e>
 8001b82:	461a      	mov	r2, r3
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	b10b      	cbz	r3, 8001b8c <_free_r+0x4c>
 8001b88:	42a3      	cmp	r3, r4
 8001b8a:	d9fa      	bls.n	8001b82 <_free_r+0x42>
 8001b8c:	6811      	ldr	r1, [r2, #0]
 8001b8e:	1850      	adds	r0, r2, r1
 8001b90:	42a0      	cmp	r0, r4
 8001b92:	d10b      	bne.n	8001bac <_free_r+0x6c>
 8001b94:	6820      	ldr	r0, [r4, #0]
 8001b96:	4401      	add	r1, r0
 8001b98:	1850      	adds	r0, r2, r1
 8001b9a:	4283      	cmp	r3, r0
 8001b9c:	6011      	str	r1, [r2, #0]
 8001b9e:	d1e0      	bne.n	8001b62 <_free_r+0x22>
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	6053      	str	r3, [r2, #4]
 8001ba6:	4408      	add	r0, r1
 8001ba8:	6010      	str	r0, [r2, #0]
 8001baa:	e7da      	b.n	8001b62 <_free_r+0x22>
 8001bac:	d902      	bls.n	8001bb4 <_free_r+0x74>
 8001bae:	230c      	movs	r3, #12
 8001bb0:	602b      	str	r3, [r5, #0]
 8001bb2:	e7d6      	b.n	8001b62 <_free_r+0x22>
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	1821      	adds	r1, r4, r0
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	bf04      	itt	eq
 8001bbc:	6819      	ldreq	r1, [r3, #0]
 8001bbe:	685b      	ldreq	r3, [r3, #4]
 8001bc0:	6063      	str	r3, [r4, #4]
 8001bc2:	bf04      	itt	eq
 8001bc4:	1809      	addeq	r1, r1, r0
 8001bc6:	6021      	streq	r1, [r4, #0]
 8001bc8:	6054      	str	r4, [r2, #4]
 8001bca:	e7ca      	b.n	8001b62 <_free_r+0x22>
 8001bcc:	bd38      	pop	{r3, r4, r5, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000080 	.word	0x20000080

08001bd4 <__sfputc_r>:
 8001bd4:	6893      	ldr	r3, [r2, #8]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	b410      	push	{r4}
 8001bdc:	6093      	str	r3, [r2, #8]
 8001bde:	da08      	bge.n	8001bf2 <__sfputc_r+0x1e>
 8001be0:	6994      	ldr	r4, [r2, #24]
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	db01      	blt.n	8001bea <__sfputc_r+0x16>
 8001be6:	290a      	cmp	r1, #10
 8001be8:	d103      	bne.n	8001bf2 <__sfputc_r+0x1e>
 8001bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bee:	f7ff be86 	b.w	80018fe <__swbuf_r>
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	1c58      	adds	r0, r3, #1
 8001bf6:	6010      	str	r0, [r2, #0]
 8001bf8:	7019      	strb	r1, [r3, #0]
 8001bfa:	4608      	mov	r0, r1
 8001bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <__sfputs_r>:
 8001c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c04:	4606      	mov	r6, r0
 8001c06:	460f      	mov	r7, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	18d5      	adds	r5, r2, r3
 8001c0c:	42ac      	cmp	r4, r5
 8001c0e:	d101      	bne.n	8001c14 <__sfputs_r+0x12>
 8001c10:	2000      	movs	r0, #0
 8001c12:	e007      	b.n	8001c24 <__sfputs_r+0x22>
 8001c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c18:	463a      	mov	r2, r7
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f7ff ffda 	bl	8001bd4 <__sfputc_r>
 8001c20:	1c43      	adds	r3, r0, #1
 8001c22:	d1f3      	bne.n	8001c0c <__sfputs_r+0xa>
 8001c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c28 <_vfiprintf_r>:
 8001c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c2c:	460d      	mov	r5, r1
 8001c2e:	b09d      	sub	sp, #116	@ 0x74
 8001c30:	4614      	mov	r4, r2
 8001c32:	4698      	mov	r8, r3
 8001c34:	4606      	mov	r6, r0
 8001c36:	b118      	cbz	r0, 8001c40 <_vfiprintf_r+0x18>
 8001c38:	6a03      	ldr	r3, [r0, #32]
 8001c3a:	b90b      	cbnz	r3, 8001c40 <_vfiprintf_r+0x18>
 8001c3c:	f7ff fd76 	bl	800172c <__sinit>
 8001c40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c42:	07d9      	lsls	r1, r3, #31
 8001c44:	d405      	bmi.n	8001c52 <_vfiprintf_r+0x2a>
 8001c46:	89ab      	ldrh	r3, [r5, #12]
 8001c48:	059a      	lsls	r2, r3, #22
 8001c4a:	d402      	bmi.n	8001c52 <_vfiprintf_r+0x2a>
 8001c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c4e:	f7ff ff74 	bl	8001b3a <__retarget_lock_acquire_recursive>
 8001c52:	89ab      	ldrh	r3, [r5, #12]
 8001c54:	071b      	lsls	r3, r3, #28
 8001c56:	d501      	bpl.n	8001c5c <_vfiprintf_r+0x34>
 8001c58:	692b      	ldr	r3, [r5, #16]
 8001c5a:	b99b      	cbnz	r3, 8001c84 <_vfiprintf_r+0x5c>
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f7ff fe8c 	bl	800197c <__swsetup_r>
 8001c64:	b170      	cbz	r0, 8001c84 <_vfiprintf_r+0x5c>
 8001c66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c68:	07dc      	lsls	r4, r3, #31
 8001c6a:	d504      	bpl.n	8001c76 <_vfiprintf_r+0x4e>
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	b01d      	add	sp, #116	@ 0x74
 8001c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c76:	89ab      	ldrh	r3, [r5, #12]
 8001c78:	0598      	lsls	r0, r3, #22
 8001c7a:	d4f7      	bmi.n	8001c6c <_vfiprintf_r+0x44>
 8001c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c7e:	f7ff ff5d 	bl	8001b3c <__retarget_lock_release_recursive>
 8001c82:	e7f3      	b.n	8001c6c <_vfiprintf_r+0x44>
 8001c84:	2300      	movs	r3, #0
 8001c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c88:	2320      	movs	r3, #32
 8001c8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c92:	2330      	movs	r3, #48	@ 0x30
 8001c94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001e44 <_vfiprintf_r+0x21c>
 8001c98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c9c:	f04f 0901 	mov.w	r9, #1
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ca8:	b10a      	cbz	r2, 8001cae <_vfiprintf_r+0x86>
 8001caa:	2a25      	cmp	r2, #37	@ 0x25
 8001cac:	d1f9      	bne.n	8001ca2 <_vfiprintf_r+0x7a>
 8001cae:	ebba 0b04 	subs.w	fp, sl, r4
 8001cb2:	d00b      	beq.n	8001ccc <_vfiprintf_r+0xa4>
 8001cb4:	465b      	mov	r3, fp
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff ffa1 	bl	8001c02 <__sfputs_r>
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	f000 80a7 	beq.w	8001e14 <_vfiprintf_r+0x1ec>
 8001cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001cc8:	445a      	add	r2, fp
 8001cca:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 809f 	beq.w	8001e14 <_vfiprintf_r+0x1ec>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ce0:	f10a 0a01 	add.w	sl, sl, #1
 8001ce4:	9304      	str	r3, [sp, #16]
 8001ce6:	9307      	str	r3, [sp, #28]
 8001ce8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001cec:	931a      	str	r3, [sp, #104]	@ 0x68
 8001cee:	4654      	mov	r4, sl
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf6:	4853      	ldr	r0, [pc, #332]	@ (8001e44 <_vfiprintf_r+0x21c>)
 8001cf8:	f7fe fa8a 	bl	8000210 <memchr>
 8001cfc:	9a04      	ldr	r2, [sp, #16]
 8001cfe:	b9d8      	cbnz	r0, 8001d38 <_vfiprintf_r+0x110>
 8001d00:	06d1      	lsls	r1, r2, #27
 8001d02:	bf44      	itt	mi
 8001d04:	2320      	movmi	r3, #32
 8001d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d0a:	0713      	lsls	r3, r2, #28
 8001d0c:	bf44      	itt	mi
 8001d0e:	232b      	movmi	r3, #43	@ 0x2b
 8001d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d14:	f89a 3000 	ldrb.w	r3, [sl]
 8001d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d1a:	d015      	beq.n	8001d48 <_vfiprintf_r+0x120>
 8001d1c:	9a07      	ldr	r2, [sp, #28]
 8001d1e:	4654      	mov	r4, sl
 8001d20:	2000      	movs	r0, #0
 8001d22:	f04f 0c0a 	mov.w	ip, #10
 8001d26:	4621      	mov	r1, r4
 8001d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d2c:	3b30      	subs	r3, #48	@ 0x30
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	d94b      	bls.n	8001dca <_vfiprintf_r+0x1a2>
 8001d32:	b1b0      	cbz	r0, 8001d62 <_vfiprintf_r+0x13a>
 8001d34:	9207      	str	r2, [sp, #28]
 8001d36:	e014      	b.n	8001d62 <_vfiprintf_r+0x13a>
 8001d38:	eba0 0308 	sub.w	r3, r0, r8
 8001d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	9304      	str	r3, [sp, #16]
 8001d44:	46a2      	mov	sl, r4
 8001d46:	e7d2      	b.n	8001cee <_vfiprintf_r+0xc6>
 8001d48:	9b03      	ldr	r3, [sp, #12]
 8001d4a:	1d19      	adds	r1, r3, #4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	9103      	str	r1, [sp, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfbb      	ittet	lt
 8001d54:	425b      	neglt	r3, r3
 8001d56:	f042 0202 	orrlt.w	r2, r2, #2
 8001d5a:	9307      	strge	r3, [sp, #28]
 8001d5c:	9307      	strlt	r3, [sp, #28]
 8001d5e:	bfb8      	it	lt
 8001d60:	9204      	strlt	r2, [sp, #16]
 8001d62:	7823      	ldrb	r3, [r4, #0]
 8001d64:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d66:	d10a      	bne.n	8001d7e <_vfiprintf_r+0x156>
 8001d68:	7863      	ldrb	r3, [r4, #1]
 8001d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d6c:	d132      	bne.n	8001dd4 <_vfiprintf_r+0x1ac>
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	1d1a      	adds	r2, r3, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	9203      	str	r2, [sp, #12]
 8001d76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d7a:	3402      	adds	r4, #2
 8001d7c:	9305      	str	r3, [sp, #20]
 8001d7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001e54 <_vfiprintf_r+0x22c>
 8001d82:	7821      	ldrb	r1, [r4, #0]
 8001d84:	2203      	movs	r2, #3
 8001d86:	4650      	mov	r0, sl
 8001d88:	f7fe fa42 	bl	8000210 <memchr>
 8001d8c:	b138      	cbz	r0, 8001d9e <_vfiprintf_r+0x176>
 8001d8e:	9b04      	ldr	r3, [sp, #16]
 8001d90:	eba0 000a 	sub.w	r0, r0, sl
 8001d94:	2240      	movs	r2, #64	@ 0x40
 8001d96:	4082      	lsls	r2, r0
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	3401      	adds	r4, #1
 8001d9c:	9304      	str	r3, [sp, #16]
 8001d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001da2:	4829      	ldr	r0, [pc, #164]	@ (8001e48 <_vfiprintf_r+0x220>)
 8001da4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001da8:	2206      	movs	r2, #6
 8001daa:	f7fe fa31 	bl	8000210 <memchr>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d03f      	beq.n	8001e32 <_vfiprintf_r+0x20a>
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <_vfiprintf_r+0x224>)
 8001db4:	bb1b      	cbnz	r3, 8001dfe <_vfiprintf_r+0x1d6>
 8001db6:	9b03      	ldr	r3, [sp, #12]
 8001db8:	3307      	adds	r3, #7
 8001dba:	f023 0307 	bic.w	r3, r3, #7
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	9303      	str	r3, [sp, #12]
 8001dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001dc4:	443b      	add	r3, r7
 8001dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001dc8:	e76a      	b.n	8001ca0 <_vfiprintf_r+0x78>
 8001dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dce:	460c      	mov	r4, r1
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e7a8      	b.n	8001d26 <_vfiprintf_r+0xfe>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	3401      	adds	r4, #1
 8001dd8:	9305      	str	r3, [sp, #20]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 0c0a 	mov.w	ip, #10
 8001de0:	4620      	mov	r0, r4
 8001de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001de6:	3a30      	subs	r2, #48	@ 0x30
 8001de8:	2a09      	cmp	r2, #9
 8001dea:	d903      	bls.n	8001df4 <_vfiprintf_r+0x1cc>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0c6      	beq.n	8001d7e <_vfiprintf_r+0x156>
 8001df0:	9105      	str	r1, [sp, #20]
 8001df2:	e7c4      	b.n	8001d7e <_vfiprintf_r+0x156>
 8001df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001df8:	4604      	mov	r4, r0
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e7f0      	b.n	8001de0 <_vfiprintf_r+0x1b8>
 8001dfe:	ab03      	add	r3, sp, #12
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	462a      	mov	r2, r5
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <_vfiprintf_r+0x228>)
 8001e06:	a904      	add	r1, sp, #16
 8001e08:	4630      	mov	r0, r6
 8001e0a:	f3af 8000 	nop.w
 8001e0e:	4607      	mov	r7, r0
 8001e10:	1c78      	adds	r0, r7, #1
 8001e12:	d1d6      	bne.n	8001dc2 <_vfiprintf_r+0x19a>
 8001e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e16:	07d9      	lsls	r1, r3, #31
 8001e18:	d405      	bmi.n	8001e26 <_vfiprintf_r+0x1fe>
 8001e1a:	89ab      	ldrh	r3, [r5, #12]
 8001e1c:	059a      	lsls	r2, r3, #22
 8001e1e:	d402      	bmi.n	8001e26 <_vfiprintf_r+0x1fe>
 8001e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e22:	f7ff fe8b 	bl	8001b3c <__retarget_lock_release_recursive>
 8001e26:	89ab      	ldrh	r3, [r5, #12]
 8001e28:	065b      	lsls	r3, r3, #25
 8001e2a:	f53f af1f 	bmi.w	8001c6c <_vfiprintf_r+0x44>
 8001e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e30:	e71e      	b.n	8001c70 <_vfiprintf_r+0x48>
 8001e32:	ab03      	add	r3, sp, #12
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	462a      	mov	r2, r5
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <_vfiprintf_r+0x228>)
 8001e3a:	a904      	add	r1, sp, #16
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	f000 f879 	bl	8001f34 <_printf_i>
 8001e42:	e7e4      	b.n	8001e0e <_vfiprintf_r+0x1e6>
 8001e44:	080024cc 	.word	0x080024cc
 8001e48:	080024d6 	.word	0x080024d6
 8001e4c:	00000000 	.word	0x00000000
 8001e50:	08001c03 	.word	0x08001c03
 8001e54:	080024d2 	.word	0x080024d2

08001e58 <_printf_common>:
 8001e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e5c:	4616      	mov	r6, r2
 8001e5e:	4698      	mov	r8, r3
 8001e60:	688a      	ldr	r2, [r1, #8]
 8001e62:	690b      	ldr	r3, [r1, #16]
 8001e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bfb8      	it	lt
 8001e6c:	4613      	movlt	r3, r2
 8001e6e:	6033      	str	r3, [r6, #0]
 8001e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e74:	4607      	mov	r7, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	b10a      	cbz	r2, 8001e7e <_printf_common+0x26>
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	6033      	str	r3, [r6, #0]
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	0699      	lsls	r1, r3, #26
 8001e82:	bf42      	ittt	mi
 8001e84:	6833      	ldrmi	r3, [r6, #0]
 8001e86:	3302      	addmi	r3, #2
 8001e88:	6033      	strmi	r3, [r6, #0]
 8001e8a:	6825      	ldr	r5, [r4, #0]
 8001e8c:	f015 0506 	ands.w	r5, r5, #6
 8001e90:	d106      	bne.n	8001ea0 <_printf_common+0x48>
 8001e92:	f104 0a19 	add.w	sl, r4, #25
 8001e96:	68e3      	ldr	r3, [r4, #12]
 8001e98:	6832      	ldr	r2, [r6, #0]
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dc26      	bgt.n	8001eee <_printf_common+0x96>
 8001ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	3b00      	subs	r3, #0
 8001ea8:	bf18      	it	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	0692      	lsls	r2, r2, #26
 8001eae:	d42b      	bmi.n	8001f08 <_printf_common+0xb0>
 8001eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4638      	mov	r0, r7
 8001eb8:	47c8      	blx	r9
 8001eba:	3001      	adds	r0, #1
 8001ebc:	d01e      	beq.n	8001efc <_printf_common+0xa4>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	6922      	ldr	r2, [r4, #16]
 8001ec2:	f003 0306 	and.w	r3, r3, #6
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf02      	ittt	eq
 8001eca:	68e5      	ldreq	r5, [r4, #12]
 8001ecc:	6833      	ldreq	r3, [r6, #0]
 8001ece:	1aed      	subeq	r5, r5, r3
 8001ed0:	68a3      	ldr	r3, [r4, #8]
 8001ed2:	bf0c      	ite	eq
 8001ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ed8:	2500      	movne	r5, #0
 8001eda:	4293      	cmp	r3, r2
 8001edc:	bfc4      	itt	gt
 8001ede:	1a9b      	subgt	r3, r3, r2
 8001ee0:	18ed      	addgt	r5, r5, r3
 8001ee2:	2600      	movs	r6, #0
 8001ee4:	341a      	adds	r4, #26
 8001ee6:	42b5      	cmp	r5, r6
 8001ee8:	d11a      	bne.n	8001f20 <_printf_common+0xc8>
 8001eea:	2000      	movs	r0, #0
 8001eec:	e008      	b.n	8001f00 <_printf_common+0xa8>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4652      	mov	r2, sl
 8001ef2:	4641      	mov	r1, r8
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	47c8      	blx	r9
 8001ef8:	3001      	adds	r0, #1
 8001efa:	d103      	bne.n	8001f04 <_printf_common+0xac>
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f04:	3501      	adds	r5, #1
 8001f06:	e7c6      	b.n	8001e96 <_printf_common+0x3e>
 8001f08:	18e1      	adds	r1, r4, r3
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	2030      	movs	r0, #48	@ 0x30
 8001f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f12:	4422      	add	r2, r4
 8001f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	e7c7      	b.n	8001eb0 <_printf_common+0x58>
 8001f20:	2301      	movs	r3, #1
 8001f22:	4622      	mov	r2, r4
 8001f24:	4641      	mov	r1, r8
 8001f26:	4638      	mov	r0, r7
 8001f28:	47c8      	blx	r9
 8001f2a:	3001      	adds	r0, #1
 8001f2c:	d0e6      	beq.n	8001efc <_printf_common+0xa4>
 8001f2e:	3601      	adds	r6, #1
 8001f30:	e7d9      	b.n	8001ee6 <_printf_common+0x8e>
	...

08001f34 <_printf_i>:
 8001f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f38:	7e0f      	ldrb	r7, [r1, #24]
 8001f3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f3c:	2f78      	cmp	r7, #120	@ 0x78
 8001f3e:	4691      	mov	r9, r2
 8001f40:	4680      	mov	r8, r0
 8001f42:	460c      	mov	r4, r1
 8001f44:	469a      	mov	sl, r3
 8001f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f4a:	d807      	bhi.n	8001f5c <_printf_i+0x28>
 8001f4c:	2f62      	cmp	r7, #98	@ 0x62
 8001f4e:	d80a      	bhi.n	8001f66 <_printf_i+0x32>
 8001f50:	2f00      	cmp	r7, #0
 8001f52:	f000 80d2 	beq.w	80020fa <_printf_i+0x1c6>
 8001f56:	2f58      	cmp	r7, #88	@ 0x58
 8001f58:	f000 80b9 	beq.w	80020ce <_printf_i+0x19a>
 8001f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f64:	e03a      	b.n	8001fdc <_printf_i+0xa8>
 8001f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f6a:	2b15      	cmp	r3, #21
 8001f6c:	d8f6      	bhi.n	8001f5c <_printf_i+0x28>
 8001f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8001f74 <_printf_i+0x40>)
 8001f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f74:	08001fcd 	.word	0x08001fcd
 8001f78:	08001fe1 	.word	0x08001fe1
 8001f7c:	08001f5d 	.word	0x08001f5d
 8001f80:	08001f5d 	.word	0x08001f5d
 8001f84:	08001f5d 	.word	0x08001f5d
 8001f88:	08001f5d 	.word	0x08001f5d
 8001f8c:	08001fe1 	.word	0x08001fe1
 8001f90:	08001f5d 	.word	0x08001f5d
 8001f94:	08001f5d 	.word	0x08001f5d
 8001f98:	08001f5d 	.word	0x08001f5d
 8001f9c:	08001f5d 	.word	0x08001f5d
 8001fa0:	080020e1 	.word	0x080020e1
 8001fa4:	0800200b 	.word	0x0800200b
 8001fa8:	0800209b 	.word	0x0800209b
 8001fac:	08001f5d 	.word	0x08001f5d
 8001fb0:	08001f5d 	.word	0x08001f5d
 8001fb4:	08002103 	.word	0x08002103
 8001fb8:	08001f5d 	.word	0x08001f5d
 8001fbc:	0800200b 	.word	0x0800200b
 8001fc0:	08001f5d 	.word	0x08001f5d
 8001fc4:	08001f5d 	.word	0x08001f5d
 8001fc8:	080020a3 	.word	0x080020a3
 8001fcc:	6833      	ldr	r3, [r6, #0]
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6032      	str	r2, [r6, #0]
 8001fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e09d      	b.n	800211c <_printf_i+0x1e8>
 8001fe0:	6833      	ldr	r3, [r6, #0]
 8001fe2:	6820      	ldr	r0, [r4, #0]
 8001fe4:	1d19      	adds	r1, r3, #4
 8001fe6:	6031      	str	r1, [r6, #0]
 8001fe8:	0606      	lsls	r6, r0, #24
 8001fea:	d501      	bpl.n	8001ff0 <_printf_i+0xbc>
 8001fec:	681d      	ldr	r5, [r3, #0]
 8001fee:	e003      	b.n	8001ff8 <_printf_i+0xc4>
 8001ff0:	0645      	lsls	r5, r0, #25
 8001ff2:	d5fb      	bpl.n	8001fec <_printf_i+0xb8>
 8001ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ff8:	2d00      	cmp	r5, #0
 8001ffa:	da03      	bge.n	8002004 <_printf_i+0xd0>
 8001ffc:	232d      	movs	r3, #45	@ 0x2d
 8001ffe:	426d      	negs	r5, r5
 8002000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002004:	4859      	ldr	r0, [pc, #356]	@ (800216c <_printf_i+0x238>)
 8002006:	230a      	movs	r3, #10
 8002008:	e011      	b.n	800202e <_printf_i+0xfa>
 800200a:	6821      	ldr	r1, [r4, #0]
 800200c:	6833      	ldr	r3, [r6, #0]
 800200e:	0608      	lsls	r0, r1, #24
 8002010:	f853 5b04 	ldr.w	r5, [r3], #4
 8002014:	d402      	bmi.n	800201c <_printf_i+0xe8>
 8002016:	0649      	lsls	r1, r1, #25
 8002018:	bf48      	it	mi
 800201a:	b2ad      	uxthmi	r5, r5
 800201c:	2f6f      	cmp	r7, #111	@ 0x6f
 800201e:	4853      	ldr	r0, [pc, #332]	@ (800216c <_printf_i+0x238>)
 8002020:	6033      	str	r3, [r6, #0]
 8002022:	bf14      	ite	ne
 8002024:	230a      	movne	r3, #10
 8002026:	2308      	moveq	r3, #8
 8002028:	2100      	movs	r1, #0
 800202a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800202e:	6866      	ldr	r6, [r4, #4]
 8002030:	60a6      	str	r6, [r4, #8]
 8002032:	2e00      	cmp	r6, #0
 8002034:	bfa2      	ittt	ge
 8002036:	6821      	ldrge	r1, [r4, #0]
 8002038:	f021 0104 	bicge.w	r1, r1, #4
 800203c:	6021      	strge	r1, [r4, #0]
 800203e:	b90d      	cbnz	r5, 8002044 <_printf_i+0x110>
 8002040:	2e00      	cmp	r6, #0
 8002042:	d04b      	beq.n	80020dc <_printf_i+0x1a8>
 8002044:	4616      	mov	r6, r2
 8002046:	fbb5 f1f3 	udiv	r1, r5, r3
 800204a:	fb03 5711 	mls	r7, r3, r1, r5
 800204e:	5dc7      	ldrb	r7, [r0, r7]
 8002050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002054:	462f      	mov	r7, r5
 8002056:	42bb      	cmp	r3, r7
 8002058:	460d      	mov	r5, r1
 800205a:	d9f4      	bls.n	8002046 <_printf_i+0x112>
 800205c:	2b08      	cmp	r3, #8
 800205e:	d10b      	bne.n	8002078 <_printf_i+0x144>
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	07df      	lsls	r7, r3, #31
 8002064:	d508      	bpl.n	8002078 <_printf_i+0x144>
 8002066:	6923      	ldr	r3, [r4, #16]
 8002068:	6861      	ldr	r1, [r4, #4]
 800206a:	4299      	cmp	r1, r3
 800206c:	bfde      	ittt	le
 800206e:	2330      	movle	r3, #48	@ 0x30
 8002070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002074:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002078:	1b92      	subs	r2, r2, r6
 800207a:	6122      	str	r2, [r4, #16]
 800207c:	f8cd a000 	str.w	sl, [sp]
 8002080:	464b      	mov	r3, r9
 8002082:	aa03      	add	r2, sp, #12
 8002084:	4621      	mov	r1, r4
 8002086:	4640      	mov	r0, r8
 8002088:	f7ff fee6 	bl	8001e58 <_printf_common>
 800208c:	3001      	adds	r0, #1
 800208e:	d14a      	bne.n	8002126 <_printf_i+0x1f2>
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	b004      	add	sp, #16
 8002096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	4833      	ldr	r0, [pc, #204]	@ (8002170 <_printf_i+0x23c>)
 80020a4:	2778      	movs	r7, #120	@ 0x78
 80020a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	6831      	ldr	r1, [r6, #0]
 80020ae:	061f      	lsls	r7, r3, #24
 80020b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80020b4:	d402      	bmi.n	80020bc <_printf_i+0x188>
 80020b6:	065f      	lsls	r7, r3, #25
 80020b8:	bf48      	it	mi
 80020ba:	b2ad      	uxthmi	r5, r5
 80020bc:	6031      	str	r1, [r6, #0]
 80020be:	07d9      	lsls	r1, r3, #31
 80020c0:	bf44      	itt	mi
 80020c2:	f043 0320 	orrmi.w	r3, r3, #32
 80020c6:	6023      	strmi	r3, [r4, #0]
 80020c8:	b11d      	cbz	r5, 80020d2 <_printf_i+0x19e>
 80020ca:	2310      	movs	r3, #16
 80020cc:	e7ac      	b.n	8002028 <_printf_i+0xf4>
 80020ce:	4827      	ldr	r0, [pc, #156]	@ (800216c <_printf_i+0x238>)
 80020d0:	e7e9      	b.n	80020a6 <_printf_i+0x172>
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	f023 0320 	bic.w	r3, r3, #32
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	e7f6      	b.n	80020ca <_printf_i+0x196>
 80020dc:	4616      	mov	r6, r2
 80020de:	e7bd      	b.n	800205c <_printf_i+0x128>
 80020e0:	6833      	ldr	r3, [r6, #0]
 80020e2:	6825      	ldr	r5, [r4, #0]
 80020e4:	6961      	ldr	r1, [r4, #20]
 80020e6:	1d18      	adds	r0, r3, #4
 80020e8:	6030      	str	r0, [r6, #0]
 80020ea:	062e      	lsls	r6, r5, #24
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	d501      	bpl.n	80020f4 <_printf_i+0x1c0>
 80020f0:	6019      	str	r1, [r3, #0]
 80020f2:	e002      	b.n	80020fa <_printf_i+0x1c6>
 80020f4:	0668      	lsls	r0, r5, #25
 80020f6:	d5fb      	bpl.n	80020f0 <_printf_i+0x1bc>
 80020f8:	8019      	strh	r1, [r3, #0]
 80020fa:	2300      	movs	r3, #0
 80020fc:	6123      	str	r3, [r4, #16]
 80020fe:	4616      	mov	r6, r2
 8002100:	e7bc      	b.n	800207c <_printf_i+0x148>
 8002102:	6833      	ldr	r3, [r6, #0]
 8002104:	1d1a      	adds	r2, r3, #4
 8002106:	6032      	str	r2, [r6, #0]
 8002108:	681e      	ldr	r6, [r3, #0]
 800210a:	6862      	ldr	r2, [r4, #4]
 800210c:	2100      	movs	r1, #0
 800210e:	4630      	mov	r0, r6
 8002110:	f7fe f87e 	bl	8000210 <memchr>
 8002114:	b108      	cbz	r0, 800211a <_printf_i+0x1e6>
 8002116:	1b80      	subs	r0, r0, r6
 8002118:	6060      	str	r0, [r4, #4]
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	6123      	str	r3, [r4, #16]
 800211e:	2300      	movs	r3, #0
 8002120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002124:	e7aa      	b.n	800207c <_printf_i+0x148>
 8002126:	6923      	ldr	r3, [r4, #16]
 8002128:	4632      	mov	r2, r6
 800212a:	4649      	mov	r1, r9
 800212c:	4640      	mov	r0, r8
 800212e:	47d0      	blx	sl
 8002130:	3001      	adds	r0, #1
 8002132:	d0ad      	beq.n	8002090 <_printf_i+0x15c>
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	079b      	lsls	r3, r3, #30
 8002138:	d413      	bmi.n	8002162 <_printf_i+0x22e>
 800213a:	68e0      	ldr	r0, [r4, #12]
 800213c:	9b03      	ldr	r3, [sp, #12]
 800213e:	4298      	cmp	r0, r3
 8002140:	bfb8      	it	lt
 8002142:	4618      	movlt	r0, r3
 8002144:	e7a6      	b.n	8002094 <_printf_i+0x160>
 8002146:	2301      	movs	r3, #1
 8002148:	4632      	mov	r2, r6
 800214a:	4649      	mov	r1, r9
 800214c:	4640      	mov	r0, r8
 800214e:	47d0      	blx	sl
 8002150:	3001      	adds	r0, #1
 8002152:	d09d      	beq.n	8002090 <_printf_i+0x15c>
 8002154:	3501      	adds	r5, #1
 8002156:	68e3      	ldr	r3, [r4, #12]
 8002158:	9903      	ldr	r1, [sp, #12]
 800215a:	1a5b      	subs	r3, r3, r1
 800215c:	42ab      	cmp	r3, r5
 800215e:	dcf2      	bgt.n	8002146 <_printf_i+0x212>
 8002160:	e7eb      	b.n	800213a <_printf_i+0x206>
 8002162:	2500      	movs	r5, #0
 8002164:	f104 0619 	add.w	r6, r4, #25
 8002168:	e7f5      	b.n	8002156 <_printf_i+0x222>
 800216a:	bf00      	nop
 800216c:	080024dd 	.word	0x080024dd
 8002170:	080024ee 	.word	0x080024ee

08002174 <__sflush_r>:
 8002174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	0716      	lsls	r6, r2, #28
 800217e:	4605      	mov	r5, r0
 8002180:	460c      	mov	r4, r1
 8002182:	d454      	bmi.n	800222e <__sflush_r+0xba>
 8002184:	684b      	ldr	r3, [r1, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	dc02      	bgt.n	8002190 <__sflush_r+0x1c>
 800218a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	dd48      	ble.n	8002222 <__sflush_r+0xae>
 8002190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002192:	2e00      	cmp	r6, #0
 8002194:	d045      	beq.n	8002222 <__sflush_r+0xae>
 8002196:	2300      	movs	r3, #0
 8002198:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800219c:	682f      	ldr	r7, [r5, #0]
 800219e:	6a21      	ldr	r1, [r4, #32]
 80021a0:	602b      	str	r3, [r5, #0]
 80021a2:	d030      	beq.n	8002206 <__sflush_r+0x92>
 80021a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	0759      	lsls	r1, r3, #29
 80021aa:	d505      	bpl.n	80021b8 <__sflush_r+0x44>
 80021ac:	6863      	ldr	r3, [r4, #4]
 80021ae:	1ad2      	subs	r2, r2, r3
 80021b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80021b2:	b10b      	cbz	r3, 80021b8 <__sflush_r+0x44>
 80021b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021bc:	6a21      	ldr	r1, [r4, #32]
 80021be:	4628      	mov	r0, r5
 80021c0:	47b0      	blx	r6
 80021c2:	1c43      	adds	r3, r0, #1
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	d106      	bne.n	80021d6 <__sflush_r+0x62>
 80021c8:	6829      	ldr	r1, [r5, #0]
 80021ca:	291d      	cmp	r1, #29
 80021cc:	d82b      	bhi.n	8002226 <__sflush_r+0xb2>
 80021ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002278 <__sflush_r+0x104>)
 80021d0:	410a      	asrs	r2, r1
 80021d2:	07d6      	lsls	r6, r2, #31
 80021d4:	d427      	bmi.n	8002226 <__sflush_r+0xb2>
 80021d6:	2200      	movs	r2, #0
 80021d8:	6062      	str	r2, [r4, #4]
 80021da:	04d9      	lsls	r1, r3, #19
 80021dc:	6922      	ldr	r2, [r4, #16]
 80021de:	6022      	str	r2, [r4, #0]
 80021e0:	d504      	bpl.n	80021ec <__sflush_r+0x78>
 80021e2:	1c42      	adds	r2, r0, #1
 80021e4:	d101      	bne.n	80021ea <__sflush_r+0x76>
 80021e6:	682b      	ldr	r3, [r5, #0]
 80021e8:	b903      	cbnz	r3, 80021ec <__sflush_r+0x78>
 80021ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80021ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021ee:	602f      	str	r7, [r5, #0]
 80021f0:	b1b9      	cbz	r1, 8002222 <__sflush_r+0xae>
 80021f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021f6:	4299      	cmp	r1, r3
 80021f8:	d002      	beq.n	8002200 <__sflush_r+0x8c>
 80021fa:	4628      	mov	r0, r5
 80021fc:	f7ff fca0 	bl	8001b40 <_free_r>
 8002200:	2300      	movs	r3, #0
 8002202:	6363      	str	r3, [r4, #52]	@ 0x34
 8002204:	e00d      	b.n	8002222 <__sflush_r+0xae>
 8002206:	2301      	movs	r3, #1
 8002208:	4628      	mov	r0, r5
 800220a:	47b0      	blx	r6
 800220c:	4602      	mov	r2, r0
 800220e:	1c50      	adds	r0, r2, #1
 8002210:	d1c9      	bne.n	80021a6 <__sflush_r+0x32>
 8002212:	682b      	ldr	r3, [r5, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0c6      	beq.n	80021a6 <__sflush_r+0x32>
 8002218:	2b1d      	cmp	r3, #29
 800221a:	d001      	beq.n	8002220 <__sflush_r+0xac>
 800221c:	2b16      	cmp	r3, #22
 800221e:	d11e      	bne.n	800225e <__sflush_r+0xea>
 8002220:	602f      	str	r7, [r5, #0]
 8002222:	2000      	movs	r0, #0
 8002224:	e022      	b.n	800226c <__sflush_r+0xf8>
 8002226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800222a:	b21b      	sxth	r3, r3
 800222c:	e01b      	b.n	8002266 <__sflush_r+0xf2>
 800222e:	690f      	ldr	r7, [r1, #16]
 8002230:	2f00      	cmp	r7, #0
 8002232:	d0f6      	beq.n	8002222 <__sflush_r+0xae>
 8002234:	0793      	lsls	r3, r2, #30
 8002236:	680e      	ldr	r6, [r1, #0]
 8002238:	bf08      	it	eq
 800223a:	694b      	ldreq	r3, [r1, #20]
 800223c:	600f      	str	r7, [r1, #0]
 800223e:	bf18      	it	ne
 8002240:	2300      	movne	r3, #0
 8002242:	eba6 0807 	sub.w	r8, r6, r7
 8002246:	608b      	str	r3, [r1, #8]
 8002248:	f1b8 0f00 	cmp.w	r8, #0
 800224c:	dde9      	ble.n	8002222 <__sflush_r+0xae>
 800224e:	6a21      	ldr	r1, [r4, #32]
 8002250:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002252:	4643      	mov	r3, r8
 8002254:	463a      	mov	r2, r7
 8002256:	4628      	mov	r0, r5
 8002258:	47b0      	blx	r6
 800225a:	2800      	cmp	r0, #0
 800225c:	dc08      	bgt.n	8002270 <__sflush_r+0xfc>
 800225e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002266:	81a3      	strh	r3, [r4, #12]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002270:	4407      	add	r7, r0
 8002272:	eba8 0800 	sub.w	r8, r8, r0
 8002276:	e7e7      	b.n	8002248 <__sflush_r+0xd4>
 8002278:	dfbffffe 	.word	0xdfbffffe

0800227c <_fflush_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	690b      	ldr	r3, [r1, #16]
 8002280:	4605      	mov	r5, r0
 8002282:	460c      	mov	r4, r1
 8002284:	b913      	cbnz	r3, 800228c <_fflush_r+0x10>
 8002286:	2500      	movs	r5, #0
 8002288:	4628      	mov	r0, r5
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	b118      	cbz	r0, 8002296 <_fflush_r+0x1a>
 800228e:	6a03      	ldr	r3, [r0, #32]
 8002290:	b90b      	cbnz	r3, 8002296 <_fflush_r+0x1a>
 8002292:	f7ff fa4b 	bl	800172c <__sinit>
 8002296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f3      	beq.n	8002286 <_fflush_r+0xa>
 800229e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022a0:	07d0      	lsls	r0, r2, #31
 80022a2:	d404      	bmi.n	80022ae <_fflush_r+0x32>
 80022a4:	0599      	lsls	r1, r3, #22
 80022a6:	d402      	bmi.n	80022ae <_fflush_r+0x32>
 80022a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022aa:	f7ff fc46 	bl	8001b3a <__retarget_lock_acquire_recursive>
 80022ae:	4628      	mov	r0, r5
 80022b0:	4621      	mov	r1, r4
 80022b2:	f7ff ff5f 	bl	8002174 <__sflush_r>
 80022b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022b8:	07da      	lsls	r2, r3, #31
 80022ba:	4605      	mov	r5, r0
 80022bc:	d4e4      	bmi.n	8002288 <_fflush_r+0xc>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	059b      	lsls	r3, r3, #22
 80022c2:	d4e1      	bmi.n	8002288 <_fflush_r+0xc>
 80022c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022c6:	f7ff fc39 	bl	8001b3c <__retarget_lock_release_recursive>
 80022ca:	e7dd      	b.n	8002288 <_fflush_r+0xc>

080022cc <__swhatbuf_r>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	460c      	mov	r4, r1
 80022d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022d4:	2900      	cmp	r1, #0
 80022d6:	b096      	sub	sp, #88	@ 0x58
 80022d8:	4615      	mov	r5, r2
 80022da:	461e      	mov	r6, r3
 80022dc:	da0d      	bge.n	80022fa <__swhatbuf_r+0x2e>
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2340      	movne	r3, #64	@ 0x40
 80022ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80022f0:	2000      	movs	r0, #0
 80022f2:	6031      	str	r1, [r6, #0]
 80022f4:	602b      	str	r3, [r5, #0]
 80022f6:	b016      	add	sp, #88	@ 0x58
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
 80022fa:	466a      	mov	r2, sp
 80022fc:	f000 f848 	bl	8002390 <_fstat_r>
 8002300:	2800      	cmp	r0, #0
 8002302:	dbec      	blt.n	80022de <__swhatbuf_r+0x12>
 8002304:	9901      	ldr	r1, [sp, #4]
 8002306:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800230a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800230e:	4259      	negs	r1, r3
 8002310:	4159      	adcs	r1, r3
 8002312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002316:	e7eb      	b.n	80022f0 <__swhatbuf_r+0x24>

08002318 <__smakebuf_r>:
 8002318:	898b      	ldrh	r3, [r1, #12]
 800231a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800231c:	079d      	lsls	r5, r3, #30
 800231e:	4606      	mov	r6, r0
 8002320:	460c      	mov	r4, r1
 8002322:	d507      	bpl.n	8002334 <__smakebuf_r+0x1c>
 8002324:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	6123      	str	r3, [r4, #16]
 800232c:	2301      	movs	r3, #1
 800232e:	6163      	str	r3, [r4, #20]
 8002330:	b003      	add	sp, #12
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002334:	ab01      	add	r3, sp, #4
 8002336:	466a      	mov	r2, sp
 8002338:	f7ff ffc8 	bl	80022cc <__swhatbuf_r>
 800233c:	9f00      	ldr	r7, [sp, #0]
 800233e:	4605      	mov	r5, r0
 8002340:	4639      	mov	r1, r7
 8002342:	4630      	mov	r0, r6
 8002344:	f7ff f8da 	bl	80014fc <_malloc_r>
 8002348:	b948      	cbnz	r0, 800235e <__smakebuf_r+0x46>
 800234a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800234e:	059a      	lsls	r2, r3, #22
 8002350:	d4ee      	bmi.n	8002330 <__smakebuf_r+0x18>
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	81a3      	strh	r3, [r4, #12]
 800235c:	e7e2      	b.n	8002324 <__smakebuf_r+0xc>
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	6020      	str	r0, [r4, #0]
 8002362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	9b01      	ldr	r3, [sp, #4]
 800236a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800236e:	b15b      	cbz	r3, 8002388 <__smakebuf_r+0x70>
 8002370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002374:	4630      	mov	r0, r6
 8002376:	f000 f81d 	bl	80023b4 <_isatty_r>
 800237a:	b128      	cbz	r0, 8002388 <__smakebuf_r+0x70>
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	f023 0303 	bic.w	r3, r3, #3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	81a3      	strh	r3, [r4, #12]
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	431d      	orrs	r5, r3
 800238c:	81a5      	strh	r5, [r4, #12]
 800238e:	e7cf      	b.n	8002330 <__smakebuf_r+0x18>

08002390 <_fstat_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4d07      	ldr	r5, [pc, #28]	@ (80023b0 <_fstat_r+0x20>)
 8002394:	2300      	movs	r3, #0
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	f7fe ff5d 	bl	800125c <_fstat>
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	d102      	bne.n	80023ac <_fstat_r+0x1c>
 80023a6:	682b      	ldr	r3, [r5, #0]
 80023a8:	b103      	cbz	r3, 80023ac <_fstat_r+0x1c>
 80023aa:	6023      	str	r3, [r4, #0]
 80023ac:	bd38      	pop	{r3, r4, r5, pc}
 80023ae:	bf00      	nop
 80023b0:	200001c0 	.word	0x200001c0

080023b4 <_isatty_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4d06      	ldr	r5, [pc, #24]	@ (80023d0 <_isatty_r+0x1c>)
 80023b8:	2300      	movs	r3, #0
 80023ba:	4604      	mov	r4, r0
 80023bc:	4608      	mov	r0, r1
 80023be:	602b      	str	r3, [r5, #0]
 80023c0:	f7fe ff5c 	bl	800127c <_isatty>
 80023c4:	1c43      	adds	r3, r0, #1
 80023c6:	d102      	bne.n	80023ce <_isatty_r+0x1a>
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	b103      	cbz	r3, 80023ce <_isatty_r+0x1a>
 80023cc:	6023      	str	r3, [r4, #0]
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
 80023d0:	200001c0 	.word	0x200001c0

080023d4 <_init>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr

080023e0 <_fini>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr
